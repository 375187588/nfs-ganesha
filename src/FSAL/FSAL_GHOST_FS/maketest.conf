
Test ReadOnly_Features
{
   Product = FSAL upon GHOSTFS.
   Command = ../../bin/`archi -M`/ganeshell -vf ../scripts/test_fsal.gansh
   Comment = FSAL Tests.

        # no error occured
        Success TestOk
        {
            NOT
          STDOUT =~ /ERR_FSAL_/m
        }
        
        # Command execution problem
        Failure BadStatus
        {
          STDERR =~ /Return code: [^0]/m
        }
        
        # FSAL error
        Failure ErrorFSAL
        {
          STDOUT =~ /ERR_FSAL_/m
        }        
        
        # Change dir checks
        Failure ErrorCd
        {
          NOT
          STDOUT =~ /^Current directory is \"\/\"/m
          OR
          NOT
          STDOUT =~ /^Current directory is \"\/AIX_4\/bin\"/m
          OR
          NOT
          STDOUT =~ /^Current directory is \"\/OSF1_V5\/etc\"/m
        }
        
        # ls check
        Failure ErrorLs
        {
          NOT
          STDOUT =~ /^\s*[0-9a-f]+\s*[\-pcdbl][\-rwxSsl]+\s*[0-9]+\s*[0-9]+\s*[0-9]+\s*[0-9]+\s*/m
        }
        
        # symlink check
        Failure ErrorSymlink
        {
           NOT
           STDOUT =~ /sherpa_ret\.X\.conf -> \.\.\/\.\.\/share\/etc\/sherpa_ret\.X\.conf/m
        }
        
        # stat check
        Failure ErrorStats
        {
           NOT
           STDOUT =~ /^FSAL_lookup\s*\|\s*[^0][0-9]*\s*\|\s*[^0][0-9]*\s*\|\s*0\s*\|\s*0/m
           OR
           NOT
           STDOUT =~ /^FSAL_getattrs\s*\|\s*[^0][0-9]*\s*\|\s*[^0][0-9]*\s*\|\s*0\s*\|\s*0/m
           OR
           NOT
           STDOUT =~ /^FSAL_opendir\s*\|\s*[^0][0-9]*\s*\|\s*[^0][0-9]*\s*\|\s*0\s*\|\s*0/m
           OR
           NOT
           STDOUT =~ /^FSAL_readdir\s*\|\s*[^0][0-9]*\s*\|\s*[^0][0-9]*\s*\|\s*0\s*\|\s*0/m
           OR
           NOT
           STDOUT =~ /^FSAL_closedir\s*\|\s*[^0][0-9]*\s*\|\s*[^0][0-9]*\s*\|\s*0\s*\|\s*0/m
           OR
           NOT
           STDOUT =~ /^FSAL_readlink\s*\|\s*[^0][0-9]*\s*\|\s*[^0][0-9]*\s*\|\s*0\s*\|\s*0/m
           OR
           NOT
           STDOUT =~ /^FSAL_GetUserCred\s*\|\s*[^0][0-9]*\s*\|\s*[^0][0-9]*\s*\|\s*0\s*\|\s*0/m
           OR
           NOT
           STDOUT =~ /^FSAL_Init\s*\|\s*[^0][0-9]*\s*\|\s*[^0][0-9]*\s*\|\s*0\s*\|\s*0/m
           OR
           NOT
           STDOUT =~ /^FSAL_lookupPath\s*\|\s*[^0][0-9]*\s*\|\s*[^0][0-9]*\s*\|\s*0\s*\|\s*0/m
        }
        
        # anormal termination (shell should return 0)
        Failure AnormalTermination
        {
          STATUS != 0
        }
}




Test ErrorCodes
{
   Product = FSAL upon GHOSTFS.
   Command = ../../bin/`archi -M`/ganeshell -vf ../scripts/test_fsal_errors.gansh
   Comment = FSAL error code tests.

        # test if we executed all the commands (10)
        # and the program ended well.
        Success TestOk
        {
          STDERR =~ /<11>[^:]*::[^:]*: Return code:/m
          AND
          STATUS == 0
        }
        
        # anormal termination (shell should return 0)
        Failure AnormalTermination
        {
          STATUS != 0
        }
        
        # commands 1,2,3 must return ERR_FSAL_BAD_INIT
        Failure should_return_ERR_FSAL_BAD_INIT
        {
          NOT
          STDERR =~ /<2>[^:]*::[^:]*: Return code: 20003/m
          OR
          NOT
          STDERR =~ /<3>[^:]*::[^:]*: Return code: 20003/m
          OR
          NOT
          STDERR =~ /<4>[^:]*::[^:]*: Return code: 20003/m
        }
        
        # commands 1,2,3 must return ERR_FSAL_BAD_INIT
        # for different reasons
        Failure Missing_ERR_FSAL_BAD_INIT
        {
          NOT
          STDOUT =~ /FSAL_Init:ERR_FSAL_BAD_INIT[^,]*,ERR_GHOSTFS_OPEN/m
  #        OR
  #        NOT
  #        STDOUT =~ /FSAL_Init:ERR_FSAL_BAD_INIT[^,]*,ERR_GHOSTFS_READ/m
          OR
          NOT
          STDOUT =~ /FSAL_Init:ERR_FSAL_BAD_INIT[^,]*,ERR_GHOSTFS_SYNTAX/m
        }
        
        # commands 4,5,9 must be successful
        Failure should_success
        {
          NOT
          STDERR =~ /<5>[^:]*::[^:]*: Return code: 0/m
          OR
          NOT
          STDERR =~ /<6>[^:]*::[^:]*: Return code: 0/m
          OR
          NOT
          STDERR =~ /<10>[^:]*::[^:]*: Return code: 0/m
        }        

        # commands 6,7,8 must result in a ERR_FSAL_ACCESS error
        Failure should_return_ERR_FSAL_ACCESS
        {
          NOT
          STDERR =~ /<7>[^:]*::[^:]*: Return code: 13/m
          OR
          NOT
          STDERR =~ /<8>[^:]*::[^:]*: Return code: 13/m
          OR
          NOT
          STDERR =~ /<9>[^:]*::[^:]*: Return code: 13/m
        }
        
        # commands that must return access error are opendir and lookup
        Failure Missing_ERR_FSAL_ACCESS
        {
          NOT
          STDOUT =~ /FSAL_opendir:ERR_FSAL_ACCESS[^,]*,ERR_GHOSTFS_ACCES/m
          OR
          NOT
          STDOUT =~ /FSAL_lookup:ERR_FSAL_ACCESS[^,]*,ERR_GHOSTFS_ACCES/m
        }
        
        # commands 10 must result in a ERR_FSAL_NOENT error
        Failure should_return_ERR_FSAL_NOENT
        {
          NOT
          STDERR =~ /<11>[^:]*::[^:]*: Return code: 2/m
        }
        
        # command that must return NOENT is lookupPath
        Failure Missing_ERR_FSAL_NOENT
        {
          NOT
          STDOUT =~ /FSAL_lookupPath:ERR_FSAL_NOENT[^,]*,ERR_GHOSTFS_NOENT/m
        }
        
}


Test Test_access_using_attributes
{
   Product = FSAL upon GHOSTFS.
   Command = ../../bin/`archi -M`/test_libfsal 6 ../../share/conf/ghostfs.conf
   Comment = test for FSAL_test_access call.
   
   
    # anormal termination (shell should return 0)
    Failure AnormalTermination
    {
      STATUS != 0
    }

    Success TestOk
    {
      STATUS == 0
      AND
      NOT
      STDOUT =~ /different access permissions/
    }
    
    Failure Different_Access_Permissions
    {
      STDOUT =~ /different access permissions/
    }
   
}



Test Test_snprintmem_sscanmem
{
   Product = FSAL upon GHOSTFS.
   Command = ../../bin/`archi -M`/test_libfsal 7 ../../share/conf/ghostfs.conf
   Comment = test for snprintmem and snscanmem calls.
   
   
    # anormal termination (shell should return 0)
    Failure AnormalTermination
    {
      STATUS != 0
    }

    # we must have 3 OK and no errors
    Success TestOk
    {
      STATUS == 0
      AND
      NOT
      STDOUT =~ /ERROR/
      AND
      STDOUT =~ /OK(.|\s)*OK(.|\s)*OK/
    }
    
    Failure print_or_scan_error
    {
      STDOUT =~ /ERROR/
    }
   
}


