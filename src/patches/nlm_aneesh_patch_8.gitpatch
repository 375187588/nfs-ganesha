diff --git a/src/MainNFSD/nfs_worker_thread.c b/src/MainNFSD/nfs_worker_thread.c
index 15ad3a6..f9cb6e8 100644
--- a/src/MainNFSD/nfs_worker_thread.c
+++ b/src/MainNFSD/nfs_worker_thread.c
@@ -242,33 +242,132 @@ const nfs_function_desc_t mnt3_func_desc[] =
   {mnt_Export , mnt_Export_Free,  (xdrproc_t)xdr_void,     (xdrproc_t)xdr_exports,   "mnt_Export",  NOTHING_SPECIAL }
 };
 
+#define nlm4_Unsupported nlm_Null
+#define nlm4_Unsupported_Free nlm_Null_Free
+
 const nfs_function_desc_t nlm4_func_desc[] =
 {
-  {
+ [NLMPROC4_NULL] =  {
    nlm_Null, nlm_Null_Free,
    (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
    "nlm_Null",  NOTHING_SPECIAL
   },
-  {
+ [NLMPROC4_TEST] =  {
    nlm4_Test, nlm4_Test_Free,
    (xdrproc_t)xdr_nlm4_testargs, (xdrproc_t)xdr_nlm4_testres,
    "nlm4_Test", NEEDS_CRED
   },
-  {
+ [NLMPROC4_LOCK] = {
    nlm4_Lock, nlm4_Lock_Free,
    (xdrproc_t)xdr_nlm4_lockargs, (xdrproc_t)xdr_nlm4_res,
    "nlm4_Lock", NEEDS_CRED
   },
-  {
+ [NLMPROC4_CANCEL] = {
    nlm4_Cancel, nlm4_Cancel_Free,
    (xdrproc_t)xdr_nlm4_cancargs, (xdrproc_t)xdr_nlm4_res,
    "nlm4_Cancel", NEEDS_CRED
   },
-  {
+ [NLMPROC4_UNLOCK] = {
    nlm4_Unlock, nlm4_Unlock_Free,
    (xdrproc_t)xdr_nlm4_unlockargs, (xdrproc_t)xdr_nlm4_res,
    "nlm4_Unlock", NEEDS_CRED
   },
+ [NLMPROC4_GRANTED] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Granted", NOTHING_SPECIAL
+  },
+ [NLMPROC4_TEST_MSG] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Test_msg", NOTHING_SPECIAL
+  },
+ [NLMPROC4_LOCK_MSG] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Lock_msg", NOTHING_SPECIAL
+  },
+ [NLMPROC4_CANCEL_MSG] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Cancel_msg", NOTHING_SPECIAL
+  },
+ [NLMPROC4_UNLOCK_MSG] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Unlock_msg", NOTHING_SPECIAL
+  },
+ [NLMPROC4_GRANTED_MSG] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Granted_msg", NOTHING_SPECIAL
+  },
+ [NLMPROC4_TEST_RES] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Test_res", NOTHING_SPECIAL
+  },
+ [NLMPROC4_LOCK_RES] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Lock_res", NOTHING_SPECIAL
+  },
+ [NLMPROC4_CANCEL_RES] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Cancel_res", NOTHING_SPECIAL
+  },
+ [NLMPROC4_UNLOCK_RES] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Unlock_res", NOTHING_SPECIAL
+  },
+ [NLMPROC4_GRANTED_RES] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Granted_res", NOTHING_SPECIAL
+  },
+/* gap fill */
+ [16] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Granted_res", NOTHING_SPECIAL
+  },
+ [17] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Granted_res", NOTHING_SPECIAL
+  },
+ [18] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Granted_res", NOTHING_SPECIAL
+  },
+ [19] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Granted_res", NOTHING_SPECIAL
+  },
+ [NLMPROC4_SHARE] {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Share", NOTHING_SPECIAL
+  },
+ [NLMPROC4_UNSHARE] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Unshare", NOTHING_SPECIAL
+  },
+ [NLMPROC4_NM_LOCK] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Nm_lock", NOTHING_SPECIAL
+  },
+ [NLMPROC4_FREE_ALL] = {
+   nlm4_Unsupported, nlm4_Unsupported_Free,
+   (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
+   "nlm4_Free_all", NOTHING_SPECIAL
+  },
 };
 
 /**
@@ -402,7 +501,7 @@ static void nfs_rpc_execute( nfs_request_data_t * preqnfs,
       switch( ptr_req->rq_vers )
         {
         case NLM4_VERS:
-	  if( ptr_req->rq_proc > NLMPROC4_NULL ) {
+	  if( ptr_req->rq_proc > NLMPROC4_FREE_ALL ) {
 	        DisplayLog( "NFS DISPATCHER: NLM proc number %d unknown", ptr_req->rq_proc) ;
 		printf("Unhandled NLM request: Program %d, Version %d, Function %d\n",
                    ptr_req->rq_prog, ptr_req->rq_vers, ptr_req->rq_proc ) ;
