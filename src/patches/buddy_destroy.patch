diff --git a/src/BuddyMalloc/BuddyMalloc.c b/src/BuddyMalloc/BuddyMalloc.c
index ebe20e3..2f740f0 100644
--- a/src/BuddyMalloc/BuddyMalloc.c
+++ b/src/BuddyMalloc/BuddyMalloc.c
@@ -280,7 +280,7 @@ static BuddyThreadContext_t *GetThreadContext()
           return NULL;
         }
 #ifdef _DEBUG_MEMALLOC
-      fprintf(stderr, "Allocing pthread key %p for thread %p\n",
+      fprintf(stderr, "Allocating pthread key %p for thread %p\n",
               p_current_thread_vars, pthread_self());
 #endif
 
@@ -1075,7 +1075,7 @@ int BuddyInit(buddy_parameter_t * p_buddy_init_info)
 
   if(context->Config.memory_area_size <= (size_header64 + MIN_ALLOC_SIZE))
     {
-      printf("Invalid size %llu (too small).\n",
+      fprintf(stderr, "Invalid size %llu (too small).\n",
              (unsigned long long)context->Config.memory_area_size);
       return BUDDY_ERR_EINVAL;
     }
@@ -1084,7 +1084,7 @@ int BuddyInit(buddy_parameter_t * p_buddy_init_info)
 
   if(!(m = Log2Ceil(context->Config.memory_area_size)))
     {
-      printf("Invalid size %llu (too large).\n",
+      fprintf(stderr, "Invalid size %llu (too large).\n",
              (unsigned long long)context->Config.memory_area_size);
       return BUDDY_ERR_EINVAL;
     }
@@ -1812,8 +1812,84 @@ BUDDY_ADDR_T BuddyCalloc(size_t NumberOfElements, size_t ElementSize)
 
   return ptr;
 
+} /* BuddyCalloc */
+
+/**
+ *  Release all thread resources.
+ */
+int BuddyDestroy()
+{
+        BuddyThreadContext_t *context;
+        BuddyBlock_t *p_block;
+        unsigned int i;
+
+        /* Ensure thread safety. */
+        context = GetThreadContext();
+
+        /* sanity checks */
+        if(!context)
+                return BUDDY_ERR_EINVAL;
+
+        /* Not initialized */
+        if(!context->initialized)
+                return BUDDY_ERR_NOTINIT;
+
+#ifndef _MONOTHREAD_MEMALLOC
+        /* check if there are some blocks to be freed from other threads */
+        CheckBlocksToBeFreed(context);
+#endif
+
+        /* free largest pages */
+        while ( (p_block = context->MemDesc[context->k_size]) != NULL )
+        {
+                /* sanity check on block */
+                if ( (p_block->Header.Base_ptr != (BUDDY_ADDR_T) p_block)
+                   || (p_block->Header.StdInfo.Base_kSize
+                       != p_block->Header.StdInfo.k_size) )
+                {
+                       BuddyPrintLog(context->Config.buddy_error_file,
+                               "ERROR: largest free page is not a root page?!\n" );
+                       BuddyPrintLog(context->Config.buddy_error_file,
+                               "thread page size=2^%u, block size=2^%u, "
+                               "block base area=%p (size=2^%u), block addr=%p\n",
+                               context->k_size, p_block->Header.StdInfo.k_size,
+                               p_block->Header.Base_ptr,
+                               p_block->Header.StdInfo.Base_kSize,
+                               (BUDDY_ADDR_T) p_block);
+                       return BUDDY_ERR_EFAULT;
+                }
+
+                /* We can free this page */
+#ifdef _DEBUG_MEMALLOC
+                printf("Releasing memory page at address %p, size=2^%u\n",
+                       p_block, p_block->Header.StdInfo.k_size );
+#endif
+                Remove_FreeBlock(context, p_block);
+                free(p_block);
+                UpdateStats_RemoveStdPage(context);
+        }
+
+        /* if there are smaller blocks, it means there are still allocated
+         * blocks that cannot be merged with them.
+         * We can't free those pages...
+         */
+        for(i = 0; i < BUDDY_MAX_LOG2_SIZE; i++)
+                if ( context->MemDesc[i] )
+                {
+                       BuddyPrintLog(context->Config.buddy_error_file,
+                                     "ERROR: Can't release thread resources: memory still in use\n");
+                       return BUDDY_ERR_INUSE;
+                }
+
+        /* destroy thread context */
+        free( context );
+        return BUDDY_SUCCESS;
 }
 
+
+
+
+
 /**
  *  For debugging.
  *  Prints the content of the memory area to an opened file.
diff --git a/src/BuddyMalloc/test_buddy.c b/src/BuddyMalloc/test_buddy.c
index f954b47..d1a1346 100644
--- a/src/BuddyMalloc/test_buddy.c
+++ b/src/BuddyMalloc/test_buddy.c
@@ -200,6 +200,12 @@ void *TEST1(void *arg)
   DisplayMemoryMap(stdout);
 #endif
 
+  /* destroy thread resources */
+  if ( rc = BuddyDestroy() )
+  {
+        printf("ERROR in BuddyDestroy: %d\n", rc );
+  }
+
   return NULL;
 
 }
@@ -274,6 +280,12 @@ void *TEST2(void *arg)
   DisplayMemoryMap(stdout);
 #endif
 
+  /* destroy thread resources */
+  if ( rc = BuddyDestroy() )
+  {
+        printf("ERROR in BuddyDestroy: %d\n", rc );
+  }
+
   return NULL;
 
 }
@@ -340,6 +352,12 @@ void *TEST3(void *arg)
   DisplayMemoryMap(stdout);
 #endif
 
+  /* destroy thread resources */
+  if ( rc = BuddyDestroy() )
+  {
+        printf("ERROR in BuddyDestroy: %d\n", rc );
+  }
+
   return NULL;
 
 }
@@ -460,6 +478,12 @@ void *TEST4(void *arg)
   DisplayMemoryMap(stdout);
 #endif
 
+  /* destroy thread resources */
+  if ( rc = BuddyDestroy() )
+  {
+        printf("ERROR in BuddyDestroy: %d\n", rc );
+  }
+
   return NULL;
 
 }
@@ -610,6 +634,12 @@ void *TEST5(void *arg)
   DisplayMemoryMap(stdout);
 #endif
 
+  /* destroy thread resources */
+  if ( rc = BuddyDestroy() )
+  {
+        printf("ERROR in BuddyDestroy: %d\n", rc );
+  }
+
   return NULL;
 
 }                               /* TEST5 */
@@ -681,6 +711,12 @@ void *TEST6(void *arg)
 
     }
 
+  /* destroy thread resources */
+  if ( rc = BuddyDestroy() )
+  {
+        printf("ERROR in BuddyDestroy: %d\n", rc );
+  }
+
   return NULL;
 
 }
@@ -811,6 +847,12 @@ void *TEST7(void *arg)
 
   print_mallinfo();
 
+  /* destroy thread resources */
+  if ( rc = BuddyDestroy() )
+  {
+        printf("ERROR in BuddyDestroy: %d\n", rc );
+  }
+
   return NULL;
 
 }
@@ -937,6 +979,12 @@ void *TEST8(void *arg)
 
     }
 
+  /* destroy thread resources */
+  if ( rc = BuddyDestroy() )
+  {
+        printf("ERROR in BuddyDestroy: %d\n", rc );
+  }
+
   return NULL;
 
 }
@@ -1009,8 +1057,15 @@ void *TEST9(void *arg)
       BuddyFree(strings[i].str);
     }
 
+  /* destroy thread resources */
+  if ( rc = BuddyDestroy() )
+  {
+        printf("ERROR in BuddyDestroy: %d\n", rc );
+  }
 #endif
 
+  return NULL;
+
 }
 
 #define NB_ITEMA  10
@@ -1108,6 +1163,13 @@ void *TESTA(void *arg)
 #ifdef _DEBUG_MEMLEAKS
   DisplayMemoryMap(stdout);
 #endif
+  /* destroy thread resources */
+  if ( rc = BuddyDestroy() )
+  {
+        printf("ERROR in BuddyDestroy: %d\n", rc );
+  }
+
+  return NULL;
 
 }
 
@@ -1181,6 +1243,14 @@ void *TESTB(void *arg)
 
   BuddyFree(pointer);
 
+  /* destroy thread resources */
+  if ( rc = BuddyDestroy() )
+  {
+        printf("ERROR in BuddyDestroy: %d\n", rc );
+  }
+
+  return NULL;
+
 }
 
 static char usage[] =
diff --git a/src/include/BuddyMalloc.h b/src/include/BuddyMalloc.h
index 279e2fc..a289f0a 100644
--- a/src/include/BuddyMalloc.h
+++ b/src/include/BuddyMalloc.h
@@ -63,6 +63,9 @@
 #define BUDDY_ERR_EINVAL      EINVAL
 #define BUDDY_ERR_EFAULT      EFAULT
 
+/* trying to destroy a resource that is still in use */
+#define BUDDY_ERR_INUSE       EBUSY
+
 /* We may want to differenciate the two error codes:
  * BUDDY_ERR_MALLOC is for system malloc errors.
  * BUDDY_ERR_OUTOFMEM is for buddy malloc errors.
@@ -172,6 +175,12 @@ BUDDY_ADDR_T BuddyRealloc(BUDDY_ADDR_T ptr, size_t Size);
 BUDDY_ADDR_T BuddyCalloc(size_t NumberOfElements, size_t ElementSize);
 
 /**
+ *  Release all thread resources.
+ */
+int BuddyDestroy();
+
+
+/**
  * For pool allocation, the user should know how much entries
  * it can place in a pool, for not wasting memory.
  * E.g. If he wants to allocate <n> entries of size <s>,
