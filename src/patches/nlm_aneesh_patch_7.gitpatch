diff --git a/src/FSAL/FSAL_POSIX/fsal_lock.c b/src/FSAL/FSAL_POSIX/fsal_lock.c
index 094f858..887dc4f 100644
--- a/src/FSAL/FSAL_POSIX/fsal_lock.c
+++ b/src/FSAL/FSAL_POSIX/fsal_lock.c
@@ -109,21 +109,22 @@ fsal_status_t  FSAL_changelock(
     
 }
 
-
 /**
  * FSAL_unlock:
- * Not implemented.
+ *
  */
-fsal_status_t  FSAL_unlock(
-    fsal_lockdesc_t * lock_descriptor         /* IN/OUT */
-){
-  
-  /* sanity checks. */
-  if ( !lock_descriptor )
-    Return(ERR_FSAL_FAULT ,0 , INDEX_FSAL_unlock);
-  
-  Return(ERR_FSAL_NOTSUPP ,0 , INDEX_FSAL_unlock);
-    
+fsal_status_t FSAL_unlock(fsal_file_t *obj_handle, fsal_lockdesc_t *ldesc)
+{
+	int retval;
+	int fd =  FSAL_FILENO(obj_handle);
+
+	errno = 0;
+	ldesc->flock.l_type = F_UNLCK;
+	retval = fcntl(fd, F_SETLK, &ldesc->flock);
+	if (retval)
+		Return(posix2fsal_error(errno), errno, INDEX_FSAL_unlock);
+
+	Return(ERR_FSAL_NO_ERROR, 0, INDEX_FSAL_unlock);
 }
 
 fsal_status_t FSAL_getlock(fsal_file_t *obj_handle, fsal_lockdesc_t *ldesc)
diff --git a/src/MainNFSD/nfs_worker_thread.c b/src/MainNFSD/nfs_worker_thread.c
index 2d7e9e3..15ad3a6 100644
--- a/src/MainNFSD/nfs_worker_thread.c
+++ b/src/MainNFSD/nfs_worker_thread.c
@@ -264,6 +264,11 @@ const nfs_function_desc_t nlm4_func_desc[] =
    (xdrproc_t)xdr_nlm4_cancargs, (xdrproc_t)xdr_nlm4_res,
    "nlm4_Cancel", NEEDS_CRED
   },
+  {
+   nlm4_Unlock, nlm4_Unlock_Free,
+   (xdrproc_t)xdr_nlm4_unlockargs, (xdrproc_t)xdr_nlm4_res,
+   "nlm4_Unlock", NEEDS_CRED
+  },
 };
 
 /**
diff --git a/src/NFS_Protocols/Makefile.am b/src/NFS_Protocols/Makefile.am
index e998f9c..74e4263 100644
--- a/src/NFS_Protocols/Makefile.am
+++ b/src/NFS_Protocols/Makefile.am
@@ -6,7 +6,8 @@ noinst_LTLIBRARIES            = libnfsproto.la
 
 check_PROGRAMS                = test_mnt_proto
 
-libnfsproto_la_SOURCES = nlm_Cancel.c			  \
+libnfsproto_la_SOURCES = nlm_Unlock.c			  \
+			 nlm_Cancel.c			  \
 			 nlm_Lock.c			  \
 			 nlm_Test.c			  \
 			 nlm_util.c			  \
diff --git a/src/NFS_Protocols/nlm_Unlock.c b/src/NFS_Protocols/nlm_Unlock.c
new file mode 100644
index 0000000..ddb69e7
--- /dev/null
+++ b/src/NFS_Protocols/nlm_Unlock.c
@@ -0,0 +1,174 @@
+/*
+ * Copyright IBM Corporation, 2010
+ *  Contributor: Aneesh Kumar K.v  <aneesh.kumar@linux.vnet.ibm.com>
+ *
+ *
+ * This software is a server that implements the NFS protocol.
+ *
+ *
+ * This software is governed by the CeCILL  license under French law and
+ * abiding by the rules of distribution of free software.  You can  use,
+ * modify and/ or redistribute the software under the terms of the CeCILL
+ * license as circulated by CEA, CNRS and INRIA at the following URL
+ * "http://www.cecill.info".
+ *
+ * As a counterpart to the access to the source code and  rights to copy,
+ * modify and redistribute granted by the license, users are provided only
+ * with a limited warranty  and the software's author,  the holder of the
+ * economic rights,  and the successive licensors  have only  limited
+ * liability.
+ *
+ * In this respect, the user's attention is drawn to the risks associated
+ * with loading,  using,  modifying and/or developing or reproducing the
+ * software by the user in light of its specific status of free software,
+ * that may mean  that it is complicated to manipulate,  and  that  also
+ * therefore means  that it is reserved for developers  and  experienced
+ * professionals having in-depth computer knowledge. Users are therefore
+ * encouraged to load and test the software's suitability as regards their
+ * requirements in conditions enabling the security of their systems and/or
+ * data to be ensured and,  more generally, to use and operate it in the
+ * same conditions as regards security.
+ *
+ * The fact that you are presently reading this means that you have had
+ * knowledge of the CeCILL license and that you accept its terms.
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#ifdef _SOLARIS
+#include "solaris_port.h"
+#endif
+
+#include <stdio.h>
+#include <string.h>
+#include <pthread.h>
+#include <fcntl.h>
+#include <sys/file.h>  /* for having FNDELAY */
+#include "HashData.h"
+#include "HashTable.h"
+#ifdef _USE_GSSRPC
+#include <gssrpc/types.h>
+#include <gssrpc/rpc.h>
+#include <gssrpc/auth.h>
+#include <gssrpc/pmap_clnt.h>
+#else
+#include <rpc/types.h>
+#include <rpc/rpc.h>
+#include <rpc/auth.h>
+#include <rpc/pmap_clnt.h>
+#endif
+#include "log_functions.h"
+#include "stuff_alloc.h"
+#include "nfs23.h"
+#include "nfs4.h"
+#include "nfs_core.h"
+#include "cache_inode.h"
+#include "cache_content.h"
+#include "nfs_exports.h"
+#include "nfs_creds.h"
+#include "nfs_tools.h"
+#include "mount.h"
+#include "nfs_proto_functions.h"
+#include "nlm_util.h"
+
+/**
+ * nlm4_Unlock: Set a range lock
+ *
+ *  @param parg        [IN]
+ *  @param pexportlist [IN]
+ *  @param pcontextp   [IN]
+ *  @param pclient     [INOUT]
+ *  @param ht          [INOUT]
+ *  @param preq        [IN]
+ *  @param pres        [OUT]
+ *
+ */
+
+int nlm4_Unlock( nfs_arg_t            * parg    /* IN     */,
+              exportlist_t         * pexport /* IN     */,
+              fsal_op_context_t    * pcontext   /* IN     */,
+              cache_inode_client_t * pclient /* INOUT  */,
+              hash_table_t         * ht      /* INOUT  */,
+              struct svc_req       * preq    /* IN     */,
+              nfs_res_t            * pres    /* OUT    */ )
+{
+	nlm_lock_t *nlmb;
+	fsal_file_t *fd;
+	fsal_status_t retval;
+	nlm4_unlockargs *arg;
+	cache_entry_t *pentry;
+	fsal_attrib_list_t attr;
+	fsal_lockdesc_t *lock_desc;
+	cache_inode_status_t cache_status;
+	cache_inode_fsal_data_t fsal_data;
+
+	DisplayLogJdLevel( pclient->log_outputs, NIV_FULL_DEBUG,
+			"REQUEST PROCESSING: Calling nlm4_Lock" ) ;
+
+	/* Convert file handle into a cache entry */
+	arg = &parg->arg_nlm4_unlock;
+	if (!nfs3_FhandleToFSAL((nfs_fh3 *)&(arg->alock.fh),
+				&fsal_data.handle,
+				pcontext)) {
+		/* handle is not valid */
+		pres->res_nlm4.stat.stat = NLM4_STALE_FH;
+		/*
+		 * Should we do a REQ_OK so that the client get
+		 * a response ? FIXME!!
+		 */
+		return NFS_REQ_DROP;
+	}
+	/* Now get the cached inode attributes */
+	fsal_data.cookie = DIR_START;
+	if ((pentry = cache_inode_get(&fsal_data, &attr, ht,
+					pclient,
+					pcontext,
+					&cache_status)) == NULL) {
+		/* handle is not valid */
+		pres->res_nlm4.stat.stat = NLM4_STALE_FH;
+		return NFS_REQ_OK;
+	}
+	fd = &pentry->object.file.open_fd.fd;
+	lock_desc = nlm_lock_to_fsal_lockdesc(&(arg->alock), 0);
+	if (!lock_desc) {
+		pres->res_nlm4.stat.stat = NLM4_DENIED_NOLOCKS;
+		return NFS_REQ_OK;
+	}
+	nlmb = nlm_find_lock_entry(&(arg->alock), 0, NLM4_GRANTED);
+	if (!nlmb) {
+		/*FIXME!! XNFS doesn't say what should be the return */
+		pres->res_nlm4.stat.stat = NLM4_DENIED_NOLOCKS;
+		goto complete;
+	}
+	retval = FSAL_unlock(fd, lock_desc);
+	if (!FSAL_IS_ERROR(retval)) {
+		pres->res_nlm4.stat.stat = NLM4_GRANTED;
+		nlm_delete_lock_entry(nlmb, &(arg->alock));
+		goto complete;
+	} else {
+		/*FIXME check with RFC Whether we can return nlm4_denied */
+		pres->res_nlm4.stat.stat = NLM4_DENIED;
+		goto complete;
+	}
+	/*FIXME check with RFC Whether we can return nlm4_denied */
+	pres->res_nlm4.stat.stat = NLM4_DENIED_NOLOCKS;
+complete:
+	Mem_Free(lock_desc);
+	return NFS_REQ_OK;
+}
+
+/**
+ * nlm4_Unlock_Free: Frees the result structure allocated for nlm4_Unlock
+ *
+ * Frees the result structure allocated for nlm4_Lock. Does Nothing in fact.
+ *
+ * @param pres        [INOUT]   Pointer to the result structure.
+ *
+ */
+void nlm4_Unlock_Free(nfs_res_t *pres)
+{
+  return ;
+}
diff --git a/src/NFS_Protocols/nlm_util.c b/src/NFS_Protocols/nlm_util.c
index 54c0fcf..d7abfab 100644
--- a/src/NFS_Protocols/nlm_util.c
+++ b/src/NFS_Protocols/nlm_util.c
@@ -190,6 +190,16 @@ nlm_lock_t *nlm_find_lock_entry(struct nlm4_lock *nlm_lock,
 			continue;
 		if (nlmb->svid != nlm_lock->svid)
 			continue;
+		if (state == NLM4_GRANTED) {
+			/*
+			 * We don't check the below flag when looking for
+			 * lock in the lock list with state granted. Lookup
+			 * with state granted happens for unlock operation
+			 * and RFC says it should only match caller_name, fh,oh
+			 * and svid
+			 */
+			break;
+		}
 		if (nlmb->offset != nlm_lock->l_offset)
 			continue;
 		if (nlmb->len != nlm_lock->l_len)
@@ -206,3 +216,54 @@ nlm_lock_t *nlm_find_lock_entry(struct nlm4_lock *nlm_lock,
 		return NULL;
 	return nlmb;
 }
+
+static nlm_lock_t *nlm_lock_t_dup(nlm_lock_t *orig_nlmb)
+{
+	nlm_lock_t *nlmb;
+	nlmb = (nlm_lock_t *)Mem_Calloc(1, sizeof(nlm_lock_t));
+	if (!nlmb)
+		return NULL;
+	nlmb->caller_name  = strdup(orig_nlmb->caller_name);
+	if (!copy_netobj(&nlmb->fh, &orig_nlmb->fh))
+		goto err_out;
+	if (!copy_netobj(&nlmb->oh, &orig_nlmb->oh))
+		goto err_out;
+	nlmb->svid	= orig_nlmb->svid;
+	nlmb->offset	= orig_nlmb->offset;
+	nlmb->len	= orig_nlmb->len;
+	nlmb->state	= orig_nlmb->state;
+	nlmb->exclusive = orig_nlmb->exclusive;
+	return nlmb;
+err_out:
+	free(nlmb->caller_name);
+	net_obj_free(&nlmb->fh);
+	net_obj_free(&nlmb->oh);
+	Mem_Free(nlmb);
+	return NULL;
+
+}
+void nlm_delete_lock_entry(nlm_lock_t *nlmb, struct nlm4_lock *nlm_lock)
+{
+	nlm_lock_t *nlmb_left  = NULL;
+	nlm_lock_t *nlmb_right = NULL;
+	if (nlm_lock->l_offset > nlmb->offset) {
+		nlmb_left = nlm_lock_t_dup(nlmb);
+		/* FIXME handle error */
+		nlmb_left->len    = nlmb->offset - nlm_lock->l_offset;
+	}
+	if ((nlm_lock->l_offset + nlm_lock->l_len) < (nlmb->offset + nlmb->len)) {
+		nlmb_right = nlm_lock_t_dup(nlmb);
+		/* FIXME handle error */
+		nlmb_right->offset = nlm_lock->l_offset + nlm_lock->l_len;
+		nlmb_right->len = (nlmb->offset + nlmb->len) -
+				  (nlm_lock->l_offset + nlm_lock->l_len);
+	}
+	/* Delete the old entry and add the two new entries */
+	nlm_remove_from_locklist(nlmb);
+	pthread_mutex_lock(&nlm_lock_list_mutex);
+	if (nlmb_left)
+		glist_add_tail(&nlm_lock_list, &(nlmb_left->lock_list));
+	if (nlmb_right)
+		glist_add_tail(&nlm_lock_list, &(nlmb_right->lock_list));
+	pthread_mutex_unlock(&nlm_lock_list_mutex);
+}
diff --git a/src/include/fsal.h b/src/include/fsal.h
index 34ddb18..8f09ad7 100644
--- a/src/include/fsal.h
+++ b/src/include/fsal.h
@@ -723,9 +723,10 @@ fsal_status_t  FSAL_changelock(
     fsal_lockparam_t        * lock_info             /* IN */
 );
 
-fsal_status_t  FSAL_unlock(
-    fsal_lockdesc_t * lock_descriptor         /* IN/OUT */
-);
+fsal_status_t FSAL_unlock(
+	fsal_file_t *obj_handle,	/* IN */
+	fsal_lockdesc_t *ldesc		/*IN/OUT */
+) ;
 
 
 fsal_status_t FSAL_getlock(
diff --git a/src/include/nfs_proto_functions.h b/src/include/nfs_proto_functions.h
index 2660f09..70b7542 100644
--- a/src/include/nfs_proto_functions.h
+++ b/src/include/nfs_proto_functions.h
@@ -168,6 +168,7 @@ typedef union nfs_arg__
   nlm4_testargs	  arg_nlm4_test;
   nlm4_lockargs	  arg_nlm4_lock;
   nlm4_cancargs	  arg_nlm4_cancel;
+  nlm4_unlockargs arg_nlm4_unlock;
 } nfs_arg_t;
 
 
@@ -343,6 +344,13 @@ int nlm4_Cancel( nfs_arg_t            * parg    /* IN     */,
               struct svc_req       * preq    /* IN     */,
 	      nfs_res_t            * pres    /* OUT    */ );
 
+int nlm4_Unlock( nfs_arg_t            * parg    /* IN     */,
+              exportlist_t         * pexport /* IN     */,
+              fsal_op_context_t    * pcontext   /* IN     */,
+              cache_inode_client_t * pclient /* INOUT  */,
+              hash_table_t         * ht      /* INOUT  */,
+              struct svc_req       * preq    /* IN     */,
+	      nfs_res_t            * pres    /* OUT    */ );
 
 /* @}
  * -- End of NLM protocol functions. --
@@ -972,6 +980,7 @@ void nlm_Null_Free( nfs_res_t * pres ) ;
 void nlm4_Test_Free( nfs_res_t * pres );
 void nlm4_Lock_Free( nfs_res_t * pres );
 void nlm4_Cancel_Free( nfs_res_t * pres );
+void nlm4_Unlock_Free( nfs_res_t * pres );
 
 void nfs_Null_Free( nfs_res_t * resp ) ;
 void nfs_Getattr_Free( nfs_res_t * resp ) ;

