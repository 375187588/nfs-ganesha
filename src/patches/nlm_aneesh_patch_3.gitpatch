diff --git a/src/FSAL/FSAL_POSIX/fsal_lock.c b/src/FSAL/FSAL_POSIX/fsal_lock.c
index 6c71e16..0946282 100644
--- a/src/FSAL/FSAL_POSIX/fsal_lock.c
+++ b/src/FSAL/FSAL_POSIX/fsal_lock.c
@@ -1,15 +1,36 @@
 /*
- * vim:expandtab:shiftwidth=8:tabstop=8:
- */
-
-/**
+ * Copyright IBM Corporation, 2010
+ *  Contributor: Aneesh Kumar K.v  <aneesh.kumar@linux.vnet.ibm.com>
+ *
+ *
+ * This software is a server that implements the NFS protocol.
+ *
  *
- * \file    fsal_lock.c
- * \author  $Author: leibovic $
- * \date    $Date: 2005/07/27 13:30:26 $
- * \version $Revision: 1.2 $
- * \brief   Locking operations.
+ * This software is governed by the CeCILL  license under French law and
+ * abiding by the rules of distribution of free software.  You can  use,
+ * modify and/ or redistribute the software under the terms of the CeCILL
+ * license as circulated by CEA, CNRS and INRIA at the following URL
+ * "http://www.cecill.info".
  *
+ * As a counterpart to the access to the source code and  rights to copy,
+ * modify and redistribute granted by the license, users are provided only
+ * with a limited warranty  and the software's author,  the holder of the
+ * economic rights,  and the successive licensors  have only  limited
+ * liability.
+ *
+ * In this respect, the user's attention is drawn to the risks associated
+ * with loading,  using,  modifying and/or developing or reproducing the
+ * software by the user in light of its specific status of free software,
+ * that may mean  that it is complicated to manipulate,  and  that  also
+ * therefore means  that it is reserved for developers  and  experienced
+ * professionals having in-depth computer knowledge. Users are therefore
+ * encouraged to load and test the software's suitability as regards their
+ * requirements in conditions enabling the security of their systems and/or
+ * data to be ensured and,  more generally, to use and operate it in the
+ * same conditions as regards security.
+ *
+ * The fact that you are presently reading this means that you have had
+ * knowledge of the CeCILL license and that you accept its terms.
  *
  */
 #ifdef HAVE_CONFIG_H
@@ -73,3 +94,16 @@ fsal_status_t  FSAL_unlock(
   Return(ERR_FSAL_NOTSUPP ,0 , INDEX_FSAL_unlock);
     
 }
+
+fsal_status_t FSAL_getlock(fsal_file_t *obj_handle, fsal_lockdesc_t *ldesc)
+{
+	int retval;
+	int fd =  FSAL_FILENO(obj_handle);
+
+	errno = 0;
+	retval = fcntl(fd, F_GETLK, &ldesc->flock);
+	if (retval)
+		Return(posix2fsal_error(errno), errno, INDEX_FSAL_getlock);
+
+	Return(ERR_FSAL_NO_ERROR ,0 , INDEX_FSAL_getlock);
+}
diff --git a/src/MainNFSD/nfs_worker_thread.c b/src/MainNFSD/nfs_worker_thread.c
index b33a03b..780175f 100644
--- a/src/MainNFSD/nfs_worker_thread.c
+++ b/src/MainNFSD/nfs_worker_thread.c
@@ -249,9 +249,13 @@ const nfs_function_desc_t nlm4_func_desc[] =
    (xdrproc_t)xdr_void, (xdrproc_t)xdr_void,
    "nlm_Null",  NOTHING_SPECIAL
   },
+  {
+   nlm4_Test, nlm4_Test_Free,
+   (xdrproc_t)xdr_nlm4_testargs, (xdrproc_t)xdr_nlm4_testres,
+   "nlm4_Test", NEEDS_CRED
+  },
 };
 
-
 /**
  * nfs_rpc_execute: main rpc dispatcher routine
  *
diff --git a/src/NFS_Protocols/Makefile.am b/src/NFS_Protocols/Makefile.am
index f3c8bcd..72c7239 100644
--- a/src/NFS_Protocols/Makefile.am
+++ b/src/NFS_Protocols/Makefile.am
@@ -6,7 +6,9 @@ noinst_LTLIBRARIES            = libnfsproto.la
 
 check_PROGRAMS                = test_mnt_proto
 
-libnfsproto_la_SOURCES = nlm_Null.c			 \
+libnfsproto_la_SOURCES = nlm_Test.c			  \
+			 nlm_util.c			  \
+			 nlm_Null.c			  \
 			 mnt_Null.c                       \
                          mnt_Export.c                     \
                          mnt_Mnt.c                        \
diff --git a/src/NFS_Protocols/nlm_Test.c b/src/NFS_Protocols/nlm_Test.c
new file mode 100644
index 0000000..6230bfe
--- /dev/null
+++ b/src/NFS_Protocols/nlm_Test.c
@@ -0,0 +1,180 @@
+/*
+ * Copyright IBM Corporation, 2010
+ *  Contributor: Aneesh Kumar K.v  <aneesh.kumar@linux.vnet.ibm.com>
+ *
+ *
+ * This software is a server that implements the NFS protocol.
+ *
+ *
+ * This software is governed by the CeCILL  license under French law and
+ * abiding by the rules of distribution of free software.  You can  use,
+ * modify and/ or redistribute the software under the terms of the CeCILL
+ * license as circulated by CEA, CNRS and INRIA at the following URL
+ * "http://www.cecill.info".
+ *
+ * As a counterpart to the access to the source code and  rights to copy,
+ * modify and redistribute granted by the license, users are provided only
+ * with a limited warranty  and the software's author,  the holder of the
+ * economic rights,  and the successive licensors  have only  limited
+ * liability.
+ *
+ * In this respect, the user's attention is drawn to the risks associated
+ * with loading,  using,  modifying and/or developing or reproducing the
+ * software by the user in light of its specific status of free software,
+ * that may mean  that it is complicated to manipulate,  and  that  also
+ * therefore means  that it is reserved for developers  and  experienced
+ * professionals having in-depth computer knowledge. Users are therefore
+ * encouraged to load and test the software's suitability as regards their
+ * requirements in conditions enabling the security of their systems and/or
+ * data to be ensured and,  more generally, to use and operate it in the
+ * same conditions as regards security.
+ *
+ * The fact that you are presently reading this means that you have had
+ * knowledge of the CeCILL license and that you accept its terms.
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#ifdef _SOLARIS
+#include "solaris_port.h"
+#endif
+
+#include <stdio.h>
+#include <string.h>
+#include <pthread.h>
+#include <fcntl.h>
+#include <sys/file.h>  /* for having FNDELAY */
+#include "HashData.h"
+#include "HashTable.h"
+#ifdef _USE_GSSRPC
+#include <gssrpc/types.h>
+#include <gssrpc/rpc.h>
+#include <gssrpc/auth.h>
+#include <gssrpc/pmap_clnt.h>
+#else
+#include <rpc/types.h>
+#include <rpc/rpc.h>
+#include <rpc/auth.h>
+#include <rpc/pmap_clnt.h>
+#endif
+#include "log_functions.h"
+#include "stuff_alloc.h"
+#include "nfs23.h"
+#include "nfs4.h"
+#include "nfs_core.h"
+#include "cache_inode.h"
+#include "cache_content.h"
+#include "nfs_exports.h"
+#include "nfs_creds.h"
+#include "nfs_tools.h"
+#include "mount.h"
+#include "nfs_proto_functions.h"
+#include "nlm_util.h"
+
+/**
+ * nlm4_Test: Test lock
+ *
+ *  @param parg        [IN]
+ *  @param pexportlist [IN]
+ *  @param pcontextp   [IN]
+ *  @param pclient     [INOUT]
+ *  @param ht          [INOUT]
+ *  @param preq        [IN]
+ *  @param pres        [OUT]
+ *
+ */
+
+int nlm4_Test( nfs_arg_t            * parg    /* IN     */,
+              exportlist_t         * pexport /* IN     */,
+              fsal_op_context_t    * pcontext   /* IN     */,
+              cache_inode_client_t * pclient /* INOUT  */,
+              hash_table_t         * ht      /* INOUT  */,
+              struct svc_req       * preq    /* IN     */,
+              nfs_res_t            * pres    /* OUT    */ )
+{
+	fsal_file_t *fd;
+	fsal_status_t retval;
+	nlm4_testargs *arg;
+	cache_entry_t *pentry;
+	fsal_attrib_list_t attr;
+	fsal_lockdesc_t *lock_desc;
+	cache_inode_status_t cache_status;
+	cache_inode_fsal_data_t fsal_data;
+
+	DisplayLogJdLevel( pclient->log_outputs, NIV_FULL_DEBUG,
+			"REQUEST PROCESSING: Calling nlm_Test" ) ;
+
+	/* Convert file handle into a cache entry */
+
+	/* FIXME!!
+	 * NFS helper functions are really confusing. So code
+	 * it here.
+	 */
+	/* FIXME!! right now we look at only nfs3 handles */
+	arg = &parg->arg_nlm4_test;
+	if (!nfs3_FhandleToFSAL((nfs_fh3 *)&(arg->alock.fh),
+				&fsal_data.handle,
+				pcontext)) {
+		/* handle is not valid */
+		pres->res_nlm4test.test_stat.stat = NLM4_STALE_FH;
+		/*
+		 * Should we do a REQ_OK so that the client get
+		 * a response ? FIXME!!
+		 */
+		return NFS_REQ_DROP;
+	}
+	/* Now get the cached inode attributes */
+	fsal_data.cookie = DIR_START;
+	if ((pentry = cache_inode_get(&fsal_data, &attr, ht,
+					pclient,
+					pcontext,
+					&cache_status)) == NULL) {
+		/* handle is not valid */
+		pres->res_nlm4test.test_stat.stat = NLM4_STALE_FH;
+		return NFS_REQ_OK;
+	}
+	fd = &pentry->object.file.open_fd.fd;
+	lock_desc = nlm_lock_to_fsal_lockdesc(&(arg->alock), arg->exclusive);
+	if (!lock_desc) {
+		pres->res_nlm4test.test_stat.stat = NLM4_DENIED_NOLOCKS;
+		/* FIXME!!
+		 * should we update the attribute values here now that
+		 * now that we are able to find the inode
+		 */
+		return NFS_REQ_OK;
+	}
+
+	retval = FSAL_getlock(fd, lock_desc);
+	if (!FSAL_IS_ERROR(retval)) {
+		if (lock_desc->flock.l_type = F_UNLCK) {
+			/* we can place the lock */
+			pres->res_nlm4test.test_stat.stat = NLM4_GRANTED;
+			goto complete;
+		} else {
+			pres->res_nlm4test.test_stat.stat = NLM4_DENIED;
+			fsal_lockdesc_to_nlm_holder(lock_desc,
+						&pres->res_nlm4test.test_stat.nlm4_testrply_u.holder);
+			goto complete;
+		}
+	}
+	pres->res_nlm4test.test_stat.stat = NLM4_DENIED_NOLOCKS;
+complete:
+	Mem_Free(lock_desc);
+	return NFS_REQ_OK;
+}
+
+/**
+ * nlm_Test_Free: Frees the result structure allocated for nlm_Null
+ *
+ * Frees the result structure allocated for nlm_Null. Does Nothing in fact.
+ *
+ * @param pres        [INOUT]   Pointer to the result structure.
+ *
+ */
+void nlm4_Test_Free( nfs_res_t * pres )
+{
+  return ;
+}
diff --git a/src/NFS_Protocols/nlm_util.c b/src/NFS_Protocols/nlm_util.c
new file mode 100644
index 0000000..8a13d55
--- /dev/null
+++ b/src/NFS_Protocols/nlm_util.c
@@ -0,0 +1,108 @@
+/*
+ * Copyright IBM Corporation, 2010
+ *  Contributor: Aneesh Kumar K.v  <aneesh.kumar@linux.vnet.ibm.com>
+ *
+ *
+ * This software is a server that implements the NFS protocol.
+ *
+ *
+ * This software is governed by the CeCILL  license under French law and
+ * abiding by the rules of distribution of free software.  You can  use,
+ * modify and/ or redistribute the software under the terms of the CeCILL
+ * license as circulated by CEA, CNRS and INRIA at the following URL
+ * "http://www.cecill.info".
+ *
+ * As a counterpart to the access to the source code and  rights to copy,
+ * modify and redistribute granted by the license, users are provided only
+ * with a limited warranty  and the software's author,  the holder of the
+ * economic rights,  and the successive licensors  have only  limited
+ * liability.
+ *
+ * In this respect, the user's attention is drawn to the risks associated
+ * with loading,  using,  modifying and/or developing or reproducing the
+ * software by the user in light of its specific status of free software,
+ * that may mean  that it is complicated to manipulate,  and  that  also
+ * therefore means  that it is reserved for developers  and  experienced
+ * professionals having in-depth computer knowledge. Users are therefore
+ * encouraged to load and test the software's suitability as regards their
+ * requirements in conditions enabling the security of their systems and/or
+ * data to be ensured and,  more generally, to use and operate it in the
+ * same conditions as regards security.
+ *
+ * The fact that you are presently reading this means that you have had
+ * knowledge of the CeCILL license and that you accept its terms.
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#ifdef _SOLARIS
+#include "solaris_port.h"
+#endif
+
+#include <stdio.h>
+#include <string.h>
+#include <pthread.h>
+#include <fcntl.h>
+#include <sys/file.h>  /* for having FNDELAY */
+#include "HashData.h"
+#include "HashTable.h"
+#ifdef _USE_GSSRPC
+#include <gssrpc/types.h>
+#include <gssrpc/rpc.h>
+#include <gssrpc/auth.h>
+#include <gssrpc/pmap_clnt.h>
+#else
+#include <rpc/types.h>
+#include <rpc/rpc.h>
+#include <rpc/auth.h>
+#include <rpc/pmap_clnt.h>
+#endif
+#include "log_functions.h"
+#include "stuff_alloc.h"
+#include "nfs23.h"
+#include "nfs4.h"
+#include "nfs_core.h"
+#include "cache_inode.h"
+#include "cache_content.h"
+#include "nfs_exports.h"
+#include "nfs_creds.h"
+#include "nfs_tools.h"
+#include "mount.h"
+#include "nfs_proto_functions.h"
+#include "nlm_util.h"
+
+fsal_lockdesc_t *nlm_lock_to_fsal_lockdesc(struct nlm4_lock *nlm_lock,
+				bool_t exclusive)
+{
+	fsal_lockdesc_t *fldesc;
+
+	fldesc = (fsal_lockdesc_t *)Mem_Alloc(sizeof(fsal_lockdesc_t));
+	if (!fldesc)
+		return NULL;
+
+	if (exclusive)
+		fldesc->flock.l_type = F_WRLCK;
+	else
+		fldesc->flock.l_type = F_RDLCK;
+	fldesc->flock.l_whence = SEEK_SET;
+	fldesc->flock.l_start   = nlm_lock->l_offset;
+	fldesc->flock.l_len    = nlm_lock->l_len;
+	return fldesc;
+}
+
+void fsal_lockdesc_to_nlm_holder(fsal_lockdesc_t *desc,
+				struct nlm4_holder *holder)
+{
+	struct flock *fl = &desc->flock;
+	if (fl->l_type ==  F_RDLCK)
+		holder->exclusive =  1;
+	else
+		holder->exclusive =  0;
+	/* FIXME!! oh value not set */
+	holder->svid	 = fl->l_pid;
+	holder->l_offset = fl->l_start ;
+	holder->l_len	 = fl->l_len;
+}
diff --git a/src/include/FSAL/FSAL_POSIX/fsal_types.h b/src/include/FSAL/FSAL_POSIX/fsal_types.h
index 96d4cf5..71f1246 100644
--- a/src/include/FSAL/FSAL_POSIX/fsal_types.h
+++ b/src/include/FSAL/FSAL_POSIX/fsal_types.h
@@ -222,8 +222,10 @@ typedef struct fsal_cookie__ {
 
 static fsal_cookie_t __attribute__(( __unused__ ))  FSAL_READDIR_FROM_BEGINNING = { 0 };
 
-typedef void * fsal_lockdesc_t;  /**< not implemented in ghostfs */
-
+typedef struct fsal_lockdesc__
+{
+	struct flock flock;
+} fsal_lockdesc_t;
 
 /* Directory stream descriptor. */
 
@@ -253,7 +255,7 @@ typedef struct fsal_file__{
   int              ro; /* read only file ? */
 } fsal_file_t;
 
-#define FSAL_FILENO( filefd )  ( (int)filefd )
+#define FSAL_FILENO(p_fsal_file)  ((p_fsal_file)->filefd )
 
 #endif /* _FSAL_POSIX_USE_STREAM */
 
diff --git a/src/include/fsal.h b/src/include/fsal.h
index 5cbb4fa..71d3939 100644
--- a/src/include/fsal.h
+++ b/src/include/fsal.h
@@ -729,6 +729,12 @@ fsal_status_t  FSAL_unlock(
 );
 
 
+fsal_status_t FSAL_getlock(
+	fsal_file_t *obj_handle,	/* IN */
+	fsal_lockdesc_t *ldesc		/*IN/OUT */
+) ;
+
+
 /******************************************************
  *          FSAL extended attributes management.
  ******************************************************/
diff --git a/src/include/fsal_types.h b/src/include/fsal_types.h
index e30702b..f631dec 100644
--- a/src/include/fsal_types.h
+++ b/src/include/fsal_types.h
@@ -170,9 +170,10 @@ typedef unsigned long long int u_int64_t;
 #define INDEX_FSAL_unlink_access        46
 #define INDEX_FSAL_link_access          47
 #define INDEX_FSAL_create_access        48
+#define INDEX_FSAL_getlock	        49
 
 /* number of FSAL functions */
-#define FSAL_NB_FUNC  49
+#define FSAL_NB_FUNC  50
 
 static const char * fsal_function_names[] = {
   "FSAL_lookup", "FSAL_access", "FSAL_create", "FSAL_mkdir", "FSAL_truncate",
@@ -186,7 +187,7 @@ static const char * fsal_function_names[] = {
   "FSAL_rmdir", "FSAL_CleanObjectResources", "FSAL_open_by_name", "FSAL_open_by_fileid",
   "FSAL_ListXAttrs", "FSAL_GetXAttrValue", "FSAL_SetXAttrValue", "FSAL_GetXAttrAttrs",
   "FSAL_close_by_fileid", "FSAL_setattr_access", "FSAL_merge_attrs", "FSAL_rename_access",
-  "FSAL_unlink_access", "FSAL_link_access", "FSAL_create_access"
+  "FSAL_unlink_access", "FSAL_link_access", "FSAL_create_access" , "FSAL_getlock"
 };
 
 
diff --git a/src/include/nfs_proto_functions.h b/src/include/nfs_proto_functions.h
index 4f68b3c..1dd5f91 100644
--- a/src/include/nfs_proto_functions.h
+++ b/src/include/nfs_proto_functions.h
@@ -91,6 +91,7 @@
 #include "nfs23.h"
 #include "mount.h"
 #include "nfs4.h"
+#include "nlm4.h"
 
 #include <pthread.h>
 #include <sys/types.h>
@@ -162,7 +163,9 @@ typedef union nfs_arg__
   
   /* mnt protocol arguments */
   dirpath         arg_mnt;
-  
+
+  /* nlm protocl arguments */
+  nlm4_testargs	  arg_nlm4_test;
 } nfs_arg_t;
 
 
@@ -203,7 +206,10 @@ typedef union nfs_res__
   exports         res_mntexport ;
   mountres3       res_mnt3 ;
   mountlist       res_dump ;
-  
+
+  /* nlm4 returned values */
+  nlm4_testres	 res_nlm4test;
+
   char padding[1024] ;
 } nfs_res_t;
 
@@ -310,6 +316,14 @@ int nlm_Null(  nfs_arg_t            * parg    /* IN  */,
                struct svc_req       * preq    /* IN  */,
                nfs_res_t            * pres    /* OUT */ ) ;
 
+int nlm4_Test( nfs_arg_t            * parg    /* IN     */,
+              exportlist_t         * pexport /* IN     */,
+              fsal_op_context_t    * pcontext   /* IN     */,
+              cache_inode_client_t * pclient /* INOUT  */,
+              hash_table_t         * ht      /* INOUT  */,
+              struct svc_req       * preq    /* IN     */,
+	      nfs_res_t            * pres    /* OUT    */ );
+
 /* @}
  * -- End of NLM protocol functions. --
  */
@@ -935,6 +949,7 @@ void mnt_Umnt_Free( nfs_res_t * pres ) ;
 void mnt_UmntAll_Free( nfs_res_t * pres ) ;
 
 void nlm_Null_Free( nfs_res_t * pres ) ;
+void nlm4_Test_Free( nfs_res_t * pres );
 
 void nfs_Null_Free( nfs_res_t * resp ) ;
 void nfs_Getattr_Free( nfs_res_t * resp ) ;
diff --git a/src/include/nlm_util.h b/src/include/nlm_util.h
new file mode 100644
index 0000000..839fc0d
--- /dev/null
+++ b/src/include/nlm_util.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright IBM Corporation, 2010
+ *  Contributor: Aneesh Kumar K.v  <aneesh.kumar@linux.vnet.ibm.com>
+ *
+ *
+ * This software is a server that implements the NFS protocol.
+ *
+ *
+ * This software is governed by the CeCILL  license under French law and
+ * abiding by the rules of distribution of free software.  You can  use,
+ * modify and/ or redistribute the software under the terms of the CeCILL
+ * license as circulated by CEA, CNRS and INRIA at the following URL
+ * "http://www.cecill.info".
+ *
+ * As a counterpart to the access to the source code and  rights to copy,
+ * modify and redistribute granted by the license, users are provided only
+ * with a limited warranty  and the software's author,  the holder of the
+ * economic rights,  and the successive licensors  have only  limited
+ * liability.
+ *
+ * In this respect, the user's attention is drawn to the risks associated
+ * with loading,  using,  modifying and/or developing or reproducing the
+ * software by the user in light of its specific status of free software,
+ * that may mean  that it is complicated to manipulate,  and  that  also
+ * therefore means  that it is reserved for developers  and  experienced
+ * professionals having in-depth computer knowledge. Users are therefore
+ * encouraged to load and test the software's suitability as regards their
+ * requirements in conditions enabling the security of their systems and/or
+ * data to be ensured and,  more generally, to use and operate it in the
+ * same conditions as regards security.
+ *
+ * The fact that you are presently reading this means that you have had
+ * knowledge of the CeCILL license and that you accept its terms.
+ *
+ */
+
+extern fsal_lockdesc_t *nlm_lock_to_fsal_lockdesc(struct nlm4_lock *nlm_lock,
+						bool_t exclusive);
+extern void fsal_lockdesc_to_nlm_holder(fsal_lockdesc_t *desc,
+					struct nlm4_holder *holder);

