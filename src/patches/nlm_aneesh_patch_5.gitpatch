diff --git a/src/FSAL/FSAL_POSIX/fsal_lock.c b/src/FSAL/FSAL_POSIX/fsal_lock.c
index 0946282..094f858 100644
--- a/src/FSAL/FSAL_POSIX/fsal_lock.c
+++ b/src/FSAL/FSAL_POSIX/fsal_lock.c
@@ -40,24 +40,55 @@
 #include "fsal.h"
 #include "fsal_internal.h"
 
+static int do_blocking_lock(fsal_file_t *obj_handle,
+			fsal_lockdesc_t  *ldesc)
+{
+	/*
+	 * Linux client have this grant hack of pooling for
+	 * availablity when we returned NLM4_BLOCKED. It just
+	 * poll with a large timeout. So depend on the hack for
+	 * now. Later we should really do the block lock support
+	 */
+	errno = EAGAIN;
+	return -1;
+}
+
 
 
 /**
  * FSAL_lock:
- * Not implemented.
  */
-fsal_status_t  FSAL_lock(
-    fsal_handle_t           * objecthandle,           /* IN */
-    fsal_op_context_t             * p_context,                   /* IN */
-    fsal_lockparam_t        * lock_info,            /* IN */
-    fsal_lockdesc_t         * lock_descriptor         /* OUT */
-){
+fsal_status_t  FSAL_lock(fsal_file_t *obj_handle,
+			fsal_lockdesc_t *ldesc,
+			fsal_boolean_t blocking)
+{
+	int cmd;
+	int retval;
+	int fd =  FSAL_FILENO(obj_handle);
 
-  /* sanity checks. */
-  if ( !objecthandle || !p_context || !lock_descriptor )
-    Return(ERR_FSAL_FAULT ,0 , INDEX_FSAL_lock);
-  
-  Return(ERR_FSAL_NOTSUPP ,0 , INDEX_FSAL_lock);
+	errno = 0;
+	/*
+	 * First try a non blocking lock request. If we fail due to
+	 * lock already being held, and if blocking is set for
+	 * a child and do a waiting lock
+	 */
+	retval = fcntl(fd, F_SETLK, &ldesc->flock);
+	if (retval && ((errno == EACCES) || (errno == EAGAIN))) {
+		if (blocking) {
+			/*
+			 * Conflicting lock present create a child and
+			 * do F_SETLKW if we can block. The lock is already
+			 * added to the blocking list.
+			 */
+			do_blocking_lock(obj_handle, ldesc);
+			/* We need to send NLM4_BLOCKED reply */
+			Return(posix2fsal_error(errno), errno, INDEX_FSAL_lock);
+		}
+		Return(posix2fsal_error(errno), errno, INDEX_FSAL_lock);
+
+	}
+	/* granted lock. Now ask NSM to monitor the host */
+	Return(ERR_FSAL_NO_ERROR, 0, INDEX_FSAL_lock);
 }
 
 
@@ -105,5 +136,5 @@ fsal_status_t FSAL_getlock(fsal_file_t *obj_handle, fsal_lockdesc_t *ldesc)
 	if (retval)
 		Return(posix2fsal_error(errno), errno, INDEX_FSAL_getlock);
 
-	Return(ERR_FSAL_NO_ERROR ,0 , INDEX_FSAL_getlock);
+	Return(ERR_FSAL_NO_ERROR, 0, INDEX_FSAL_getlock);
 }
diff --git a/src/MainNFSD/nfs_init.c b/src/MainNFSD/nfs_init.c
index 15dd9a5..60cedde 100644
--- a/src/MainNFSD/nfs_init.c
+++ b/src/MainNFSD/nfs_init.c
@@ -260,6 +260,7 @@ int nfs_print_param_config( nfs_parameter_t * p_nfs_param )
   return 0 ;
 } /* nfs_print_param_config */
 
+extern void nlm_init_locklist(void);
 /**
  * nfs_set_param_default:
  * Set p_nfs_param structure to default parameters.
@@ -565,7 +566,9 @@ int nfs_set_param_default( nfs_parameter_t * p_nfs_param )
     p_nfs_param->extern_param.snmp_adm.export_cache_inode_calls_detail  = FALSE;
     p_nfs_param->extern_param.snmp_adm.export_fsal_calls_detail         = FALSE;
 #endif
-  
+
+    nlm_init_locklist();
+
   return 0 ; 
 } /* nfs_set_param_default */
 
diff --git a/src/MainNFSD/nfs_worker_thread.c b/src/MainNFSD/nfs_worker_thread.c
index 780175f..79e09ba 100644
--- a/src/MainNFSD/nfs_worker_thread.c
+++ b/src/MainNFSD/nfs_worker_thread.c
@@ -254,6 +254,11 @@ const nfs_function_desc_t nlm4_func_desc[] =
    (xdrproc_t)xdr_nlm4_testargs, (xdrproc_t)xdr_nlm4_testres,
    "nlm4_Test", NEEDS_CRED
   },
+  {
+   nlm4_Lock, nlm4_Lock_Free,
+   (xdrproc_t)xdr_nlm4_lockargs, (xdrproc_t)xdr_nlm4_res,
+   "nlm4_Lock", NEEDS_CRED
+  },
 };
 
 /**
diff --git a/src/NFS_Protocols/Makefile.am b/src/NFS_Protocols/Makefile.am
index 72c7239..f52d673 100644
--- a/src/NFS_Protocols/Makefile.am
+++ b/src/NFS_Protocols/Makefile.am
@@ -6,7 +6,8 @@ noinst_LTLIBRARIES            = libnfsproto.la
 
 check_PROGRAMS                = test_mnt_proto
 
-libnfsproto_la_SOURCES = nlm_Test.c			  \
+libnfsproto_la_SOURCES = nlm_Lock.c			  \
+			 nlm_Test.c			  \
 			 nlm_util.c			  \
 			 nlm_Null.c			  \
 			 mnt_Null.c                       \
diff --git a/src/NFS_Protocols/nlm_Lock.c b/src/NFS_Protocols/nlm_Lock.c
new file mode 100644
index 0000000..2777661
--- /dev/null
+++ b/src/NFS_Protocols/nlm_Lock.c
@@ -0,0 +1,198 @@
+/*
+ * Copyright IBM Corporation, 2010
+ *  Contributor: Aneesh Kumar K.v  <aneesh.kumar@linux.vnet.ibm.com>
+ *
+ *
+ * This software is a server that implements the NFS protocol.
+ *
+ *
+ * This software is governed by the CeCILL  license under French law and
+ * abiding by the rules of distribution of free software.  You can  use,
+ * modify and/ or redistribute the software under the terms of the CeCILL
+ * license as circulated by CEA, CNRS and INRIA at the following URL
+ * "http://www.cecill.info".
+ *
+ * As a counterpart to the access to the source code and  rights to copy,
+ * modify and redistribute granted by the license, users are provided only
+ * with a limited warranty  and the software's author,  the holder of the
+ * economic rights,  and the successive licensors  have only  limited
+ * liability.
+ *
+ * In this respect, the user's attention is drawn to the risks associated
+ * with loading,  using,  modifying and/or developing or reproducing the
+ * software by the user in light of its specific status of free software,
+ * that may mean  that it is complicated to manipulate,  and  that  also
+ * therefore means  that it is reserved for developers  and  experienced
+ * professionals having in-depth computer knowledge. Users are therefore
+ * encouraged to load and test the software's suitability as regards their
+ * requirements in conditions enabling the security of their systems and/or
+ * data to be ensured and,  more generally, to use and operate it in the
+ * same conditions as regards security.
+ *
+ * The fact that you are presently reading this means that you have had
+ * knowledge of the CeCILL license and that you accept its terms.
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#ifdef _SOLARIS
+#include "solaris_port.h"
+#endif
+
+#include <stdio.h>
+#include <string.h>
+#include <pthread.h>
+#include <fcntl.h>
+#include <sys/file.h>  /* for having FNDELAY */
+#include "HashData.h"
+#include "HashTable.h"
+#ifdef _USE_GSSRPC
+#include <gssrpc/types.h>
+#include <gssrpc/rpc.h>
+#include <gssrpc/auth.h>
+#include <gssrpc/pmap_clnt.h>
+#else
+#include <rpc/types.h>
+#include <rpc/rpc.h>
+#include <rpc/auth.h>
+#include <rpc/pmap_clnt.h>
+#endif
+#include "log_functions.h"
+#include "stuff_alloc.h"
+#include "nfs23.h"
+#include "nfs4.h"
+#include "nfs_core.h"
+#include "cache_inode.h"
+#include "cache_content.h"
+#include "nfs_exports.h"
+#include "nfs_creds.h"
+#include "nfs_tools.h"
+#include "mount.h"
+#include "nfs_proto_functions.h"
+#include "nlm_util.h"
+
+static int nlm_should_track(nlm_lock_t *nlmb)
+{
+	if (nlmb->state == NLM4_GRANTED)
+		return 1;
+	/*
+	 * FIXME!! we should also track NLM4_BLOCKED locks
+	 * when we do problem blocke lock support
+	 */
+	return 0;
+}
+
+/**
+ * nlm4_Lock: Set a range lock
+ *
+ *  @param parg        [IN]
+ *  @param pexportlist [IN]
+ *  @param pcontextp   [IN]
+ *  @param pclient     [INOUT]
+ *  @param ht          [INOUT]
+ *  @param preq        [IN]
+ *  @param pres        [OUT]
+ *
+ */
+
+int nlm4_Lock( nfs_arg_t            * parg    /* IN     */,
+              exportlist_t         * pexport /* IN     */,
+              fsal_op_context_t    * pcontext   /* IN     */,
+              cache_inode_client_t * pclient /* INOUT  */,
+              hash_table_t         * ht      /* INOUT  */,
+              struct svc_req       * preq    /* IN     */,
+              nfs_res_t            * pres    /* OUT    */ )
+{
+	fsal_file_t *fd;
+	fsal_status_t retval;
+	nlm4_lockargs *arg;
+	cache_entry_t *pentry;
+	fsal_attrib_list_t attr;
+	fsal_lockdesc_t *lock_desc;
+	nlm_lock_t *nlmb = NULL;
+	cache_inode_status_t cache_status;
+	cache_inode_fsal_data_t fsal_data;
+
+	DisplayLogJdLevel( pclient->log_outputs, NIV_FULL_DEBUG,
+			"REQUEST PROCESSING: Calling nlm4_Lock" ) ;
+
+	/* Convert file handle into a cache entry */
+	arg = &parg->arg_nlm4_lock;
+	if (!nfs3_FhandleToFSAL((nfs_fh3 *)&(arg->alock.fh),
+				&fsal_data.handle,
+				pcontext)) {
+		/* handle is not valid */
+		pres->res_nlm4.stat.stat = NLM4_STALE_FH;
+		/*
+		 * Should we do a REQ_OK so that the client get
+		 * a response ? FIXME!!
+		 */
+		return NFS_REQ_DROP;
+	}
+	/* Now get the cached inode attributes */
+	fsal_data.cookie = DIR_START;
+	if ((pentry = cache_inode_get(&fsal_data, &attr, ht,
+					pclient,
+					pcontext,
+					&cache_status)) == NULL) {
+		/* handle is not valid */
+		pres->res_nlm4.stat.stat = NLM4_STALE_FH;
+		return NFS_REQ_OK;
+	}
+	fd = &pentry->object.file.open_fd.fd;
+	lock_desc = nlm_lock_to_fsal_lockdesc(&(arg->alock), arg->exclusive);
+	if (!lock_desc) {
+		pres->res_nlm4.stat.stat = NLM4_DENIED_NOLOCKS;
+		return NFS_REQ_OK;
+	}
+	/*
+	 * add to the lock list expecting that we will probably block
+	 * This make sure that FSAL can safely create a child and wait
+	 * on lock without worrying about whether we were able to add
+	 * the lock to the block list
+	 */
+	nlmb = nlm_add_to_locklist(&(arg->alock), arg->exclusive);
+	if (!nlmb)
+		goto err_out;
+
+	retval = FSAL_lock(fd, lock_desc, arg->block);
+	if (!FSAL_IS_ERROR(retval)) {
+		pres->res_nlm4.stat.stat = NLM4_GRANTED;
+		goto complete;
+	} else {
+		if (fsal_is_retryable(retval) && arg->block) {
+			/* FIXME!! fsal_is_retryable don't check for EACCESS */
+			pres->res_nlm4.stat.stat = NLM4_BLOCKED;
+			goto complete;
+		} else {
+			pres->res_nlm4.stat.stat = NLM4_DENIED;
+			goto complete;
+		}
+	}
+err_out:
+	pres->res_nlm4.stat.stat = NLM4_DENIED_NOLOCKS;
+complete:
+	if (!nlmb) {
+		nlmb->state = pres->res_nlm4.stat.stat;
+		if (!nlm_should_track(nlmb))
+			nlm_remove_from_locklist(nlmb);
+	}
+	Mem_Free(lock_desc);
+	return NFS_REQ_OK;
+}
+
+/**
+ * nlm4_Lock_Free: Frees the result structure allocated for nlm4_Lock
+ *
+ * Frees the result structure allocated for nlm4_Lock. Does Nothing in fact.
+ *
+ * @param pres        [INOUT]   Pointer to the result structure.
+ *
+ */
+void nlm4_Lock_Free(nfs_res_t *pres)
+{
+  return ;
+}
diff --git a/src/NFS_Protocols/nlm_util.c b/src/NFS_Protocols/nlm_util.c
index 8a13d55..559e28f 100644
--- a/src/NFS_Protocols/nlm_util.c
+++ b/src/NFS_Protocols/nlm_util.c
@@ -74,6 +74,9 @@
 #include "nfs_proto_functions.h"
 #include "nlm_util.h"
 
+static struct glist_head nlm_lock_list;
+static pthread_mutex_t nlm_lock_list_mutex;
+
 fsal_lockdesc_t *nlm_lock_to_fsal_lockdesc(struct nlm4_lock *nlm_lock,
 				bool_t exclusive)
 {
@@ -93,16 +96,70 @@ fsal_lockdesc_t *nlm_lock_to_fsal_lockdesc(struct nlm4_lock *nlm_lock,
 	return fldesc;
 }
 
-void fsal_lockdesc_to_nlm_holder(fsal_lockdesc_t *desc,
-				struct nlm4_holder *holder)
+static netobj *copy_netobj(netobj *dst, netobj *src)
 {
-	struct flock *fl = &desc->flock;
-	if (fl->l_type ==  F_RDLCK)
-		holder->exclusive =  1;
-	else
-		holder->exclusive =  0;
-	/* FIXME!! oh value not set */
-	holder->svid	 = fl->l_pid;
-	holder->l_offset = fl->l_start ;
-	holder->l_len	 = fl->l_len;
+	dst->n_bytes = (char *)Mem_Alloc(src->n_len);
+	if (!dst->n_bytes)
+		return NULL;
+	dst->n_len  = src->n_len;
+	memcpy(dst->n_bytes, src->n_bytes, src->n_len);
+	return dst;
+}
+
+static void net_obj_free(netobj *obj)
+{
+	if (obj->n_bytes)
+		Mem_Free(obj->n_bytes);
+}
+static nlm_lock_t *nlm4_lock_to_nlm_lock(struct nlm4_lock *nlm_lock, int exclusive)
+{
+	nlm_lock_t *nlmb;
+	nlmb = (nlm_lock_t *)Mem_Calloc(1, sizeof(nlm_lock_t));
+	if (!nlmb)
+		return NULL;
+	nlmb->caller_name  = strdup(nlm_lock->caller_name);
+	if (!copy_netobj(&nlmb->fh, &nlm_lock->fh))
+		goto err_out;
+	if (!copy_netobj(&nlmb->oh, &nlm_lock->oh))
+		goto err_out;
+	nlmb->svid = nlm_lock->svid;
+	nlmb->offset = nlm_lock->l_offset;
+	nlmb->len    = nlm_lock->l_len;
+	nlmb->exclusive = exclusive;
+	return nlmb;
+err_out:
+	free(nlmb->caller_name);
+	net_obj_free(&nlmb->fh);
+	net_obj_free(&nlmb->oh);
+	Mem_Free(nlmb);
+	return NULL;
+}
+
+nlm_lock_t *nlm_add_to_locklist(struct nlm4_lock *nlm_lock, int exclusive)
+{
+	nlm_lock_t *nlmb;
+	nlmb = nlm4_lock_to_nlm_lock(nlm_lock, exclusive);
+	if (!nlmb)
+		return NULL;
+	pthread_mutex_lock(&nlm_lock_list_mutex);
+	glist_add_tail(&nlm_lock_list, &nlmb->lock_list);
+	pthread_mutex_unlock(&nlm_lock_list_mutex);
+	return nlmb;
+}
+
+void nlm_remove_from_locklist(nlm_lock_t *nlmb)
+{
+	pthread_mutex_lock(&nlm_lock_list_mutex);
+	glist_del(&nlmb->lock_list);
+	pthread_mutex_unlock(&nlm_lock_list_mutex);
+	free(nlmb->caller_name);
+	net_obj_free(&nlmb->fh);
+	net_obj_free(&nlmb->oh);
+	Mem_Free(nlmb);
+}
+
+void nlm_init_locklist(void)
+{
+	init_glist(&nlm_lock_list);
+	pthread_mutex_init(&nlm_lock_list_mutex, NULL);
 }
diff --git a/src/include/fsal.h b/src/include/fsal.h
index 71d3939..34ddb18 100644
--- a/src/include/fsal.h
+++ b/src/include/fsal.h
@@ -713,10 +713,9 @@ fsal_status_t  FSAL_terminate();
  ******************************************************/
 
 fsal_status_t  FSAL_lock(
-    fsal_handle_t           * objecthandle,         /* IN */
-    fsal_op_context_t       * p_context,            /* IN */
-    fsal_lockparam_t        * lock_info,            /* IN */
-    fsal_lockdesc_t         * lock_descriptor       /* OUT */
+	fsal_file_t *obj_handle,	/* IN */
+	fsal_lockdesc_t *ldesc,		/*IN/OUT */
+	fsal_boolean_t callback			/* IN */
 );
 
 fsal_status_t  FSAL_changelock(
diff --git a/src/include/nfs_proto_functions.h b/src/include/nfs_proto_functions.h
index 1dd5f91..e533910 100644
--- a/src/include/nfs_proto_functions.h
+++ b/src/include/nfs_proto_functions.h
@@ -166,6 +166,7 @@ typedef union nfs_arg__
 
   /* nlm protocl arguments */
   nlm4_testargs	  arg_nlm4_test;
+  nlm4_lockargs	  arg_nlm4_lock;
 } nfs_arg_t;
 
 
@@ -209,6 +210,7 @@ typedef union nfs_res__
 
   /* nlm4 returned values */
   nlm4_testres	 res_nlm4test;
+  nlm4_res	 res_nlm4;
 
   char padding[1024] ;
 } nfs_res_t;
@@ -324,6 +326,14 @@ int nlm4_Test( nfs_arg_t            * parg    /* IN     */,
               struct svc_req       * preq    /* IN     */,
 	      nfs_res_t            * pres    /* OUT    */ );
 
+int nlm4_Lock( nfs_arg_t            * parg    /* IN     */,
+              exportlist_t         * pexport /* IN     */,
+              fsal_op_context_t    * pcontext   /* IN     */,
+              cache_inode_client_t * pclient /* INOUT  */,
+              hash_table_t         * ht      /* INOUT  */,
+              struct svc_req       * preq    /* IN     */,
+	      nfs_res_t            * pres    /* OUT    */ );
+
 /* @}
  * -- End of NLM protocol functions. --
  */
@@ -950,6 +960,7 @@ void mnt_UmntAll_Free( nfs_res_t * pres ) ;
 
 void nlm_Null_Free( nfs_res_t * pres ) ;
 void nlm4_Test_Free( nfs_res_t * pres );
+void nlm4_Lock_Free( nfs_res_t * pres );
 
 void nfs_Null_Free( nfs_res_t * resp ) ;
 void nfs_Getattr_Free( nfs_res_t * resp ) ;
diff --git a/src/include/nlm_util.h b/src/include/nlm_util.h
index 839fc0d..2907ee7 100644
--- a/src/include/nlm_util.h
+++ b/src/include/nlm_util.h
@@ -33,8 +33,24 @@
  * knowledge of the CeCILL license and that you accept its terms.
  *
  */
+#include "list.h"
+
+struct nlm_lock {
+	char *caller_name;
+	netobj fh;
+	netobj oh;
+	int32_t svid;
+	uint64_t offset;
+	uint64_t len;
+	int state;
+	int exclusive;
+	struct glist_head lock_list;
+};
+
+typedef struct nlm_lock nlm_lock_t;
 
 extern fsal_lockdesc_t *nlm_lock_to_fsal_lockdesc(struct nlm4_lock *nlm_lock,
 						bool_t exclusive);
-extern void fsal_lockdesc_to_nlm_holder(fsal_lockdesc_t *desc,
-					struct nlm4_holder *holder);
+extern nlm_lock_t *nlm_add_to_locklist(struct nlm4_lock *nlm_lock, int exclusive);
+extern void nlm_remove_from_locklist(nlm_lock_t *nlmb);
+extern void nlm_init_locklist(void);

