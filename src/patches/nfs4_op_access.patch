diff --git a/src/NFS_Protocols/nfs4_op_access.c b/src/NFS_Protocols/nfs4_op_access.c
index 243f515..0e5f435 100644
--- a/src/NFS_Protocols/nfs4_op_access.c
+++ b/src/NFS_Protocols/nfs4_op_access.c
@@ -93,16 +93,23 @@
 int nfs4_op_access(struct nfs_argop4 *op, compound_data_t * data, struct nfs_resop4 *resp)
 {
   fsal_attrib_list_t attr;
-  fsal_accessflags_t read_flag;
-  fsal_accessflags_t write_flag;
-  fsal_accessflags_t exec_flag;
   fsal_cred_t credentials;
+  fsal_status_t st;
+
+  /* do we need to test read/write/exec ? */
+  int test_read, test_write, test_exec;
+  /* NFSv4 rights that are to be set if read, write, exec are allowed */
+  uint32_t nfsv4_read_mask, nfsv4_write_mask, nfsv4_exec_mask;
 
   uint32_t max_access =
       (ACCESS4_READ | ACCESS4_LOOKUP | ACCESS4_MODIFY | ACCESS4_EXTEND | ACCESS4_DELETE |
        ACCESS4_EXECUTE);
   char __attribute__ ((__unused__)) funcname[] = "nfs4_op_access";
 
+  /* initialize output */
+  res_ACCESS4.ACCESS4res_u.resok4.supported = 0;
+  res_ACCESS4.ACCESS4res_u.resok4.access    = 0;
+
   resp->resop = NFS4_OP_ACCESS;
   res_ACCESS4.status = NFS4_OK;
 
@@ -145,144 +152,114 @@ int nfs4_op_access(struct nfs_argop4 *op, compound_data_t * data, struct nfs_res
   /* Get the attributes for the object */
   cache_inode_get_attributes(data->current_entry, &attr);
 
-#if defined( _USE_POSIX )
-  credentials = data->pcontext->credential;
-#elif defined( _USE_HPSS )
-  credentials = data->pcontext->credential;
-#elif defined( _USE_FUSE )
-  credentials = data->pcontext->credential;
-#elif defined( _USE_SNMP )
-  credentials = data->pcontext->user_credential;
-#elif defined( _USE_PROXY )
-  credentials = data->pcontext->user_credential;
-#elif defined( _USE_LUSTRE )
-  credentials = data->pcontext->credential;
-#else
-#error "This FSAL is not supported"
-#endif
-
-#if !defined( _USE_HPSS )
-  if(credentials.user == attr.owner)
-#else
-  if(credentials.hpss_usercred.Uid == attr.owner)
-#endif
-    {
-      read_flag = FSAL_MODE_RUSR;
-      write_flag = FSAL_MODE_WUSR;
-      exec_flag = FSAL_MODE_XUSR;
-    }
-#if !defined( _USE_HPSS )
-  else if(credentials.group == attr.group)   /** @todo make smater group ownership test */
-#else
-  else if(credentials.hpss_usercred.Gid == attr.group)
-#endif
-    {
-      read_flag = FSAL_MODE_RGRP;
-      write_flag = FSAL_MODE_WGRP;
-      exec_flag = FSAL_MODE_XGRP;
-    }
-  else
-    {
-      read_flag = FSAL_MODE_ROTH;
-      write_flag = FSAL_MODE_WOTH;
-      exec_flag = FSAL_MODE_XOTH;
-    }
+  /* determine the rights to be tested in FSAL */
+  test_read = test_exec = test_write = FALSE;
+  nfsv4_read_mask = nfsv4_write_mask = nfsv4_exec_mask = 0;
 
   if(arg_ACCESS4.access & ACCESS4_READ)
-    {
-      res_ACCESS4.ACCESS4res_u.resok4.supported |= ACCESS4_READ;
-#if !defined( _USE_HPSS )
-      if((attr.mode & read_flag)
-         || ((data->pexport->options & EXPORT_OPTION_ROOT) && credentials.user == 0))
-#else
-      if((attr.mode & read_flag)
-         || ((data->pexport->options & EXPORT_OPTION_ROOT)
-             && credentials.hpss_usercred.Uid == 0))
-#endif
-        {
-          res_ACCESS4.ACCESS4res_u.resok4.access |= ACCESS4_READ;
-        }
-    }
+  {
+       /* we need to test read access in FSAL */
+       test_read = TRUE;
+       res_ACCESS4.ACCESS4res_u.resok4.supported |= ACCESS4_READ;
+       /* if read is allowed in FSAL, ACCESS4_READ will be granted */
+       nfsv4_read_mask |= ACCESS4_READ;
+  }
 
   if((arg_ACCESS4.access & ACCESS4_LOOKUP) && (attr.type == FSAL_TYPE_DIR))
-    {
-      res_ACCESS4.ACCESS4res_u.resok4.supported |= ACCESS4_LOOKUP;
-#if !defined( _USE_HPSS )
-      if((attr.mode & exec_flag)
-         || ((data->pexport->options & EXPORT_OPTION_ROOT) && credentials.user == 0))
-#else
-      if((attr.mode & exec_flag)
-         || ((data->pexport->options & EXPORT_OPTION_ROOT)
-             && credentials.hpss_usercred.Uid == 0))
-#endif
-        {
-          res_ACCESS4.ACCESS4res_u.resok4.access |= ACCESS4_LOOKUP;
-        }
-    }
+  {
+       /* we need to test execute access in FSAL */
+       test_exec = TRUE;
+       res_ACCESS4.ACCESS4res_u.resok4.supported |= ACCESS4_LOOKUP;
+       /* if exec is allowed in FSAL, ACCESS4_LOOKUP will be granted */
+       nfsv4_exec_mask |= ACCESS4_LOOKUP;
+  }
 
   if(arg_ACCESS4.access & ACCESS4_MODIFY)
-    {
-      res_ACCESS4.ACCESS4res_u.resok4.supported |= ACCESS4_MODIFY;
-#if !defined( _USE_HPSS )
-      if((attr.mode & write_flag)
-         || ((data->pexport->options & EXPORT_OPTION_ROOT) && credentials.user == 0))
-#else
-      if((attr.mode & write_flag)
-         || ((data->pexport->options & EXPORT_OPTION_ROOT)
-             && credentials.hpss_usercred.Uid == 0))
-#endif
-        {
-          res_ACCESS4.ACCESS4res_u.resok4.access |= ACCESS4_MODIFY;
-        }
-    }
+  {
+       /* we need to test write access in FSAL */
+       test_write = TRUE; 
+       res_ACCESS4.ACCESS4res_u.resok4.supported |= ACCESS4_MODIFY;
+       /* if write is allowed in FSAL, ACCESS4_MODIFY will be granted */
+       nfsv4_write_mask |= ACCESS4_MODIFY;
+  }
 
   if(arg_ACCESS4.access & ACCESS4_EXTEND)
-    {
-      res_ACCESS4.ACCESS4res_u.resok4.supported |= ACCESS4_EXTEND;
-#if !defined( _USE_HPSS )
-      if((attr.mode & write_flag)
-         || ((data->pexport->options & EXPORT_OPTION_ROOT) && credentials.user == 0))
-#else
-      if((attr.mode & write_flag)
-         || ((data->pexport->options & EXPORT_OPTION_ROOT)
-             && credentials.hpss_usercred.Uid == 0))
-#endif
-        {
-          res_ACCESS4.ACCESS4res_u.resok4.access |= ACCESS4_EXTEND;
-        }
-    }
+  {
+       /* we need to test write access in FSAL */
+       test_write = TRUE; 
+       res_ACCESS4.ACCESS4res_u.resok4.supported |= ACCESS4_EXTEND;
+       /* if write is allowed in FSAL, ACCESS4_EXTEND will be granted */
+       nfsv4_write_mask |= ACCESS4_EXTEND;
+  }
 
   if((arg_ACCESS4.access & ACCESS4_DELETE) && (attr.type == FSAL_TYPE_DIR))
-    {
-      res_ACCESS4.ACCESS4res_u.resok4.supported |= ACCESS4_DELETE;
-#if !defined( _USE_HPSS )
-      if((attr.mode & write_flag)
-         || ((data->pexport->options & EXPORT_OPTION_ROOT) && credentials.user == 0))
-#else
-      if((attr.mode & write_flag)
-         || ((data->pexport->options & EXPORT_OPTION_ROOT)
-             && credentials.hpss_usercred.Uid == 0))
-#endif
-        {
-          res_ACCESS4.ACCESS4res_u.resok4.access |= ACCESS4_DELETE;
-        }
-    }
+  {
+     /* we need to test write access in FSAL */
+       test_write = TRUE; 
+       res_ACCESS4.ACCESS4res_u.resok4.supported |= ACCESS4_DELETE;
+       /* if write is allowed in FSAL, ACCESS4_DELETE will be granted */
+       nfsv4_write_mask |= ACCESS4_DELETE;
+  }
 
   if((arg_ACCESS4.access & ACCESS4_EXECUTE) && (attr.type != FSAL_TYPE_DIR))
-    {
-      res_ACCESS4.ACCESS4res_u.resok4.supported |= ACCESS4_EXECUTE;
-#if !defined( _USE_HPSS )
-      if((attr.mode & exec_flag)
-         || ((data->pexport->options & EXPORT_OPTION_ROOT) && credentials.user == 0))
-#else
-      if((attr.mode & exec_flag)
-         || ((data->pexport->options & EXPORT_OPTION_ROOT)
-             && credentials.hpss_usercred.Uid == 0))
-#endif
-        {
-          res_ACCESS4.ACCESS4res_u.resok4.access |= ACCESS4_EXECUTE;
-        }
-    }
+  {
+     /* we need to test execute access in FSAL */
+       test_exec = TRUE;
+       res_ACCESS4.ACCESS4res_u.resok4.supported |= ACCESS4_EXECUTE;
+       /* if exec is allowed in FSAL, ACCESS4_LOOKUP will be granted */
+       nfsv4_exec_mask |= ACCESS4_EXECUTE;
+  }
+
+
+  /* now, test R/W/X independently */
+
+  if (test_read)
+  {
+       st = FSAL_test_access(data->pcontext, FSAL_R_OK, &attr);
+       if (st.major == 0)
+       {
+           /* grant NFSv4 asked rights related to READ */
+           res_ACCESS4.ACCESS4res_u.resok4.access |= nfsv4_read_mask;
+       }
+       else if (st.major != ERR_FSAL_ACCESS)
+       {
+           /* not an access error */
+           res_ACCESS4.status = nfs4_Errno( cache_inode_error_convert(st) );
+           return res_ACCESS4.status;
+       }
+  }
+                
+  if (test_write)
+  {
+       st = FSAL_test_access(data->pcontext, FSAL_W_OK, &attr);
+       if (st.major == 0)
+       {
+           /* grant NFSv4 asked rights related to WRITE */
+           res_ACCESS4.ACCESS4res_u.resok4.access |= nfsv4_write_mask;
+       }
+       else if (st.major != ERR_FSAL_ACCESS)
+       {
+           /* not an access error */
+           res_ACCESS4.status = nfs4_Errno( cache_inode_error_convert(st) );
+           return res_ACCESS4.status;
+       }
+  }
+
+  if (test_exec)
+  {
+       st = FSAL_test_access(data->pcontext, FSAL_X_OK, &attr);
+       if (st.major == 0)
+       {
+           /* grant NFSv4 asked rights related to EXEC */
+           res_ACCESS4.ACCESS4res_u.resok4.access |= nfsv4_exec_mask;
+       }
+       else if (st.major != ERR_FSAL_ACCESS)
+       {
+           /* not an access error */
+           res_ACCESS4.status = nfs4_Errno( cache_inode_error_convert(st) );
+           return res_ACCESS4.status;
+       }
+  }
 
   res_ACCESS4.status = NFS4_OK;
 
