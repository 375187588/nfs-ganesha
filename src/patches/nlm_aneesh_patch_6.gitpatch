diff --git a/src/MainNFSD/nfs_worker_thread.c b/src/MainNFSD/nfs_worker_thread.c
index 79e09ba..2d7e9e3 100644
--- a/src/MainNFSD/nfs_worker_thread.c
+++ b/src/MainNFSD/nfs_worker_thread.c
@@ -259,6 +259,11 @@ const nfs_function_desc_t nlm4_func_desc[] =
    (xdrproc_t)xdr_nlm4_lockargs, (xdrproc_t)xdr_nlm4_res,
    "nlm4_Lock", NEEDS_CRED
   },
+  {
+   nlm4_Cancel, nlm4_Cancel_Free,
+   (xdrproc_t)xdr_nlm4_cancargs, (xdrproc_t)xdr_nlm4_res,
+   "nlm4_Cancel", NEEDS_CRED
+  },
 };
 
 /**
diff --git a/src/NFS_Protocols/Makefile.am b/src/NFS_Protocols/Makefile.am
index f52d673..e998f9c 100644
--- a/src/NFS_Protocols/Makefile.am
+++ b/src/NFS_Protocols/Makefile.am
@@ -6,7 +6,8 @@ noinst_LTLIBRARIES            = libnfsproto.la
 
 check_PROGRAMS                = test_mnt_proto
 
-libnfsproto_la_SOURCES = nlm_Lock.c			  \
+libnfsproto_la_SOURCES = nlm_Cancel.c			  \
+			 nlm_Lock.c			  \
 			 nlm_Test.c			  \
 			 nlm_util.c			  \
 			 nlm_Null.c			  \
diff --git a/src/NFS_Protocols/nlm_Cancel.c b/src/NFS_Protocols/nlm_Cancel.c
new file mode 100644
index 0000000..13b8cb9
--- /dev/null
+++ b/src/NFS_Protocols/nlm_Cancel.c
@@ -0,0 +1,164 @@
+/*
+ * Copyright IBM Corporation, 2010
+ *  Contributor: Aneesh Kumar K.v  <aneesh.kumar@linux.vnet.ibm.com>
+ *
+ *
+ * This software is a server that implements the NFS protocol.
+ *
+ *
+ * This software is governed by the CeCILL  license under French law and
+ * abiding by the rules of distribution of free software.  You can  use,
+ * modify and/ or redistribute the software under the terms of the CeCILL
+ * license as circulated by CEA, CNRS and INRIA at the following URL
+ * "http://www.cecill.info".
+ *
+ * As a counterpart to the access to the source code and  rights to copy,
+ * modify and redistribute granted by the license, users are provided only
+ * with a limited warranty  and the software's author,  the holder of the
+ * economic rights,  and the successive licensors  have only  limited
+ * liability.
+ *
+ * In this respect, the user's attention is drawn to the risks associated
+ * with loading,  using,  modifying and/or developing or reproducing the
+ * software by the user in light of its specific status of free software,
+ * that may mean  that it is complicated to manipulate,  and  that  also
+ * therefore means  that it is reserved for developers  and  experienced
+ * professionals having in-depth computer knowledge. Users are therefore
+ * encouraged to load and test the software's suitability as regards their
+ * requirements in conditions enabling the security of their systems and/or
+ * data to be ensured and,  more generally, to use and operate it in the
+ * same conditions as regards security.
+ *
+ * The fact that you are presently reading this means that you have had
+ * knowledge of the CeCILL license and that you accept its terms.
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#ifdef _SOLARIS
+#include "solaris_port.h"
+#endif
+
+#include <stdio.h>
+#include <string.h>
+#include <pthread.h>
+#include <fcntl.h>
+#include <sys/file.h>  /* for having FNDELAY */
+#include "HashData.h"
+#include "HashTable.h"
+#ifdef _USE_GSSRPC
+#include <gssrpc/types.h>
+#include <gssrpc/rpc.h>
+#include <gssrpc/auth.h>
+#include <gssrpc/pmap_clnt.h>
+#else
+#include <rpc/types.h>
+#include <rpc/rpc.h>
+#include <rpc/auth.h>
+#include <rpc/pmap_clnt.h>
+#endif
+#include "log_functions.h"
+#include "stuff_alloc.h"
+#include "nfs23.h"
+#include "nfs4.h"
+#include "nfs_core.h"
+#include "cache_inode.h"
+#include "cache_content.h"
+#include "nfs_exports.h"
+#include "nfs_creds.h"
+#include "nfs_tools.h"
+#include "mount.h"
+#include "nfs_proto_functions.h"
+#include "nlm_util.h"
+
+static void do_cancel_lock(nlm_lock_t *nlmb)
+{
+	/* kill the child waiting on the lock */
+
+	/* remove the lock from the blocklist */
+	nlm_remove_from_locklist(nlmb);
+}
+
+/**
+ * nlm4_Lock: Set a range lock
+ *
+ *  @param parg        [IN]
+ *  @param pexportlist [IN]
+ *  @param pcontextp   [IN]
+ *  @param pclient     [INOUT]
+ *  @param ht          [INOUT]
+ *  @param preq        [IN]
+ *  @param pres        [OUT]
+ *
+ */
+
+int nlm4_Cancel( nfs_arg_t            * parg    /* IN     */,
+              exportlist_t         * pexport /* IN     */,
+              fsal_op_context_t    * pcontext   /* IN     */,
+              cache_inode_client_t * pclient /* INOUT  */,
+              hash_table_t         * ht      /* INOUT  */,
+              struct svc_req       * preq    /* IN     */,
+              nfs_res_t            * pres    /* OUT    */ )
+{
+	nlm_lock_t *nlmb;
+	fsal_file_t *fd;
+	fsal_status_t retval;
+	nlm4_cancargs *arg;
+	cache_entry_t *pentry;
+	fsal_attrib_list_t attr;
+	cache_inode_status_t cache_status;
+	cache_inode_fsal_data_t fsal_data;
+
+	DisplayLogJdLevel( pclient->log_outputs, NIV_FULL_DEBUG,
+			"REQUEST PROCESSING: Calling nlm4_Lock" ) ;
+
+	/* Convert file handle into a cache entry */
+	arg = &parg->arg_nlm4_cancel;
+	if (!nfs3_FhandleToFSAL((nfs_fh3 *)&(arg->alock.fh),
+				&fsal_data.handle,
+				pcontext)) {
+		/* handle is not valid */
+		pres->res_nlm4.stat.stat = NLM4_STALE_FH;
+		/*
+		 * Should we do a REQ_OK so that the client get
+		 * a response ? FIXME!!
+		 */
+		return NFS_REQ_DROP;
+	}
+	/* Now get the cached inode attributes */
+	fsal_data.cookie = DIR_START;
+	if ((pentry = cache_inode_get(&fsal_data, &attr, ht,
+					pclient,
+					pcontext,
+					&cache_status)) == NULL) {
+		/* handle is not valid */
+		pres->res_nlm4.stat.stat = NLM4_STALE_FH;
+		return NFS_REQ_OK;
+	}
+	fd = &pentry->object.file.open_fd.fd;
+	nlmb = nlm_find_lock_entry(&(arg->alock), arg->exclusive, NLM4_BLOCKED);
+	if (!nlmb) {
+		pres->res_nlm4.stat.stat = NLM4_DENIED;
+		goto complete;
+	}
+	do_cancel_lock(nlmb);
+	pres->res_nlm4.stat.stat = NLM4_GRANTED;
+complete:
+	return NFS_REQ_OK;
+}
+
+/**
+ * nlm4_Lock_Free: Frees the result structure allocated for nlm4_Lock
+ *
+ * Frees the result structure allocated for nlm4_Lock. Does Nothing in fact.
+ *
+ * @param pres        [INOUT]   Pointer to the result structure.
+ *
+ */
+void nlm4_Cancel_Free(nfs_res_t *pres)
+{
+  return ;
+}
diff --git a/src/NFS_Protocols/nlm_util.c b/src/NFS_Protocols/nlm_util.c
index 559e28f..54c0fcf 100644
--- a/src/NFS_Protocols/nlm_util.c
+++ b/src/NFS_Protocols/nlm_util.c
@@ -111,6 +111,16 @@ static void net_obj_free(netobj *obj)
 	if (obj->n_bytes)
 		Mem_Free(obj->n_bytes);
 }
+
+static int netobj_compare(netobj obj1, netobj obj2)
+{
+	if (obj1.n_len != obj2.n_len)
+		return 1;
+	if (memcmp(obj1.n_bytes, obj2.n_bytes, obj1.n_len))
+		return 1;
+	return 0;
+}
+
 static nlm_lock_t *nlm4_lock_to_nlm_lock(struct nlm4_lock *nlm_lock, int exclusive)
 {
 	nlm_lock_t *nlmb;
@@ -163,3 +173,36 @@ void nlm_init_locklist(void)
 	init_glist(&nlm_lock_list);
 	pthread_mutex_init(&nlm_lock_list_mutex, NULL);
 }
+
+nlm_lock_t *nlm_find_lock_entry(struct nlm4_lock *nlm_lock,
+				int exclusive, int state)
+{
+	nlm_lock_t *nlmb;
+	struct glist_head *glist;
+	pthread_mutex_lock(&nlm_lock_list_mutex);
+	glist_for_each(glist, &nlm_lock_list) {
+		nlmb = glist_entry(glist, nlm_lock_t , lock_list);
+		if (strcmp(nlmb->caller_name, nlm_lock->caller_name))
+			continue;
+		if (netobj_compare(nlmb->fh, nlm_lock->fh))
+			continue;
+		if (netobj_compare(nlmb->oh, nlm_lock->oh))
+			continue;
+		if (nlmb->svid != nlm_lock->svid)
+			continue;
+		if (nlmb->offset != nlm_lock->l_offset)
+			continue;
+		if (nlmb->len != nlm_lock->l_len)
+			continue;
+		if (nlmb->exclusive != exclusive)
+			continue;
+		if (nlmb->state != state)
+			continue;
+		/* We have matched all atribute of the nlm4_lock */
+		break;
+	}
+	pthread_mutex_unlock(&nlm_lock_list_mutex);
+	if (glist == &nlm_lock_list)
+		return NULL;
+	return nlmb;
+}
diff --git a/src/include/nfs_proto_functions.h b/src/include/nfs_proto_functions.h
index e533910..2660f09 100644
--- a/src/include/nfs_proto_functions.h
+++ b/src/include/nfs_proto_functions.h
@@ -167,6 +167,7 @@ typedef union nfs_arg__
   /* nlm protocl arguments */
   nlm4_testargs	  arg_nlm4_test;
   nlm4_lockargs	  arg_nlm4_lock;
+  nlm4_cancargs	  arg_nlm4_cancel;
 } nfs_arg_t;
 
 
@@ -334,6 +335,15 @@ int nlm4_Lock( nfs_arg_t            * parg    /* IN     */,
               struct svc_req       * preq    /* IN     */,
 	      nfs_res_t            * pres    /* OUT    */ );
 
+int nlm4_Cancel( nfs_arg_t            * parg    /* IN     */,
+              exportlist_t         * pexport /* IN     */,
+              fsal_op_context_t    * pcontext   /* IN     */,
+              cache_inode_client_t * pclient /* INOUT  */,
+              hash_table_t         * ht      /* INOUT  */,
+              struct svc_req       * preq    /* IN     */,
+	      nfs_res_t            * pres    /* OUT    */ );
+
+
 /* @}
  * -- End of NLM protocol functions. --
  */
@@ -961,6 +971,7 @@ void mnt_UmntAll_Free( nfs_res_t * pres ) ;
 void nlm_Null_Free( nfs_res_t * pres ) ;
 void nlm4_Test_Free( nfs_res_t * pres );
 void nlm4_Lock_Free( nfs_res_t * pres );
+void nlm4_Cancel_Free( nfs_res_t * pres );
 
 void nfs_Null_Free( nfs_res_t * resp ) ;
 void nfs_Getattr_Free( nfs_res_t * resp ) ;
diff --git a/src/include/nlm_util.h b/src/include/nlm_util.h
index 2907ee7..5229cc7 100644
--- a/src/include/nlm_util.h
+++ b/src/include/nlm_util.h
@@ -54,3 +54,5 @@ extern fsal_lockdesc_t *nlm_lock_to_fsal_lockdesc(struct nlm4_lock *nlm_lock,
 extern nlm_lock_t *nlm_add_to_locklist(struct nlm4_lock *nlm_lock, int exclusive);
 extern void nlm_remove_from_locklist(nlm_lock_t *nlmb);
 extern void nlm_init_locklist(void);
+extern nlm_lock_t *nlm_find_lock_entry(struct nlm4_lock *nlm_lock,
+				int exclusive, int state);
