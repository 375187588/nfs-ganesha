>From 722bd8457bd8aee30a08cd4957e6d0cad3069a6e Mon Sep 17 00:00:00 2001
From: Jeremy Bongio <jbongio@us.ibm.com>
Date: Tue, 29 Jun 2010 03:54:57 -0400
Subject: [PATCH] Changed the WILDCARD behavior for the access parameter of exports
 so that hostnames as well as ips are matched.


Signed-off-by: root <root@laptop.(none)>
---
 src/support/exports.c |   39 ++++++++++++++++++++++++++++++++++-----
 1 files changed, 34 insertions(+), 5 deletions(-)

diff --git a/src/support/exports.c b/src/support/exports.c
index b3134b2..2bcf1f2 100644
--- a/src/support/exports.c
+++ b/src/support/exports.c
@@ -1990,6 +1990,7 @@ int ReadExports(config_file_t in_config,        /* The file that contains the ex
  * function for matching a specific option in the client export list.
  */
 static int export_client_match(unsigned int addr,
+			       char *ipstring,
                                exportlist_t * pexport,
                                exportlist_client_entry_t * pclient_found,
                                unsigned int export_option)
@@ -2097,7 +2098,7 @@ static int export_client_match(unsigned int addr,
                              (unsigned int)(addr >> 8) & 0xFF,
                              (unsigned int)(addr & 0xFF));
 #endif
-                      break;
+		      strncpy(hostname, "unresolved", 10);
                     }
                 }
             }
@@ -2119,6 +2120,15 @@ static int export_client_match(unsigned int addr,
                  hostname, pexport->clients.clientarray[i].client.wildcard.wildcard);
 #endif
 
+	  /* Now checking for IP wildcards */
+          if(fnmatch
+             (pexport->clients.clientarray[i].client.wildcard.wildcard, ipstring,
+              FNM_PATHNAME) == 0)
+            {
+              *pclient_found = pexport->clients.clientarray[i];
+              return TRUE;
+            }
+
           break;
 
         case GSSPRINCIPAL_CLIENT:
@@ -2226,6 +2236,8 @@ int nfs_export_check_access(struct sockaddr_storage *pssaddr,
 #endif
   static char ten_bytes_all_0[10];
   static unsigned two_bytes_all_1 = 0xFFFF;
+  char ipstring[MAXHOSTNAMELEN];
+  char ip6string[MAXHOSTNAMELEN];
 
   memset(ten_bytes_all_0, 0, 10);
 
@@ -2262,11 +2274,20 @@ int nfs_export_check_access(struct sockaddr_storage *pssaddr,
   if(psockaddr_in->sin_family == AF_INET)
     {
 #endif                          /* _USE_TIRPC_IPV6 */
+
+      /* Convert IP address into a string for wild character access checks. */
+      inet_ntop(psockaddr_in->sin_family, &psockaddr_in->sin_addr,
+		ipstring, INET_ADDRSTRLEN);
+      if (ipstring == NULL) {
+	DisplayLog("Error: Could not convert the IPv4 address to a character string.");
+	return FALSE;
+      }
+
       /* check if any root access export matches this client */
-      if(export_client_match(addr, pexport, pclient_found, EXPORT_OPTION_ROOT))
+      if(export_client_match(addr, ipstring, pexport, pclient_found, EXPORT_OPTION_ROOT))
         return TRUE;
       /* else, check if any access only export matches this client */
-      else if(export_client_match(addr, pexport, pclient_found, EXPORT_OPTION_ACCESS))
+      else if(export_client_match(addr, ipstring, pexport, pclient_found, EXPORT_OPTION_ACCESS))
         return TRUE;
 #ifdef _USE_TIRPC_IPV6
     }
@@ -2292,15 +2313,23 @@ int nfs_export_check_access(struct sockaddr_storage *pssaddr,
          !memcmp((char *)(psockaddr_in6->sin6_addr.s6_addr + 10),
                  (char *)&two_bytes_all_1, 2))
         {
+	  /* Convert IP address into a string for wild character access checks. */
+	  inet_ntop(psockaddr_in->sin6_family, &psockaddr_in->sin6_addr,
+		    ip6string, INET6_ADDRSTRLEN);
+	  if (ip6string == NULL) {
+	    DisplayLog("Error: Could not convert the IPv6 address to a character string.");
+	    return FALSE;
+	  }
+
           /* This is an IPv4 address mapped to an IPv6 one. Extract the IPv4 address and proceed with IPv4 autentication */
           memcpy((char *)&addr, (char *)(psockaddr_in6->sin6_addr.s6_addr + 12), 4);
 
           /* Proceed with IPv4 dedicated function */
           /* check if any root access export matches this client */
-          if(export_client_match(addr, pexport, pclient_found, EXPORT_OPTION_ROOT))
+          if(export_client_match(addr, ip6string, pexport, pclient_found, EXPORT_OPTION_ROOT))
             return TRUE;
           /* else, check if any access only export matches this client */
-          else if(export_client_match(addr, pexport, pclient_found, EXPORT_OPTION_ACCESS))
+          else if(export_client_match(addr, ip6string, pexport, pclient_found, EXPORT_OPTION_ACCESS))
             return TRUE;
         }
 
-- 
1.7.0.4

