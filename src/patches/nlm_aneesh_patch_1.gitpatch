 src/MainNFSD/nfs_init.c                  |    2 +
 src/MainNFSD/nfs_rpc_dispatcher_thread.c |  207 +++++++++++++++++-
 src/MainNFSD/nfs_worker_thread.c         |   23 ++-
 src/XDR/Makefile.am                      |    1 +
 src/XDR/nlm4.x                           |  162 ++++++++++++++
 src/XDR/nlm4_xdr.c                       |  288 +++++++++++++++++++++++++
 src/include/nfs_core.h                   |    7 +
 src/include/nlm4.h                       |  346 ++++++++++++++++++++++++++++++
 src/support/nfs_read_conf.c              |    4 +
 9 files changed, 1030 insertions(+), 10 deletions(-)
 create mode 100644 src/XDR/nlm4.x
 create mode 100644 src/XDR/nlm4_xdr.c
 create mode 100644 src/include/nlm4.h

diff --git a/src/MainNFSD/nfs_init.c b/src/MainNFSD/nfs_init.c
index 09ce693..15dd9a5 100644
--- a/src/MainNFSD/nfs_init.c
+++ b/src/MainNFSD/nfs_init.c
@@ -109,6 +109,7 @@
 #include "nfs23.h"
 #include "nfs4.h"
 #include "mount.h"
+#include "nlm4.h"
 #include "nfs_core.h"
 #include "cache_inode.h"
 #include "err_cache_inode.h"
@@ -275,6 +276,7 @@ int nfs_set_param_default( nfs_parameter_t * p_nfs_param )
   p_nfs_param->core_param.mnt_port              = 0 ;
   p_nfs_param->core_param.nfs_program           = NFS_PROGRAM ;
   p_nfs_param->core_param.mnt_program           = MOUNTPROG ;
+  p_nfs_param->core_param.nlm_program           = NLMPROG ;
   p_nfs_param->core_param.drop_io_errors        = TRUE ;
   p_nfs_param->core_param.drop_inval_errors     = FALSE ;
   p_nfs_param->core_param.core_dump_size        = 0 ;
diff --git a/src/MainNFSD/nfs_rpc_dispatcher_thread.c b/src/MainNFSD/nfs_rpc_dispatcher_thread.c
index eb943db..b3024e2 100644
--- a/src/MainNFSD/nfs_rpc_dispatcher_thread.c
+++ b/src/MainNFSD/nfs_rpc_dispatcher_thread.c
@@ -120,6 +120,7 @@
 #include "nfs23.h"
 #include "nfs4.h"
 #include "mount.h"
+#include "nlm4.h"
 #include "nfs_init.h"
 #include "nfs_core.h"
 #include "cache_inode.h"
@@ -259,6 +260,7 @@ int nfs_Init_svc( )
 #endif
   struct sockaddr_in      sinaddr_nfs;
   struct sockaddr_in      sinaddr_mnt;
+  struct sockaddr_in      sinaddr_nlm;
 #ifdef _USE_TIRPC_IPV6
   struct sockaddr_in6     sinaddr_nfs_udp6 ;
   struct sockaddr_in6     sinaddr_mnt_udp6 ;
@@ -281,6 +283,7 @@ int nfs_Init_svc( )
   int                     rc = 0 ;
   int                     nb_svc_nfs_ok = 0 ;
   int                     nb_svc_mnt_ok = 0 ;
+  int                     nb_svc_nlm_ok = 0 ;
 #ifdef _USE_GSSRPC
   OM_uint32               maj_stat ;
   OM_uint32               min_stat ;
@@ -375,6 +378,19 @@ int nfs_Init_svc( )
       DisplayLog( "NFS EXIT: Cannot allocate a tcp socket" ) ;
       return -1 ;
     }
+  if( ( nfs_param.worker_param.nfs_svc_data.socket_nlm_udp = socket( AF_INET, SOCK_DGRAM, IPPROTO_UDP ) ) < 0 )
+    {
+      DisplayErrorLog( ERR_SYS, ERR_SOCKET, errno ) ;
+      DisplayLog( "NFS EXIT: Cannot allocate a udp socket" ) ;
+      return -1 ;
+    }
+
+  if( ( nfs_param.worker_param.nfs_svc_data.socket_nlm_tcp = socket( AF_INET, SOCK_STREAM, IPPROTO_TCP) ) < 0 )
+    {
+      DisplayErrorLog( ERR_SYS, ERR_SOCKET, errno ) ;
+      DisplayLog( "NFS EXIT: Cannot allocate a tcp socket" ) ;
+      return -1 ;
+    }
 
 #else
  /* Allocate the UDP and TCP structure for the RPC */
@@ -406,6 +422,19 @@ int nfs_Init_svc( )
       DisplayLog( "NFS EXIT: Cannot allocate a tcp6 socket" ) ;
       return -1 ;
     }
+  if( ( nfs_param.worker_param.nfs_svc_data.socket_nlm_udp = socket( AF_INET6, SOCK_DGRAM, IPPROTO_UDP ) ) < 0 )
+    {
+      DisplayErrorLog( ERR_SYS, ERR_SOCKET, errno ) ;
+      DisplayLog( "NFS EXIT: Cannot allocate a udp6 socket" ) ;
+      return -1 ;
+    }
+
+  if( ( nfs_param.worker_param.nfs_svc_data.socket_nlm_tcp = socket( AF_INET6, SOCK_STREAM, IPPROTO_TCP) ) < 0 )
+    {
+      DisplayErrorLog( ERR_SYS, ERR_SOCKET, errno ) ;
+      DisplayLog( "NFS EXIT: Cannot allocate a tcp6 socket" ) ;
+      return -1 ;
+    }
 
 #endif
 
@@ -444,7 +473,22 @@ int nfs_Init_svc( )
       DisplayLog( "NFS EXIT: Bad tcp socket options" ) ;
       return -1 ;
     }
-  
+  if( setsockopt( nfs_param.worker_param.nfs_svc_data.socket_nlm_udp,
+                  SOL_SOCKET, SO_REUSEADDR, &one, sizeof( one ) ) )
+    {
+      DisplayErrorLog( ERR_SYS, ERR_SETSOCKOPT, errno ) ;
+      DisplayLog( "NFS EXIT: Bad udp socket options" ) ;
+      return -1 ;
+    }
+
+  if( setsockopt( nfs_param.worker_param.nfs_svc_data.socket_nlm_tcp,
+                  SOL_SOCKET, SO_REUSEADDR, &one, sizeof( one ) ) )
+    {
+      DisplayErrorLog( ERR_SYS, ERR_SETSOCKOPT, errno ) ;
+      DisplayLog( "NFS EXIT: Bad tcp socket options" ) ;
+      return -1 ;
+    }
+
   /* We prefer using non-blocking socket in the specific case */
   if( fcntl( nfs_param.worker_param.nfs_svc_data.socket_nfs_udp, F_SETFL, FNDELAY) == -1) 
     {
@@ -460,12 +504,22 @@ int nfs_Init_svc( )
       return -1 ;
     }
 
+  if( fcntl( nfs_param.worker_param.nfs_svc_data.socket_nlm_udp, F_SETFL, FNDELAY) == -1)
+    {
+      DisplayErrorLog( ERR_SYS, ERR_FCNTL, errno ) ;
+      DisplayLog( "NFS EXIT: Cannot set udp socket as non blocking" ) ;
+      return -1 ;
+    }
+
   /* Some log that can be useful when debug ONC/RPC and RPCSEC_GSS matter */ 
-  DisplayLogLevel( NIV_EVENT, "Socket numbers are: nfs_udp=%u  nfs_tcp=%u  mnt_udp=%u  mnt_tcp=%u", 
+  DisplayLogLevel( NIV_EVENT, "Socket numbers are: nfs_udp=%u  nfs_tcp=%u "
+		  "mnt_udp=%u  mnt_tcp=%u nlm_tcp=%u nlm_udp=%u",
 		   nfs_param.worker_param.nfs_svc_data.socket_nfs_udp, 
 		   nfs_param.worker_param.nfs_svc_data.socket_nfs_tcp,
 		   nfs_param.worker_param.nfs_svc_data.socket_mnt_udp,
-		   nfs_param.worker_param.nfs_svc_data.socket_mnt_tcp ) ; 
+		   nfs_param.worker_param.nfs_svc_data.socket_mnt_tcp ,
+		   nfs_param.worker_param.nfs_svc_data.socket_nlm_udp,
+		   nfs_param.worker_param.nfs_svc_data.socket_nlm_tcp);
   
   /* Bind the udp and tcp socket to port 2049/tcp and 2049/udp */
   memset((char *) &sinaddr_nfs, 0, sizeof( sinaddr_nfs ) );
@@ -515,6 +569,29 @@ int nfs_Init_svc( )
       return -1 ;
     }
 
+  /* Bind the nlm service */
+  memset((char *) &sinaddr_nlm, 0, sizeof( sinaddr_nlm ) );
+  sinaddr_nlm.sin_family      = AF_INET ;
+  sinaddr_nlm.sin_addr.s_addr = INADDR_ANY ; /* All the interfaces on the machine are used */
+  sinaddr_nlm.sin_port        = htons( nfs_param.core_param.nlm_port ) ;
+
+  /* It's now time for binding the sockets */
+  if( bind( nfs_param.worker_param.nfs_svc_data.socket_nlm_udp,
+            (struct sockaddr *) &sinaddr_nlm, sizeof( sinaddr_nlm ) ) == -1)
+    {
+      DisplayErrorLog( ERR_SYS, ERR_BIND, errno ) ;
+      DisplayLog( "NFS EXIT: Cannot bind udp socket" ) ;
+      return -1 ;
+    }
+
+  if( ( rc = bind( nfs_param.worker_param.nfs_svc_data.socket_nlm_tcp,
+                   (struct sockaddr *) &sinaddr_nlm, sizeof( sinaddr_nlm ) ) ) == -1)
+    {
+      DisplayErrorLog( ERR_SYS, ERR_BIND, errno ) ;
+      DisplayLog( "NFS EXIT: Cannot bind tcp socket rc=%d errno=%d", rc, errno ) ;
+      return -1 ;
+    }
+
 #else
   /* Bind the udp and tcp socket to port 2049/tcp and 2049/udp */
   memset((char *) &sinaddr_nfs_udp6, 0, sizeof( sinaddr_nfs_udp6 ) );
@@ -625,7 +702,7 @@ int nfs_Init_svc( )
       DisplayLog( "NFS EXIT: Cannot bind udp6 socket" ) ;
       return -1 ;
     }
-
+  /* FIXME do the nlm part here */
 #endif /* _USE_TIRPC_IPV6 */
 
 #ifdef _USE_TIRPC
@@ -667,6 +744,9 @@ int nfs_Init_svc( )
 
   pmap_unset( nfs_param.core_param.mnt_program, MOUNT_V1 );
   pmap_unset( nfs_param.core_param.mnt_program, MOUNT_V3 );
+
+  pmap_unset( nfs_param.core_param.nlm_program, NLM4_VERS );
+
 #endif
 
   /* Allocation of the SVCXPRT */
@@ -758,7 +838,39 @@ int nfs_Init_svc( )
       DisplayErrorLog( ERR_RPC, ERR_SVCTCP_CREATE, 0 ) ;
       DisplayLog( "NFS EXIT: Cannot allocate MNT/TCP SVCXPRT" ) ;
       return -1  ;
-    }  
+    }
+
+  if( ( nfs_param.worker_param.nfs_svc_data.xprt_nlm_udp =
+#ifdef _USE_TIRPC
+       Svc_dg_create( nfs_param.worker_param.nfs_svc_data.socket_nlm_udp,
+                      NFS_SEND_BUFFER_SIZE,
+                      NFS_RECV_BUFFER_SIZE ) ) == NULL )
+#else
+        Svcudp_bufcreate( nfs_param.worker_param.nfs_svc_data.socket_nlm_udp,
+                          NFS_SEND_BUFFER_SIZE,
+                          NFS_RECV_BUFFER_SIZE ) ) == NULL )
+#endif
+    {
+      DisplayErrorLog( ERR_RPC, ERR_SVCUDP_CREATE, 0 ) ;
+      DisplayLog( "NFS EXIT: Cannot allocate NLM/UDP SVCXPRT" ) ;
+      return -1  ;
+    }
+
+  if( ( nfs_param.worker_param.nfs_svc_data.xprt_nlm_tcp =
+#ifdef _USE_TIRPC
+         Svc_vc_create( nfs_param.worker_param.nfs_svc_data.socket_nlm_tcp,
+                       NFS_SEND_BUFFER_SIZE,
+                       NFS_RECV_BUFFER_SIZE ) ) == NULL )
+#else
+	 Svctcp_create( nfs_param.worker_param.nfs_svc_data.socket_nlm_tcp,
+                       NFS_SEND_BUFFER_SIZE,
+                       NFS_RECV_BUFFER_SIZE ) ) == NULL )
+#endif
+    {
+      DisplayErrorLog( ERR_RPC, ERR_SVCTCP_CREATE, 0 ) ;
+      DisplayLog( "NFS EXIT: Cannot allocate NLM/TCP SVCXPRT" ) ;
+      return -1  ;
+    }
 
 #ifdef _USE_TIRPC_IPV6
   if( listen( nfs_param.worker_param.nfs_svc_data.socket_mnt_tcp, (int)bindaddr_mnt_tcp6.qlen ) != 0 )
@@ -1193,11 +1305,58 @@ int nfs_Init_svc( )
 
 #endif
 
+#if ! defined( _USE_PROXY ) || defined ( _HANDLE_MAPPING )
+  DisplayLogLevel(NIV_EVENT, "Registering NLM V4/UDP" ) ;
+#ifdef _USE_TIRPC
+  if( !svc_reg( nfs_param.worker_param.nfs_svc_data.xprt_nlm_udp,
+                nfs_param.core_param.nlm_program,
+                NLM4_VERS,
+		nfs_rpc_dispatch_dummy,
+		netconfig_udpv4 ) )
+#else
+  if( !Svc_register( nfs_param.worker_param.nfs_svc_data.xprt_nlm_udp,
+                     nfs_param.core_param.nlm_program,
+		     NLM4_VERS,
+                     nfs_rpc_dispatch_dummy,
+                     IPPROTO_UDP ) )
+#endif
+    {
+      DisplayErrorLog( ERR_RPC, ERR_SVC_REGISTER, 0 ) ;
+      DisplayLog( "NFS DISPATCHER: Cannot register NLM V4 on UDP" ) ;
+    }
+  else
+      nb_svc_nlm_ok += 1 ;
+#endif /* _USE_PROXY */
+
+#if ! defined( _USE_PROXY ) || defined ( _HANDLE_MAPPING )
+  DisplayLogLevel( NIV_EVENT, "Registering NLM V4/TCP" ) ;
+#ifdef _USE_TIRPC
+  if( !svc_reg( nfs_param.worker_param.nfs_svc_data.xprt_nlm_tcp,
+                nfs_param.core_param.mnt_program,
+                NLM4_VERS,
+                nfs_rpc_dispatch_dummy,
+                netconfig_tcpv4 ) )
+#else
+  if( !Svc_register( nfs_param.worker_param.nfs_svc_data.xprt_nlm_tcp,
+                     nfs_param.core_param.nlm_program,
+                     NLM4_VERS,
+                     nfs_rpc_dispatch_dummy,
+                     IPPROTO_TCP ) )
+#endif
+    {
+      DisplayErrorLog( ERR_RPC, ERR_SVC_REGISTER, 0 ) ;
+      DisplayLog( "NFS DISPATCHER: Cannot register NLM V4 on TCP" ) ;
+    }
+  else
+      nb_svc_nlm_ok += 1 ;
+#else
+      nb_svc_nlm_ok += 1 ;
+#endif /* _USE_PROXY */
 
 #endif /* _NO_TCP_REGISTER */
-  
+
   /* Were at least one NFS/MNT registration ok ? */
-  if( nb_svc_nfs_ok == 0 ||nb_svc_mnt_ok == 0 )
+  if( nb_svc_nfs_ok == 0 ||nb_svc_mnt_ok == 0 || nb_svc_nlm_ok == 0)
      {
 	/* Not enough registration for servicing clients */
 	DisplayLog( "NFS_DISPATCHER: /!\\ | No registration to NFS and/or MOUNT programs were done..." ) ;
@@ -1438,7 +1597,16 @@ void nfs_rpc_getreq( fd_set * readfds, nfs_parameter_t * pnfs_para )
               pnfsreq->ipproto = IPPROTO_UDP ;
               
               pnfsreq->status = SVC_RECV( pnfsreq->xprt, &(pnfsreq->msg) ) ;
-            } 
+            }
+          else if( nfs_param.worker_param.nfs_svc_data.socket_nlm_udp ==  sock + bit - 1  )
+            {
+#ifdef _DEBUG_DISPATCH
+              DisplayLogLevel( NIV_FULL_DEBUG, "A NLM UDP request" ) ;
+#endif
+              pnfsreq->xprt = pnfsreq->nlm_udp_xprt ;
+              pnfsreq->ipproto = IPPROTO_UDP ;
+              pnfsreq->status = SVC_RECV( pnfsreq->xprt, &(pnfsreq->msg) ) ;
+            }
           else if( nfs_param.worker_param.nfs_svc_data.socket_nfs_tcp == sock + bit -1 )
             {
               /* 
@@ -1466,6 +1634,17 @@ void nfs_rpc_getreq( fd_set * readfds, nfs_parameter_t * pnfs_para )
 
               pnfsreq->status = SVC_RECV( pnfsreq->xprt, &(pnfsreq->msg) );
             }
+          else if( nfs_param.worker_param.nfs_svc_data.socket_nlm_tcp == sock + bit -1 )
+            {
+#ifdef _DEBUG_DISPATCH
+              DisplayLogLevel( NIV_FULL_DEBUG, "An initial NLM request from a new client" ) ;
+#endif
+              pnfsreq->xprt = nfs_param.worker_param.nfs_svc_data.xprt_nlm_tcp ;
+              pnfsreq->ipproto = IPPROTO_TCP ;
+
+              pnfsreq->status = SVC_RECV( pnfsreq->xprt, &(pnfsreq->msg) );
+            }
+
           else
             {
               /* This is a regular tcp request on an established connection, should be handle by a dedicated thread */
@@ -1760,6 +1939,18 @@ int nfs_Init_request_data(  nfs_request_data_t * pdata )
       return -1 ;
     }
 
+#ifdef _USE_TIRPC
+  if( (pdata->nlm_udp_xprt = Svc_dg_create( nfs_param.worker_param.nfs_svc_data.socket_nlm_udp,
+                                            NFS_SEND_BUFFER_SIZE, NFS_RECV_BUFFER_SIZE ) ) == NULL )
+#else
+  if( ( pdata->nlm_udp_xprt = Svcudp_bufcreate( nfs_param.worker_param.nfs_svc_data.socket_nlm_udp,
+                                                NFS_SEND_BUFFER_SIZE, NFS_RECV_BUFFER_SIZE) ) == NULL )
+#endif
+    {
+      DisplayErrorLog( ERR_RPC, ERR_SVCUDP_CREATE, 0 );
+      return -1 ;
+    }
+
   pdata->xprt = NULL ;
   
   return 0 ;
diff --git a/src/MainNFSD/nfs_worker_thread.c b/src/MainNFSD/nfs_worker_thread.c
index a803916..1e01e95 100644
--- a/src/MainNFSD/nfs_worker_thread.c
+++ b/src/MainNFSD/nfs_worker_thread.c
@@ -1047,8 +1047,27 @@ void * worker_thread( void * IndexArg )
                             {
                               if( preq->rq_prog != nfs_param.core_param.mnt_program )
                                 {
-                                  DisplayLogLevel( NIV_FULL_DEBUG, "/!\\ | Invalid Program number #%d",  preq->rq_prog ) ;
-                                  svcerr_noprog( xprt ); /* This is no NFS or MOUNT program, exit... */
+                                  if( preq->rq_prog != nfs_param.core_param.nlm_program )
+				  {
+                                    DisplayLogLevel( NIV_FULL_DEBUG, "/!\\ | Invalid Program number #%d",  preq->rq_prog ) ;
+                                    svcerr_noprog( xprt ); /* This is no NFS, MOUNT, NLM program, exit... */
+				  }
+				  else
+				  {
+                                  /* Call is with NLMPROG */
+                                  if( preq->rq_vers != NLM4_VERS )
+                                    {
+                                      DisplayLogLevel( NIV_FULL_DEBUG, "/!\\ | Invalid NLM Version #%d", preq->rq_vers ) ;
+                                      svcerr_progvers( xprt,  NLM4_VERS, NLM4_VERS); /* Bad NLM version */
+                                    }
+                                  else
+                                    {
+                                      /* Actual work starts here */
+                                      nfs_rpc_execute( pnfsreq, pmydata ) ;
+                                    }
+
+
+				  }
                                 }
                               else
                                 {
diff --git a/src/XDR/Makefile.am b/src/XDR/Makefile.am
index aa3c72d..4cfc2ea 100644
--- a/src/XDR/Makefile.am
+++ b/src/XDR/Makefile.am
@@ -5,6 +5,7 @@ noinst_LTLIBRARIES            = libnfs_mnt_xdr.la
 
 libnfs_mnt_xdr_la_SOURCES = xdr_mount.c           \
                             xdr_nfs23.c           \
+			    nlm4_xdr.c		  \
                             ../include/nfs23.h    \
                             ../include/mount.h    \
                             ../include/nfs_core.h \
diff --git a/src/XDR/nlm4.x b/src/XDR/nlm4.x
new file mode 100644
index 0000000..82c4f6b
--- /dev/null
+++ b/src/XDR/nlm4.x
@@ -0,0 +1,162 @@
+
+/* The maximum length of the string identifying the caller. */
+const LM_MAXSTRLEN = 1024;
+/* The maximum number of bytes in the nlm_notify name argument. */
+const LM_MAXNAMELEN = 1025;
+const MAXNETOBJ_SZ = 1024;
+
+/*
+ * Basic typedefs for RFC 1832 data type definitions
+ */
+typedef int		int32_t;
+typedef unsigned int	uint32_t;
+typedef hyper		int64_t;
+typedef unsigned hyper	uint64_t;
+
+
+enum nlm4_stats {
+	NLM4_GRANTED = 0,
+	NLM4_DENIED = 1,
+	NLM4_DENIED_NOLOCKS = 2,
+	NLM4_BLOCKED = 3,
+	NLM4_DENIED_GRACE_PERIOD = 4,
+	NLM4_DEADLCK = 5,
+	NLM4_ROFS = 6,
+	NLM4_STALE_FH = 7,
+	NLM4_FBIG = 8,
+	NLM4_FAILED = 9
+};
+
+struct nlm4_stat {
+	nlm4_stats stat;
+};
+
+struct nlm4_res {
+	netobj cookie;
+	nlm4_stat stat;
+};
+
+struct nlm4_holder {
+	bool     exclusive;
+	int32_t    svid;
+	netobj   oh;
+	uint64_t   l_offset;
+	uint64_t   l_len;
+};
+
+union nlm4_testrply switch (nlm4_stats stat) {
+case NLM4_DENIED:
+	struct nlm4_holder holder; /* holder of the lock */
+default: void;
+};
+
+struct nlm4_testres {
+	netobj cookie;
+	nlm4_testrply test_stat;
+};
+
+
+struct nlm4_lock {
+	string   caller_name<LM_MAXSTRLEN>;
+	netobj   fh;
+	netobj   oh;
+	int32_t    svid;
+	uint64_t   l_offset;
+	uint64_t   l_len;
+};
+
+struct nlm4_lockargs {
+	netobj cookie;
+	bool block; /* Flag to indicate blocking behaviour. */
+	bool exclusive; /* If exclusive access is desired. */
+	struct nlm4_lock alock; /* The actual lock data (see above) */
+	bool reclaim; /* used for recovering locks */
+	int32_t state; /* specify local NSM state */
+};
+
+
+struct nlm4_cancargs {
+	netobj cookie;
+	bool block;
+	bool exclusive;
+	struct nlm4_lock alock;
+};
+
+
+struct nlm4_testargs {
+	netobj cookie;
+	bool exclusive;
+	struct nlm4_lock alock;
+};
+
+
+struct nlm4_unlockargs {
+	netobj cookie;
+	struct nlm4_lock alock;
+};
+
+enum fsh4_mode {
+	fsm_DN = 0,        /*  deny none  */
+	fsm_DR = 1,        /*  deny read  */
+	fsm_DW = 2,        /*  deny write  */
+	fsm_DRW = 3        /*  deny read/write  */
+};
+
+enum fsh4_access {
+	fsa_NONE = 0, /* for completeness */
+	fsa_R = 1, /* read-only */
+	fsa_W = 2, /* write-only */
+	fsa_RW = 3 /* read/write */
+};
+
+struct nlm4_share {
+	string      caller_name<LM_MAXSTRLEN>;
+	netobj      fh;
+	netobj      oh;
+	fsh4_mode   mode;
+	fsh4_access access;
+};
+
+struct nlm4_shareargs {
+	netobj cookie;
+	nlm4_share share;     /*  actual share data  */
+	bool reclaim;        /*  used for recovering shares  */
+};
+
+
+struct nlm4_shareres {
+	netobj cookie;
+	nlm4_stats stat;
+	int32_t sequence;
+};
+
+struct nlm4_notify {
+	string name<LM_MAXNAMELEN>;
+	int64_t state;
+};
+
+
+program NLMPROG {
+	version NLM4_VERS {
+		void NLMPROC4_NULL(void)				= 0;
+		nlm4_testres NLMPROC4_TEST(nlm4_testargs)		= 1;
+		nlm4_res NLMPROC4_LOCK(nlm4_lockargs)			= 2;
+		nlm4_res NLMPROC4_CANCEL(nlm4_cancargs)			= 3;
+		nlm4_res NLMPROC4_UNLOCK(nlm4_unlockargs)		= 4;
+		nlm4_res NLMPROC4_GRANTED(nlm4_testargs)		= 5;
+		void NLMPROC4_TEST_MSG(nlm4_testargs)			= 6;
+		void NLMPROC4_LOCK_MSG(nlm4_lockargs)			= 7;
+		void NLMPROC4_CANCEL_MSG(nlm4_cancargs)			= 8;
+		void NLMPROC4_UNLOCK_MSG(nlm4_unlockargs)		= 9;
+		void NLMPROC4_GRANTED_MSG(nlm4_testargs)		= 10;
+		void NLMPROC4_TEST_RES(nlm4_testres)			= 11;
+		void NLMPROC4_LOCK_RES(nlm4_res)			= 12;
+		void NLMPROC4_CANCEL_RES(nlm4_res)			= 13;
+		void NLMPROC4_UNLOCK_RES(nlm4_res)			= 14;
+		void NLMPROC4_GRANTED_RES(nlm4_res)			= 15;
+		nlm4_shareres NLMPROC4_SHARE(nlm4_shareargs)		= 20;
+		nlm4_shareres NLMPROC4_UNSHARE(nlm4_shareargs)		= 21;
+		nlm4_res NLMPROC4_NM_LOCK(nlm4_lockargs)		= 22;
+		void NLMPROC4_FREE_ALL(nlm4_notify)			= 23;
+	} = 4;
+} = 100021;
diff --git a/src/XDR/nlm4_xdr.c b/src/XDR/nlm4_xdr.c
new file mode 100644
index 0000000..126d542
--- /dev/null
+++ b/src/XDR/nlm4_xdr.c
@@ -0,0 +1,288 @@
+/*
+ * Please do not edit this file.
+ * It was generated using rpcgen.
+ */
+
+#include "nlm4.h"
+
+#if 0
+bool_t
+xdr_int32_t (XDR *xdrs, int32_t *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_int (xdrs, objp))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_uint32_t (XDR *xdrs, uint32_t *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_u_int (xdrs, objp))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_int64_t (XDR *xdrs, int64_t *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_quad_t (xdrs, objp))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_uint64_t (XDR *xdrs, uint64_t *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_u_quad_t (xdrs, objp))
+		 return FALSE;
+	return TRUE;
+}
+#endif
+
+bool_t
+xdr_nlm4_stats (XDR *xdrs, nlm4_stats *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_enum (xdrs, (enum_t *) objp))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_stat (XDR *xdrs, nlm4_stat *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_nlm4_stats (xdrs, &objp->stat))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_res (XDR *xdrs, nlm4_res *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_netobj (xdrs, &objp->cookie))
+		 return FALSE;
+	 if (!xdr_nlm4_stat (xdrs, &objp->stat))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_holder (XDR *xdrs, nlm4_holder *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_bool (xdrs, &objp->exclusive))
+		 return FALSE;
+	 if (!xdr_int32_t (xdrs, &objp->svid))
+		 return FALSE;
+	 if (!xdr_netobj (xdrs, &objp->oh))
+		 return FALSE;
+	 if (!xdr_uint64_t (xdrs, &objp->l_offset))
+		 return FALSE;
+	 if (!xdr_uint64_t (xdrs, &objp->l_len))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_testrply (XDR *xdrs, nlm4_testrply *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_nlm4_stats (xdrs, &objp->stat))
+		 return FALSE;
+	switch (objp->stat) {
+	case NLM4_DENIED:
+		 if (!xdr_nlm4_holder (xdrs, &objp->nlm4_testrply_u.holder))
+			 return FALSE;
+		break;
+	default:
+		break;
+	}
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_testres (XDR *xdrs, nlm4_testres *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_netobj (xdrs, &objp->cookie))
+		 return FALSE;
+	 if (!xdr_nlm4_testrply (xdrs, &objp->test_stat))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_lock (XDR *xdrs, nlm4_lock *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_string (xdrs, &objp->caller_name, LM_MAXSTRLEN))
+		 return FALSE;
+	 if (!xdr_netobj (xdrs, &objp->fh))
+		 return FALSE;
+	 if (!xdr_netobj (xdrs, &objp->oh))
+		 return FALSE;
+	 if (!xdr_int32_t (xdrs, &objp->svid))
+		 return FALSE;
+	 if (!xdr_uint64_t (xdrs, &objp->l_offset))
+		 return FALSE;
+	 if (!xdr_uint64_t (xdrs, &objp->l_len))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_lockargs (XDR *xdrs, nlm4_lockargs *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_netobj (xdrs, &objp->cookie))
+		 return FALSE;
+	 if (!xdr_bool (xdrs, &objp->block))
+		 return FALSE;
+	 if (!xdr_bool (xdrs, &objp->exclusive))
+		 return FALSE;
+	 if (!xdr_nlm4_lock (xdrs, &objp->alock))
+		 return FALSE;
+	 if (!xdr_bool (xdrs, &objp->reclaim))
+		 return FALSE;
+	 if (!xdr_int32_t (xdrs, &objp->state))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_cancargs (XDR *xdrs, nlm4_cancargs *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_netobj (xdrs, &objp->cookie))
+		 return FALSE;
+	 if (!xdr_bool (xdrs, &objp->block))
+		 return FALSE;
+	 if (!xdr_bool (xdrs, &objp->exclusive))
+		 return FALSE;
+	 if (!xdr_nlm4_lock (xdrs, &objp->alock))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_testargs (XDR *xdrs, nlm4_testargs *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_netobj (xdrs, &objp->cookie))
+		 return FALSE;
+	 if (!xdr_bool (xdrs, &objp->exclusive))
+		 return FALSE;
+	 if (!xdr_nlm4_lock (xdrs, &objp->alock))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_unlockargs (XDR *xdrs, nlm4_unlockargs *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_netobj (xdrs, &objp->cookie))
+		 return FALSE;
+	 if (!xdr_nlm4_lock (xdrs, &objp->alock))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_fsh4_mode (XDR *xdrs, fsh4_mode *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_enum (xdrs, (enum_t *) objp))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_fsh4_access (XDR *xdrs, fsh4_access *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_enum (xdrs, (enum_t *) objp))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_share (XDR *xdrs, nlm4_share *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_string (xdrs, &objp->caller_name, LM_MAXSTRLEN))
+		 return FALSE;
+	 if (!xdr_netobj (xdrs, &objp->fh))
+		 return FALSE;
+	 if (!xdr_netobj (xdrs, &objp->oh))
+		 return FALSE;
+	 if (!xdr_fsh4_mode (xdrs, &objp->mode))
+		 return FALSE;
+	 if (!xdr_fsh4_access (xdrs, &objp->access))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_shareargs (XDR *xdrs, nlm4_shareargs *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_netobj (xdrs, &objp->cookie))
+		 return FALSE;
+	 if (!xdr_nlm4_share (xdrs, &objp->share))
+		 return FALSE;
+	 if (!xdr_bool (xdrs, &objp->reclaim))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_shareres (XDR *xdrs, nlm4_shareres *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_netobj (xdrs, &objp->cookie))
+		 return FALSE;
+	 if (!xdr_nlm4_stats (xdrs, &objp->stat))
+		 return FALSE;
+	 if (!xdr_int32_t (xdrs, &objp->sequence))
+		 return FALSE;
+	return TRUE;
+}
+
+bool_t
+xdr_nlm4_notify (XDR *xdrs, nlm4_notify *objp)
+{
+	register int32_t *buf;
+
+	 if (!xdr_string (xdrs, &objp->name, LM_MAXNAMELEN))
+		 return FALSE;
+	 if (!xdr_int64_t (xdrs, &objp->state))
+		 return FALSE;
+	return TRUE;
+}
diff --git a/src/include/nfs_core.h b/src/include/nfs_core.h
index bd20ce7..a7830bc 100644
--- a/src/include/nfs_core.h
+++ b/src/include/nfs_core.h
@@ -261,10 +261,14 @@ typedef struct nfs_svc_data__
   int socket_nfs_tcp ;
   int socket_mnt_udp ;
   int socket_mnt_tcp ;
+  int socket_nlm_udp ;
+  int socket_nlm_tcp ;
   SVCXPRT * xprt_nfs_udp ;
   SVCXPRT * xprt_nfs_tcp ;
   SVCXPRT * xprt_mnt_udp ;
   SVCXPRT * xprt_mnt_tcp ;
+  SVCXPRT * xprt_nlm_udp ;
+  SVCXPRT * xprt_nlm_tcp ;
 } nfs_svc_data_t ;
 
 typedef struct nfs_worker_param__
@@ -301,8 +305,10 @@ typedef struct nfs_core_param__
 {
   unsigned short          nfs_port ;
   unsigned short          mnt_port ;
+  unsigned short	  nlm_port;
   unsigned int            nfs_program ;
   unsigned int            mnt_program ;
+  unsigned int            nlm_program ;
   unsigned int            nb_worker ;
   unsigned int            nb_max_concurrent_gc ;
   long                    core_dump_size ;
@@ -445,6 +451,7 @@ typedef struct nfs_request_data__
   SVCXPRT                   * tcp_xprt ;
   SVCXPRT                   * nfs_udp_xprt ;
   SVCXPRT                   * mnt_udp_xprt ;
+  SVCXPRT                   * nlm_udp_xprt ;
   SVCXPRT                   * xprt ;
   struct svc_req              req ;
   struct rpc_msg              msg ;
diff --git a/src/include/nlm4.h b/src/include/nlm4.h
new file mode 100644
index 0000000..1e568f0
--- /dev/null
+++ b/src/include/nlm4.h
@@ -0,0 +1,346 @@
+/*
+ * Please do not edit this file.
+ * It was generated using rpcgen.
+ */
+
+#ifndef _NLM4_H_RPCGEN
+#define _NLM4_H_RPCGEN
+
+#include <rpc/rpc.h>
+
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define LM_MAXSTRLEN 1024
+#define LM_MAXNAMELEN 1025
+#define MAXNETOBJ_SZ 1024
+
+typedef int int32_t;
+
+typedef u_int uint32_t;
+
+typedef quad_t int64_t;
+
+typedef u_quad_t uint64_t;
+
+enum nlm4_stats {
+	NLM4_GRANTED = 0,
+	NLM4_DENIED = 1,
+	NLM4_DENIED_NOLOCKS = 2,
+	NLM4_BLOCKED = 3,
+	NLM4_DENIED_GRACE_PERIOD = 4,
+	NLM4_DEADLCK = 5,
+	NLM4_ROFS = 6,
+	NLM4_STALE_FH = 7,
+	NLM4_FBIG = 8,
+	NLM4_FAILED = 9,
+};
+typedef enum nlm4_stats nlm4_stats;
+
+struct nlm4_stat {
+	nlm4_stats stat;
+};
+typedef struct nlm4_stat nlm4_stat;
+
+struct nlm4_res {
+	netobj cookie;
+	nlm4_stat stat;
+};
+typedef struct nlm4_res nlm4_res;
+
+struct nlm4_holder {
+	bool_t exclusive;
+	int32_t svid;
+	netobj oh;
+	uint64_t l_offset;
+	uint64_t l_len;
+};
+typedef struct nlm4_holder nlm4_holder;
+
+struct nlm4_testrply {
+	nlm4_stats stat;
+	union {
+		struct nlm4_holder holder;
+	} nlm4_testrply_u;
+};
+typedef struct nlm4_testrply nlm4_testrply;
+
+struct nlm4_testres {
+	netobj cookie;
+	nlm4_testrply test_stat;
+};
+typedef struct nlm4_testres nlm4_testres;
+
+struct nlm4_lock {
+	char *caller_name;
+	netobj fh;
+	netobj oh;
+	int32_t svid;
+	uint64_t l_offset;
+	uint64_t l_len;
+};
+typedef struct nlm4_lock nlm4_lock;
+
+struct nlm4_lockargs {
+	netobj cookie;
+	bool_t block;
+	bool_t exclusive;
+	struct nlm4_lock alock;
+	bool_t reclaim;
+	int32_t state;
+};
+typedef struct nlm4_lockargs nlm4_lockargs;
+
+struct nlm4_cancargs {
+	netobj cookie;
+	bool_t block;
+	bool_t exclusive;
+	struct nlm4_lock alock;
+};
+typedef struct nlm4_cancargs nlm4_cancargs;
+
+struct nlm4_testargs {
+	netobj cookie;
+	bool_t exclusive;
+	struct nlm4_lock alock;
+};
+typedef struct nlm4_testargs nlm4_testargs;
+
+struct nlm4_unlockargs {
+	netobj cookie;
+	struct nlm4_lock alock;
+};
+typedef struct nlm4_unlockargs nlm4_unlockargs;
+
+enum fsh4_mode {
+	fsm_DN = 0,
+	fsm_DR = 1,
+	fsm_DW = 2,
+	fsm_DRW = 3,
+};
+typedef enum fsh4_mode fsh4_mode;
+
+enum fsh4_access {
+	fsa_NONE = 0,
+	fsa_R = 1,
+	fsa_W = 2,
+	fsa_RW = 3,
+};
+typedef enum fsh4_access fsh4_access;
+
+struct nlm4_share {
+	char *caller_name;
+	netobj fh;
+	netobj oh;
+	fsh4_mode mode;
+	fsh4_access access;
+};
+typedef struct nlm4_share nlm4_share;
+
+struct nlm4_shareargs {
+	netobj cookie;
+	nlm4_share share;
+	bool_t reclaim;
+};
+typedef struct nlm4_shareargs nlm4_shareargs;
+
+struct nlm4_shareres {
+	netobj cookie;
+	nlm4_stats stat;
+	int32_t sequence;
+};
+typedef struct nlm4_shareres nlm4_shareres;
+
+struct nlm4_notify {
+	char *name;
+	int64_t state;
+};
+typedef struct nlm4_notify nlm4_notify;
+
+#define NLMPROG 100021
+#define NLM4_VERS 4
+
+#if defined(__STDC__) || defined(__cplusplus)
+#define NLMPROC4_NULL 0
+extern  void * nlmproc4_null_4(void *, CLIENT *);
+extern  void * nlmproc4_null_4_svc(void *, struct svc_req *);
+#define NLMPROC4_TEST 1
+extern  nlm4_testres * nlmproc4_test_4(nlm4_testargs *, CLIENT *);
+extern  nlm4_testres * nlmproc4_test_4_svc(nlm4_testargs *, struct svc_req *);
+#define NLMPROC4_LOCK 2
+extern  nlm4_res * nlmproc4_lock_4(nlm4_lockargs *, CLIENT *);
+extern  nlm4_res * nlmproc4_lock_4_svc(nlm4_lockargs *, struct svc_req *);
+#define NLMPROC4_CANCEL 3
+extern  nlm4_res * nlmproc4_cancel_4(nlm4_cancargs *, CLIENT *);
+extern  nlm4_res * nlmproc4_cancel_4_svc(nlm4_cancargs *, struct svc_req *);
+#define NLMPROC4_UNLOCK 4
+extern  nlm4_res * nlmproc4_unlock_4(nlm4_unlockargs *, CLIENT *);
+extern  nlm4_res * nlmproc4_unlock_4_svc(nlm4_unlockargs *, struct svc_req *);
+#define NLMPROC4_GRANTED 5
+extern  nlm4_res * nlmproc4_granted_4(nlm4_testargs *, CLIENT *);
+extern  nlm4_res * nlmproc4_granted_4_svc(nlm4_testargs *, struct svc_req *);
+#define NLMPROC4_TEST_MSG 6
+extern  void * nlmproc4_test_msg_4(nlm4_testargs *, CLIENT *);
+extern  void * nlmproc4_test_msg_4_svc(nlm4_testargs *, struct svc_req *);
+#define NLMPROC4_LOCK_MSG 7
+extern  void * nlmproc4_lock_msg_4(nlm4_lockargs *, CLIENT *);
+extern  void * nlmproc4_lock_msg_4_svc(nlm4_lockargs *, struct svc_req *);
+#define NLMPROC4_CANCEL_MSG 8
+extern  void * nlmproc4_cancel_msg_4(nlm4_cancargs *, CLIENT *);
+extern  void * nlmproc4_cancel_msg_4_svc(nlm4_cancargs *, struct svc_req *);
+#define NLMPROC4_UNLOCK_MSG 9
+extern  void * nlmproc4_unlock_msg_4(nlm4_unlockargs *, CLIENT *);
+extern  void * nlmproc4_unlock_msg_4_svc(nlm4_unlockargs *, struct svc_req *);
+#define NLMPROC4_GRANTED_MSG 10
+extern  void * nlmproc4_granted_msg_4(nlm4_testargs *, CLIENT *);
+extern  void * nlmproc4_granted_msg_4_svc(nlm4_testargs *, struct svc_req *);
+#define NLMPROC4_TEST_RES 11
+extern  void * nlmproc4_test_res_4(nlm4_testres *, CLIENT *);
+extern  void * nlmproc4_test_res_4_svc(nlm4_testres *, struct svc_req *);
+#define NLMPROC4_LOCK_RES 12
+extern  void * nlmproc4_lock_res_4(nlm4_res *, CLIENT *);
+extern  void * nlmproc4_lock_res_4_svc(nlm4_res *, struct svc_req *);
+#define NLMPROC4_CANCEL_RES 13
+extern  void * nlmproc4_cancel_res_4(nlm4_res *, CLIENT *);
+extern  void * nlmproc4_cancel_res_4_svc(nlm4_res *, struct svc_req *);
+#define NLMPROC4_UNLOCK_RES 14
+extern  void * nlmproc4_unlock_res_4(nlm4_res *, CLIENT *);
+extern  void * nlmproc4_unlock_res_4_svc(nlm4_res *, struct svc_req *);
+#define NLMPROC4_GRANTED_RES 15
+extern  void * nlmproc4_granted_res_4(nlm4_res *, CLIENT *);
+extern  void * nlmproc4_granted_res_4_svc(nlm4_res *, struct svc_req *);
+#define NLMPROC4_SHARE 20
+extern  nlm4_shareres * nlmproc4_share_4(nlm4_shareargs *, CLIENT *);
+extern  nlm4_shareres * nlmproc4_share_4_svc(nlm4_shareargs *, struct svc_req *);
+#define NLMPROC4_UNSHARE 21
+extern  nlm4_shareres * nlmproc4_unshare_4(nlm4_shareargs *, CLIENT *);
+extern  nlm4_shareres * nlmproc4_unshare_4_svc(nlm4_shareargs *, struct svc_req *);
+#define NLMPROC4_NM_LOCK 22
+extern  nlm4_res * nlmproc4_nm_lock_4(nlm4_lockargs *, CLIENT *);
+extern  nlm4_res * nlmproc4_nm_lock_4_svc(nlm4_lockargs *, struct svc_req *);
+#define NLMPROC4_FREE_ALL 23
+extern  void * nlmproc4_free_all_4(nlm4_notify *, CLIENT *);
+extern  void * nlmproc4_free_all_4_svc(nlm4_notify *, struct svc_req *);
+extern int nlmprog_4_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
+
+#else /* K&R C */
+#define NLMPROC4_NULL 0
+extern  void * nlmproc4_null_4();
+extern  void * nlmproc4_null_4_svc();
+#define NLMPROC4_TEST 1
+extern  nlm4_testres * nlmproc4_test_4();
+extern  nlm4_testres * nlmproc4_test_4_svc();
+#define NLMPROC4_LOCK 2
+extern  nlm4_res * nlmproc4_lock_4();
+extern  nlm4_res * nlmproc4_lock_4_svc();
+#define NLMPROC4_CANCEL 3
+extern  nlm4_res * nlmproc4_cancel_4();
+extern  nlm4_res * nlmproc4_cancel_4_svc();
+#define NLMPROC4_UNLOCK 4
+extern  nlm4_res * nlmproc4_unlock_4();
+extern  nlm4_res * nlmproc4_unlock_4_svc();
+#define NLMPROC4_GRANTED 5
+extern  nlm4_res * nlmproc4_granted_4();
+extern  nlm4_res * nlmproc4_granted_4_svc();
+#define NLMPROC4_TEST_MSG 6
+extern  void * nlmproc4_test_msg_4();
+extern  void * nlmproc4_test_msg_4_svc();
+#define NLMPROC4_LOCK_MSG 7
+extern  void * nlmproc4_lock_msg_4();
+extern  void * nlmproc4_lock_msg_4_svc();
+#define NLMPROC4_CANCEL_MSG 8
+extern  void * nlmproc4_cancel_msg_4();
+extern  void * nlmproc4_cancel_msg_4_svc();
+#define NLMPROC4_UNLOCK_MSG 9
+extern  void * nlmproc4_unlock_msg_4();
+extern  void * nlmproc4_unlock_msg_4_svc();
+#define NLMPROC4_GRANTED_MSG 10
+extern  void * nlmproc4_granted_msg_4();
+extern  void * nlmproc4_granted_msg_4_svc();
+#define NLMPROC4_TEST_RES 11
+extern  void * nlmproc4_test_res_4();
+extern  void * nlmproc4_test_res_4_svc();
+#define NLMPROC4_LOCK_RES 12
+extern  void * nlmproc4_lock_res_4();
+extern  void * nlmproc4_lock_res_4_svc();
+#define NLMPROC4_CANCEL_RES 13
+extern  void * nlmproc4_cancel_res_4();
+extern  void * nlmproc4_cancel_res_4_svc();
+#define NLMPROC4_UNLOCK_RES 14
+extern  void * nlmproc4_unlock_res_4();
+extern  void * nlmproc4_unlock_res_4_svc();
+#define NLMPROC4_GRANTED_RES 15
+extern  void * nlmproc4_granted_res_4();
+extern  void * nlmproc4_granted_res_4_svc();
+#define NLMPROC4_SHARE 20
+extern  nlm4_shareres * nlmproc4_share_4();
+extern  nlm4_shareres * nlmproc4_share_4_svc();
+#define NLMPROC4_UNSHARE 21
+extern  nlm4_shareres * nlmproc4_unshare_4();
+extern  nlm4_shareres * nlmproc4_unshare_4_svc();
+#define NLMPROC4_NM_LOCK 22
+extern  nlm4_res * nlmproc4_nm_lock_4();
+extern  nlm4_res * nlmproc4_nm_lock_4_svc();
+#define NLMPROC4_FREE_ALL 23
+extern  void * nlmproc4_free_all_4();
+extern  void * nlmproc4_free_all_4_svc();
+extern int nlmprog_4_freeresult ();
+#endif /* K&R C */
+
+/* the xdr functions */
+
+#if defined(__STDC__) || defined(__cplusplus)
+extern  bool_t xdr_int32_t (XDR *, int32_t*);
+extern  bool_t xdr_uint32_t (XDR *, uint32_t*);
+extern  bool_t xdr_int64_t (XDR *, int64_t*);
+extern  bool_t xdr_uint64_t (XDR *, uint64_t*);
+extern  bool_t xdr_nlm4_stats (XDR *, nlm4_stats*);
+extern  bool_t xdr_nlm4_stat (XDR *, nlm4_stat*);
+extern  bool_t xdr_nlm4_res (XDR *, nlm4_res*);
+extern  bool_t xdr_nlm4_holder (XDR *, nlm4_holder*);
+extern  bool_t xdr_nlm4_testrply (XDR *, nlm4_testrply*);
+extern  bool_t xdr_nlm4_testres (XDR *, nlm4_testres*);
+extern  bool_t xdr_nlm4_lock (XDR *, nlm4_lock*);
+extern  bool_t xdr_nlm4_lockargs (XDR *, nlm4_lockargs*);
+extern  bool_t xdr_nlm4_cancargs (XDR *, nlm4_cancargs*);
+extern  bool_t xdr_nlm4_testargs (XDR *, nlm4_testargs*);
+extern  bool_t xdr_nlm4_unlockargs (XDR *, nlm4_unlockargs*);
+extern  bool_t xdr_fsh4_mode (XDR *, fsh4_mode*);
+extern  bool_t xdr_fsh4_access (XDR *, fsh4_access*);
+extern  bool_t xdr_nlm4_share (XDR *, nlm4_share*);
+extern  bool_t xdr_nlm4_shareargs (XDR *, nlm4_shareargs*);
+extern  bool_t xdr_nlm4_shareres (XDR *, nlm4_shareres*);
+extern  bool_t xdr_nlm4_notify (XDR *, nlm4_notify*);
+
+#else /* K&R C */
+extern bool_t xdr_int32_t ();
+extern bool_t xdr_uint32_t ();
+extern bool_t xdr_int64_t ();
+extern bool_t xdr_uint64_t ();
+extern bool_t xdr_nlm4_stats ();
+extern bool_t xdr_nlm4_stat ();
+extern bool_t xdr_nlm4_res ();
+extern bool_t xdr_nlm4_holder ();
+extern bool_t xdr_nlm4_testrply ();
+extern bool_t xdr_nlm4_testres ();
+extern bool_t xdr_nlm4_lock ();
+extern bool_t xdr_nlm4_lockargs ();
+extern bool_t xdr_nlm4_cancargs ();
+extern bool_t xdr_nlm4_testargs ();
+extern bool_t xdr_nlm4_unlockargs ();
+extern bool_t xdr_fsh4_mode ();
+extern bool_t xdr_fsh4_access ();
+extern bool_t xdr_nlm4_share ();
+extern bool_t xdr_nlm4_shareargs ();
+extern bool_t xdr_nlm4_shareres ();
+extern bool_t xdr_nlm4_notify ();
+
+#endif /* K&R C */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* !_NLM4_H_RPCGEN */
diff --git a/src/support/nfs_read_conf.c b/src/support/nfs_read_conf.c
index b4240be..5addc33 100644
--- a/src/support/nfs_read_conf.c
+++ b/src/support/nfs_read_conf.c
@@ -364,6 +364,10 @@ int nfs_read_core_conf( config_file_t          in_config,
         {
           pparam->mnt_program = atoi( key_value ) ;
         }
+      else if( !strcasecmp( key_name, "NLM_Program" ) )
+        {
+          pparam->nlm_program = atoi( key_value ) ;
+        }
       else if( !strcasecmp( key_name, "Core_Dump_Size" ) ) 
         {
           pparam->core_dump_size = atol( key_value ) ;

