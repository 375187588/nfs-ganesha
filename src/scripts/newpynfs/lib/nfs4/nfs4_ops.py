# Generated by ops_gen.py on Fri Jan 25 14:59:49 2008
from nfs4_const import *
from nfs4_type import *

class NFS4Operations:

    def access_op(self, access):
        args = ACCESS4args(access)
        return nfs_argop4(argop=OP_ACCESS, opaccess=args)

    def close_op(self, seqid, open_stateid):
        args = CLOSE4args(seqid, open_stateid)
        return nfs_argop4(argop=OP_CLOSE, opclose=args)

    def commit_op(self, offset, count):
        args = COMMIT4args(offset, count)
        return nfs_argop4(argop=OP_COMMIT, opcommit=args)

    def create_op(self, objtype, objname, createattrs):
        args = CREATE4args(objtype, objname, createattrs)
        return nfs_argop4(argop=OP_CREATE, opcreate=args)

    def delegpurge_op(self, clientid):
        args = DELEGPURGE4args(clientid)
        return nfs_argop4(argop=OP_DELEGPURGE, opdelegpurge=args)

    def delegreturn_op(self, deleg_stateid):
        args = DELEGRETURN4args(deleg_stateid)
        return nfs_argop4(argop=OP_DELEGRETURN, opdelegreturn=args)

    def getattr_op(self, attr_request):
        args = GETATTR4args(attr_request)
        return nfs_argop4(argop=OP_GETATTR, opgetattr=args)

    def getfh_op(self):
        return nfs_argop4(argop=OP_GETFH)

    def link_op(self, newname):
        args = LINK4args(newname)
        return nfs_argop4(argop=OP_LINK, oplink=args)

    def lock_op(self, locktype, reclaim, offset, length, locker):
        args = LOCK4args(locktype, reclaim, offset, length, locker)
        return nfs_argop4(argop=OP_LOCK, oplock=args)

    def lockt_op(self, locktype, offset, length, owner):
        args = LOCKT4args(locktype, offset, length, owner)
        return nfs_argop4(argop=OP_LOCKT, oplockt=args)

    def locku_op(self, locktype, seqid, lock_stateid, offset, length):
        args = LOCKU4args(locktype, seqid, lock_stateid, offset, length)
        return nfs_argop4(argop=OP_LOCKU, oplocku=args)

    def lookup_op(self, objname):
        args = LOOKUP4args(objname)
        return nfs_argop4(argop=OP_LOOKUP, oplookup=args)

    def lookupp_op(self):
        return nfs_argop4(argop=OP_LOOKUPP)

    def nverify_op(self, obj_attributes):
        args = NVERIFY4args(obj_attributes)
        return nfs_argop4(argop=OP_NVERIFY, opnverify=args)

    def open_op(self, seqid, share_access, share_deny, owner, openhow, claim):
        args = OPEN4args(seqid, share_access, share_deny, owner, openhow, claim)
        return nfs_argop4(argop=OP_OPEN, opopen=args)

    def openattr_op(self, createdir):
        args = OPENATTR4args(createdir)
        return nfs_argop4(argop=OP_OPENATTR, opopenattr=args)

    def open_confirm_op(self, open_stateid, seqid):
        args = OPEN_CONFIRM4args(open_stateid, seqid)
        return nfs_argop4(argop=OP_OPEN_CONFIRM, opopen_confirm=args)

    def open_downgrade_op(self, open_stateid, seqid, share_access, share_deny):
        args = OPEN_DOWNGRADE4args(open_stateid, seqid, share_access, share_deny)
        return nfs_argop4(argop=OP_OPEN_DOWNGRADE, opopen_downgrade=args)

    def putfh_op(self, object):
        args = PUTFH4args(object)
        return nfs_argop4(argop=OP_PUTFH, opputfh=args)

    def putpubfh_op(self):
        return nfs_argop4(argop=OP_PUTPUBFH)

    def putrootfh_op(self):
        return nfs_argop4(argop=OP_PUTROOTFH)

    def read_op(self, stateid, offset, count):
        args = READ4args(stateid, offset, count)
        return nfs_argop4(argop=OP_READ, opread=args)

    def readdir_op(self, cookie, cookieverf, dircount, maxcount, attr_request):
        args = READDIR4args(cookie, cookieverf, dircount, maxcount, attr_request)
        return nfs_argop4(argop=OP_READDIR, opreaddir=args)

    def readlink_op(self):
        return nfs_argop4(argop=OP_READLINK)

    def remove_op(self, target):
        args = REMOVE4args(target)
        return nfs_argop4(argop=OP_REMOVE, opremove=args)

    def rename_op(self, oldname, newname):
        args = RENAME4args(oldname, newname)
        return nfs_argop4(argop=OP_RENAME, oprename=args)

    def renew_op(self, clientid):
        args = RENEW4args(clientid)
        return nfs_argop4(argop=OP_RENEW, oprenew=args)

    def restorefh_op(self):
        return nfs_argop4(argop=OP_RESTOREFH)

    def savefh_op(self):
        return nfs_argop4(argop=OP_SAVEFH)

    def secinfo_op(self, name):
        args = SECINFO4args(name)
        return nfs_argop4(argop=OP_SECINFO, opsecinfo=args)

    def setattr_op(self, stateid, obj_attributes):
        args = SETATTR4args(stateid, obj_attributes)
        return nfs_argop4(argop=OP_SETATTR, opsetattr=args)

    def setclientid_op(self, client, callback, callback_ident):
        args = SETCLIENTID4args(client, callback, callback_ident)
        return nfs_argop4(argop=OP_SETCLIENTID, opsetclientid=args)

    def setclientid_confirm_op(self, clientid, setclientid_confirm):
        args = SETCLIENTID_CONFIRM4args(clientid, setclientid_confirm)
        return nfs_argop4(argop=OP_SETCLIENTID_CONFIRM, opsetclientid_confirm=args)

    def verify_op(self, obj_attributes):
        args = VERIFY4args(obj_attributes)
        return nfs_argop4(argop=OP_VERIFY, opverify=args)

    def write_op(self, stateid, offset, stable, data):
        args = WRITE4args(stateid, offset, stable, data)
        return nfs_argop4(argop=OP_WRITE, opwrite=args)

    def release_lockowner_op(self, lock_owner):
        args = RELEASE_LOCKOWNER4args(lock_owner)
        return nfs_argop4(argop=OP_RELEASE_LOCKOWNER, oprelease_lockowner=args)

    def illegal_op(self):
        return nfs_argop4(argop=OP_ILLEGAL)
