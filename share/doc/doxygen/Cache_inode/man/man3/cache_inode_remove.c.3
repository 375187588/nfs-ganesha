.TH "cache_inode_remove.c" 3 "15 Sep 2010" "Version 0.1" "Cache inode layer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cache_inode_remove.c \- 
.PP
Removes an entry of any type.  

.SH SYNOPSIS
.br
.PP
\fC#include 'LRU_List.h'\fP
.br
\fC#include 'log_macros.h'\fP
.br
\fC#include 'HashData.h'\fP
.br
\fC#include 'HashTable.h'\fP
.br
\fC#include 'fsal.h'\fP
.br
\fC#include 'cache_inode.h'\fP
.br
\fC#include 'cache_content.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include <unistd.h>\fP
.br
\fC#include <sys/types.h>\fP
.br
\fC#include <sys/param.h>\fP
.br
\fC#include <time.h>\fP
.br
\fC#include <pthread.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_is_dir_empty\fP (cache_entry_t *pentry)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_is_dir_empty_WithLock\fP (cache_entry_t *pentry)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_clean_internal\fP (cache_entry_t *to_remove_entry, hash_table_t *ht, cache_inode_client_t *pclient)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_remove_sw\fP (cache_entry_t *pentry, fsal_name_t *pnode_name, fsal_attrib_list_t *pattr, hash_table_t *ht, cache_inode_client_t *pclient, fsal_op_context_t *pcontext, cache_inode_status_t *pstatus, int use_mutex)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_remove_no_mutex\fP (cache_entry_t *pentry, fsal_name_t *pnode_name, fsal_attrib_list_t *pattr, hash_table_t *ht, cache_inode_client_t *pclient, fsal_op_context_t *pcontext, cache_inode_status_t *pstatus)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_remove\fP (cache_entry_t *pentry, fsal_name_t *pnode_name, fsal_attrib_list_t *pattr, hash_table_t *ht, cache_inode_client_t *pclient, fsal_op_context_t *pcontext, cache_inode_status_t *pstatus)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Removes an entry of any type. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
leibovic 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2006/01/31 10:18:58 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.32 
.RE
.PP

.PP
Definition in file \fBcache_inode_remove.c\fP.
.SH "Function Documentation"
.PP 
.SS "cache_inode_status_t cache_inode_clean_internal (cache_entry_t * to_remove_entry, hash_table_t * ht, cache_inode_client_t * pclient)"cache_inode_clean_internal: remove a pentry from cache and all LRUs, and release related resources.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] entry to be deleted from cache 
.br
\fIhash_table_t\fP [IN] The cache hash table 
.br
\fIpclient\fP [INOUT] ressource allocated by the client for the nfs management. 
.RE
.PP

.PP
Definition at line 128 of file cache_inode_remove.c.
.SS "cache_inode_status_t cache_inode_is_dir_empty (cache_entry_t * pentry)"cache_inode_is_dir_empty: checks if a directory is empty or not. No mutex management.
.PP
Checks if a directory is empty or not. No mutex management
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] entry to be checked (should be of type DIR_BEGINNING)
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_INODE_SUCCESS is directory is empty
.br
 
.PP
CACHE_INODE_BAD_TYPE is pentry is not of type DIR_BEGINNING
.br
 
.PP
CACHE_INODE_DIR_NOT_EMPTY if pentry is a non empty DIR_BEGINNING 
.RE
.PP

.PP
Definition at line 49 of file cache_inode_remove.c.
.SS "cache_inode_status_t cache_inode_is_dir_empty_WithLock (cache_entry_t * pentry)"cache_inode_is_dir_empty_WithLock: checks if a directory is empty or not, BUT has lock management.
.PP
Checks if a directory is empty or not, BUT has lock management.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] entry to be checked (should be of type DIR_BEGINNING)
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_INODE_SUCCESS is directory is empty
.br
 
.PP
CACHE_INODE_BAD_TYPE is pentry is not of type DIR_BEGINNING
.br
 
.PP
CACHE_INODE_DIR_NOT_EMPTY if pentry is a non empty DIR_BEGINNING 
.RE
.PP

.PP
Definition at line 109 of file cache_inode_remove.c.
.SS "cache_inode_status_t cache_inode_remove (cache_entry_t * pentry, fsal_name_t * pnode_name, fsal_attrib_list_t * pattr, hash_table_t * ht, cache_inode_client_t * pclient, fsal_op_context_t * pcontext, cache_inode_status_t * pstatus)"cache_inode_remove: removes a pentry addressed by its parent pentry and its FSAL name.
.PP
Removes a pentry addressed by its parent pentry and its FSAL name.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] entry for the parent directory to be managed. 
.br
\fIname\fP [IN] name of the entry that we are looking for in the cache. 
.br
\fIpattr\fP [OUT] attributes for the entry that we have found. 
.br
\fIht\fP [IN] hash table used for the cache, unused in this call. 
.br
\fIpclient\fP [INOUT] ressource allocated by the client for the nfs management. 
.br
\fIpcontext\fP [IN] FSAL credentials 
.br
\fIpstatus\fP [OUT] returned status.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_INODE_SUCCESS if operation is a success 
.br
 
.PP
CACHE_INODE_LRU_ERROR if allocation error occured when validating the entry 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP Parent entry 
.RE
.PP

.PP
Definition at line 677 of file cache_inode_remove.c.
.SS "cache_inode_status_t cache_inode_remove_no_mutex (cache_entry_t * pentry, fsal_name_t * pnode_name, fsal_attrib_list_t * pattr, hash_table_t * ht, cache_inode_client_t * pclient, fsal_op_context_t * pcontext, cache_inode_status_t * pstatus)"cache_inode_remove_no_mutex: removes a pentry addressed by its parent pentry and its FSAL name. No mutex management.
.PP
Removes a pentry addressed by its parent pentry and its FSAL name.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] entry for the parent directory to be managed. 
.br
\fIname\fP [IN] name of the entry that we are looking for in the cache. 
.br
\fIpattr\fP [OUT] attributes for the entry that we have found. 
.br
\fIht\fP [IN] hash table used for the cache, unused in this call. 
.br
\fIpclient\fP [INOUT] ressource allocated by the client for the nfs management. 
.br
\fIpcontext\fP [IN] FSAL credentials 
.br
\fIpstatus\fP [OUT] returned status.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_INODE_SUCCESS if operation is a success 
.br
 
.PP
CACHE_INODE_LRU_ERROR if allocation error occured when validating the entry 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP Parent entry 
.RE
.PP

.PP
Definition at line 647 of file cache_inode_remove.c.
.SS "cache_inode_status_t cache_inode_remove_sw (cache_entry_t * pentry, fsal_name_t * pnode_name, fsal_attrib_list_t * pattr, hash_table_t * ht, cache_inode_client_t * pclient, fsal_op_context_t * pcontext, cache_inode_status_t * pstatus, int use_mutex)"cache_inode_remove_sw: removes a pentry addressed by its parent pentry and its FSAL name. Mutex management is switched.
.PP
Removes a pentry addressed by its parent pentry and its FSAL name. Mutex management is switched.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] entry for the parent directory to be managed. 
.br
\fIname\fP [IN] name of the entry that we are looking for in the cache. 
.br
\fIpattr\fP [OUT] attributes for the entry that we have found. 
.br
\fIht\fP [IN] hash table used for the cache, unused in this call. 
.br
\fIpclient\fP [INOUT] ressource allocated by the client for the nfs management. 
.br
\fIpcontext\fP [IN] FSAL credentials 
.br
\fIpstatus\fP [OUT] returned status.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_INODE_SUCCESS if operation is a success 
.br
 
.PP
CACHE_INODE_LRU_ERROR if allocation error occured when validating the entry 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP Parent entry 
.RE
.PP

.PP
Definition at line 247 of file cache_inode_remove.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for Cache inode layer from the source code.
