.TH "cache_inode_misc.c" 3 "15 Sep 2010" "Version 0.1" "Cache inode layer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cache_inode_misc.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'LRU_List.h'\fP
.br
\fC#include 'log_macros.h'\fP
.br
\fC#include 'HashData.h'\fP
.br
\fC#include 'HashTable.h'\fP
.br
\fC#include 'fsal.h'\fP
.br
\fC#include 'cache_inode.h'\fP
.br
\fC#include 'cache_content.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include <unistd.h>\fP
.br
\fC#include <sys/types.h>\fP
.br
\fC#include <sys/param.h>\fP
.br
\fC#include <time.h>\fP
.br
\fC#include <pthread.h>\fP
.br
\fC#include <string.h>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBXSTR\fP(s)   STR(s)"
.br
.ti -1c
.RI "#define \fBSTR\fP(s)   #s"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBcache_inode_compare_key_fsal\fP (hash_buffer_t *buff1, hash_buffer_t *buff2)"
.br
.ti -1c
.RI "int \fBcache_inode_fsaldata_2_key\fP (hash_buffer_t *pkey, cache_inode_fsal_data_t *pfsdata, cache_inode_client_t *pclient)"
.br
.ti -1c
.RI "void \fBcache_inode_release_fsaldata_key\fP (hash_buffer_t *pkey, cache_inode_client_t *pclient)"
.br
.ti -1c
.RI "cache_entry_t * \fBcache_inode_new_entry\fP (cache_inode_fsal_data_t *pfsdata, fsal_attrib_list_t *pfsal_attr, cache_inode_file_type_t type, cache_inode_create_arg_t *pcreate_arg, cache_entry_t *pentry_dir_prev, hash_table_t *ht, cache_inode_client_t *pclient, fsal_op_context_t *pcontext, unsigned int create_flag, cache_inode_status_t *pstatus)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_clean_entry\fP (cache_entry_t *pentry)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_error_convert\fP (fsal_status_t fsal_status)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_valid\fP (cache_entry_t *pentry, cache_inode_op_t op, cache_inode_client_t *pclient)"
.br
.ti -1c
.RI "void \fBcache_inode_get_attributes\fP (cache_entry_t *pentry, fsal_attrib_list_t *pattr)"
.br
.ti -1c
.RI "void \fBcache_inode_set_attributes\fP (cache_entry_t *pentry, fsal_attrib_list_t *pattr)"
.br
.ti -1c
.RI "cache_inode_file_type_t \fBcache_inode_fsal_type_convert\fP (fsal_nodetype_t type)"
.br
.ti -1c
.RI "fsal_handle_t * \fBcache_inode_get_fsal_handle\fP (cache_entry_t *pentry, cache_inode_status_t *pstatus)"
.br
.ti -1c
.RI "int \fBcache_inode_type_are_rename_compatible\fP (cache_entry_t *pentry_src, cache_entry_t *pentry_dest)"
.br
.ti -1c
.RI "void \fBcache_inode_mutex_destroy\fP (cache_entry_t *pentry)"
.br
.ti -1c
.RI "void \fBcache_inode_print_dir\fP (cache_entry_t *cache_entry_root)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_dump_content\fP (char *path, cache_entry_t *pentry)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_reload_content\fP (char *path, cache_entry_t *pentry)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_kill_entry\fP (cache_entry_t *pentry, hash_table_t *ht, cache_inode_client_t *pclient, cache_inode_status_t *pstatus)"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define STR(s)   #s"
.SS "#define XSTR(s)   STR(s)"
.SH "Function Documentation"
.PP 
.SS "cache_inode_status_t cache_inode_clean_entry (cache_entry_t * pentry)"cache_clean_entry: cleans an entry when it is garbagge collected.
.PP
Cleans an entry when it is garbagge collected.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [INOUT] the entry to be cleaned.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_INODE_SUCCESS in all cases. 
.RE
.PP

.PP
Definition at line 677 of file cache_inode_misc.c.
.SS "int cache_inode_compare_key_fsal (hash_buffer_t * buff1, hash_buffer_t * buff2)"cache_inode_compare_key_fsal: Compares two keys used in cache inode.
.PP
Compare two keys used in cache inode. These keys are basically made from FSAL related information.
.PP
\fBParameters:\fP
.RS 4
\fIbuff1\fP [IN] first key 
.br
\fIbuff2\fP [IN] second key 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if keys are the same, 1 otherwise
.RE
.PP
\fBSee also:\fP
.RS 4
FSAL_handlecmp 
.RE
.PP

.PP
Definition at line 77 of file cache_inode_misc.c.
.SS "cache_inode_status_t cache_inode_dump_content (char * path, cache_entry_t * pentry)"cache_inode_dump_content: dumps the content of a pentry to a local file (used for File Content index files).
.PP
Dumps the content of a pentry to a local file (used for File Content index files).
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP [IN] the full path to the file that will contain the data. 
.br
\fIpentry\fP [IN] the input pentry.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_INODE_BAD_TYPE if pentry is not related to a REGULAR_FILE 
.br
 
.PP
CACHE_INODE_INVALID_ARGUMENT if path is inconsistent 
.br
 
.PP
CACHE_INODE_SUCCESS if operation succeded. 
.RE
.PP

.PP
Definition at line 1278 of file cache_inode_misc.c.
.SS "cache_inode_status_t cache_inode_error_convert (fsal_status_t fsal_status)"cache_inode_error_convert: converts an FSAL error to the corresponding cache_inode error.
.PP
Converts an FSAL error to the corresponding cache_inode error.
.PP
\fBParameters:\fP
.RS 4
\fIfsal_status\fP [IN] fsal error to be converted.
.RE
.PP
\fBReturns:\fP
.RS 4
the result of the conversion. 
.RE
.PP

.PP
Definition at line 699 of file cache_inode_misc.c.
.SS "cache_inode_file_type_t cache_inode_fsal_type_convert (fsal_nodetype_t type)"cache_inode_fsal_type_convert: converts an FSAL type to the cache_inode type to be used.
.PP
Converts an FSAL type to the cache_inode type to be used.
.PP
\fBParameters:\fP
.RS 4
\fItype\fP [IN] the input FSAL type.
.RE
.PP
\fBReturns:\fP
.RS 4
the result of the conversion. 
.RE
.PP

.PP
Definition at line 1038 of file cache_inode_misc.c.
.SS "int cache_inode_fsaldata_2_key (hash_buffer_t * pkey, cache_inode_fsal_data_t * pfsdata, cache_inode_client_t * pclient)"cache_inode_fsaldata_2_key: builds a key from the FSAL data.
.PP
Builds a key from the FSAL data. If the key is used for reading and stay local to the function pclient can be NULL (psfsdata in the scope of the current calling routine is used). If the key must survive after the end of the calling routine, a new key is allocated and ressource in *pclient are used
.PP
\fBParameters:\fP
.RS 4
\fIpkey\fP [OUT] computed key 
.br
\fIpfsdata\fP [IN] FSAL data to be used to compute the key 
.br
\fIpclient\fP [INOUT] if NULL, pfsdata is used to build the key (that stay local), if not pool_key is used to allocate a new key 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if keys if successfully build, 1 otherwise 
.RE
.PP

.PP
Definition at line 121 of file cache_inode_misc.c.
.SS "void cache_inode_get_attributes (cache_entry_t * pentry, fsal_attrib_list_t * pattr)"cache_inode_get_attributes: gets the attributes cached in the entry.
.PP
Gets the attributes cached in the entry.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] the entry to deal with. 
.br
\fIpattr\fP [OUT] the attributes for this entry.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function). 
.RE
.PP

.PP
Definition at line 947 of file cache_inode_misc.c.
.SS "fsal_handle_t* cache_inode_get_fsal_handle (cache_entry_t * pentry, cache_inode_status_t * pstatus)"cache_inode_get_fsal_handle: gets the FSAL handle from a pentry.
.PP
Gets the FSAL handle from a pentry. The entry should be lock BEFORE this call is done (no lock is managed in this function). All DIR_BEGINNING and DIR_CONTINUE involved in the same dir_chain will return the same handle.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] the input pentry. 
.br
\fIpstatus\fP [OUT] the status for the extraction (If not CACHE_INODE_SUCCESS, there is an error).
.RE
.PP
\fBReturns:\fP
.RS 4
the result of the conversion. NULL shows an error. 
.RE
.PP

.PP
Definition at line 1093 of file cache_inode_misc.c.
.SS "cache_inode_status_t cache_inode_kill_entry (cache_entry_t * pentry, hash_table_t * ht, cache_inode_client_t * pclient, cache_inode_status_t * pstatus)"cache_inode_kill_entry: force removing an entry from the cache_inode. This is used in case of a 'stale' entry.
.PP
Force removing an entry from the cache_inode. This is used in case of a 'stale' entry.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] the input pentry (supposed to be staled). 
.br
\fIht\fP [INOUT] the related hash table for the cache_inode cache. 
.br
\fIpclient\fP [INOUT] related cache_inode client. 
.br
\fIpstatus\fP [OUT] status for the operation.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_INODE_BAD_TYPE if pentry is not related a REGULAR_FILE or DIR_BEGINNING 
.br
 
.PP
CACHE_INODE_SUCCESS if operation succeded. 
.RE
.PP

.PP
Definition at line 1467 of file cache_inode_misc.c.
.SS "void cache_inode_mutex_destroy (cache_entry_t * pentry)"cache_inode_mutex_destroy: destroys the pthread_mutex associated with a pentry when it is put back to the spool.
.PP
Destroys the pthread_mutex associated with a pentry when it is put back to the spool
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [INOUT] the input pentry.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function) 
.RE
.PP

.PP
Definition at line 1206 of file cache_inode_misc.c.
.SS "cache_entry_t* cache_inode_new_entry (cache_inode_fsal_data_t * pfsdata, fsal_attrib_list_t * pfsal_attr, cache_inode_file_type_t type, cache_inode_create_arg_t * pcreate_arg, cache_entry_t * pentry_dir_prev, hash_table_t * ht, cache_inode_client_t * pclient, fsal_op_context_t * pcontext, unsigned int create_flag, cache_inode_status_t * pstatus)"cache_inode_new_entry: adds a new entry to the cache_inode.
.PP
adds a new entry to the cache_inode. These function os used to allocate entries of any kind. Some parameter are meaningless for some types or used for others.
.PP
\fBParameters:\fP
.RS 4
\fIpfsdata\fP [IN] FSAL data for the entry to be created (used to build the key) 
.br
\fIpfsal_attr\fP [in] attributes for the entry (unused if value == NULL). Used for caching. 
.br
\fItype\fP [IN] type of the entry to be created. 
.br
\fIlink_content\fP [IN] if type == SYMBOLIC_LINK, this is the content of the link. Unused otherwise 
.br
\fIpentry_dir_prev\fP [IN] if type == DIR_CONTINUE, this is the previous entry in the dir_chain. Unused otherwise. 
.br
\fIht\fP [INOUT] hash table used for the cache. 
.br
\fIpclient\fP [INOUT]ressource allocated by the client for the nfs management. 
.br
\fIpcontext\fP [IN] FSAL credentials for the operation. 
.br
\fIcreate_flag\fP [IN] a flag which shows if the entry is newly created or not 
.br
\fIpstatus\fP [OUT] returned status.
.RE
.PP
\fBReturns:\fP
.RS 4
the same as *pstatus 
.RE
.PP

.PP
Definition at line 206 of file cache_inode_misc.c.
.SS "void cache_inode_print_dir (cache_entry_t * cache_entry_root)"cache_inode_print_dir: prints the content of a pentry that is a directory segment.
.PP
Prints the content of a pentry that is a DIR_BEGINNING or a DIR_CONTINUE. /!\\ This function is provided for debugging purpose only, it makes no sanity check on the arguments.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] the input pentry.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function) 
.RE
.PP

.PP
Definition at line 1223 of file cache_inode_misc.c.
.SS "void cache_inode_release_fsaldata_key (hash_buffer_t * pkey, cache_inode_client_t * pclient)"cache_inode_release_fsaldata_key: release a fsal key used to access the cache inode
.PP
Release a fsal key used to access the cache inode.
.PP
\fBParameters:\fP
.RS 4
\fIpkey\fP [IN] pointer to the key to be freed 
.br
\fIpclient\fP [INOUT] ressource allocated by the client for the nfs management.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function) 
.RE
.PP

.PP
Definition at line 175 of file cache_inode_misc.c.
.SS "cache_inode_status_t cache_inode_reload_content (char * path, cache_entry_t * pentry)"cache_inode_reload_content: reloads the content of a pentry from a local file (used File Content crash recovery).
.PP
Reloeads the content of a pentry from a local file (used File Content crash recovery).
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP [IN] the full path to the file that will contain the metadata. 
.br
\fIpentry\fP [IN] the input pentry.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_INODE_BAD_TYPE if pentry is not related to a REGULAR_FILE 
.br
 
.PP
CACHE_INODE_SUCCESS if operation succeded. 
.RE
.PP

.PP
Definition at line 1318 of file cache_inode_misc.c.
.SS "void cache_inode_set_attributes (cache_entry_t * pentry, fsal_attrib_list_t * pattr)"cache_inode_set_attributes: sets the attributes cached in the entry.
.PP
Sets the attributes cached in the entry.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [OUT] the entry to deal with. 
.br
\fIpattr\fP [IN] the attributes to be set for this entry.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function). 
.RE
.PP

.PP
Definition at line 994 of file cache_inode_misc.c.
.SS "int cache_inode_type_are_rename_compatible (cache_entry_t * pentry_src, cache_entry_t * pentry_dest)"cache_inode_type_are_rename_compatible: test if an existing entry could be scrtached during a rename.
.PP
test if an existing entry could be scrtached during a rename. No mutext management.
.PP
\fBParameters:\fP
.RS 4
\fIpentry_src\fP [IN] the source pentry (the one to be renamed) 
.br
\fIpentry_dest\fP [IN] the dest pentry (the one to be scratched during the rename)
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if rename if allowed (types are compatible), FALSE if not. 
.RE
.PP

.PP
Definition at line 1159 of file cache_inode_misc.c.
.SS "cache_inode_status_t cache_inode_valid (cache_entry_t * pentry, cache_inode_op_t op, cache_inode_client_t * pclient)"cache_inode_valid: validates an entry to update its garbagge status.
.PP
Validates an error to update its garbagge status. Entry is supposed to be locked when this function is called !!
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [INOUT] entry to be validated. 
.br
\fIop\fP [IN] can be set to CACHE_INODE_OP_GET or CACHE_INODE_OP_SET to show the type of operation done. 
.br
\fIpclient\fP [INOUT] ressource allocated by the client for the nfs management.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_INODE_SUCCESS if successful 
.br
 
.PP
CACHE_INODE_LRU_ERROR if an errorr occured in LRU management. 
.RE
.PP

.PP
Definition at line 798 of file cache_inode_misc.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for Cache inode layer from the source code.
