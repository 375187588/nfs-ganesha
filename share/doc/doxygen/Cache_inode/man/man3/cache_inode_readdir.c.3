.TH "cache_inode_readdir.c" 3 "31 Mar 2009" "Version 0.1" "Cache inode layer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cache_inode_readdir.c \- Reads the content of a directory.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include 'LRU_List.h'\fP
.br
\fC#include 'log_functions.h'\fP
.br
\fC#include 'HashData.h'\fP
.br
\fC#include 'HashTable.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include 'fsal.h'\fP
.br
\fC#include 'cache_inode.h'\fP
.br
\fC#include <unistd.h>\fP
.br
\fC#include <sys/types.h>\fP
.br
\fC#include <sys/param.h>\fP
.br
\fC#include <time.h>\fP
.br
\fC#include <pthread.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "cache_entry_t * \fBcache_inode_operate_cached_dirent\fP (cache_entry_t *pentry_parent, fsal_name_t *pname, fsal_name_t *newname, cache_inode_dirent_op_t dirent_op, cache_inode_status_t *pstatus)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_add_cached_dirent\fP (cache_entry_t *pentry_parent, fsal_name_t *pname, cache_entry_t *pentry_added, cache_entry_t **ppentry_next, hash_table_t *ht, cache_inode_client_t *pclient, fsal_op_context_t *pcontext, cache_inode_status_t *pstatus)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_invalidate_all_cached_dirent\fP (cache_entry_t *pentry_dir, hash_table_t *ht, cache_inode_client_t *pclient, cache_inode_status_t *pstatus)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_remove_cached_dirent\fP (cache_entry_t *pentry_parent, fsal_name_t *pname, hash_table_t *ht, cache_inode_client_t *pclient, cache_inode_status_t *pstatus)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_readdir_populate\fP (cache_entry_t *pentry_dir, hash_table_t *ht, cache_inode_client_t *pclient, fsal_op_context_t *pcontext, cache_inode_status_t *pstatus)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_inode_readdir\fP (cache_entry_t *dir_pentry, unsigned int cookie, unsigned int nbwanted, unsigned int *pnbfound, unsigned int *pend_cookie, cache_inode_endofdir_t *peod_met, cache_inode_dir_entry_t *dirent_array, unsigned int *cookie_array, hash_table_t *ht, cache_inode_client_t *pclient, fsal_op_context_t *pcontext, cache_inode_status_t *pstatus)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Reads the content of a directory. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
deniel 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2006/01/24 11:43:05 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.50 
.RE
.PP
\fBcache_inode_readdir.c\fP : Reads the content of a directory. Contains also the needed function for directory browsing. 
.PP
Definition in file \fBcache_inode_readdir.c\fP.
.SH "Function Documentation"
.PP 
.SS "cache_inode_status_t cache_inode_add_cached_dirent (cache_entry_t * pentry_parent, fsal_name_t * pname, cache_entry_t * pentry_added, cache_entry_t ** ppentry_next, hash_table_t * ht, cache_inode_client_t * pclient, fsal_op_context_t * pcontext, cache_inode_status_t * pstatus)"
.PP
cache_inode_add_cached_dirent: Adds a directory entry to a cached directory.
.PP
Adds a directory entry to a cached directory. This is use when creating a new entry through nfs and keep it to the cache. It also allocates and caches the entry. This function can be call iteratively, within a loop (like what is done in cache_inode_readdir_populate). In this case, pentry_parent should be set to the value returned in *pentry_next. This function should never be used for managing a junction.
.PP
\fBParameters:\fP
.RS 4
\fIpentry_parent\fP [INOUT] cache entry representing the directory to be managed. 
.br
\fIname\fP [IN] name of the entry to add. 
.br
\fIpentry_added\fP [IN] the pentry added to the dirent array 
.br
\fIpentry_next\fP [OUT] the next pentry to use for next call. 
.br
\fIht\fP [IN] hash table used for the cache, unused in this call. 
.br
\fIpclient\fP [INOUT] ressource allocated by the client for the nfs management. 
.br
\fIpstatus\fP [OUT] returned status.
.RE
.PP
\fBReturns:\fP
.RS 4
the DIR_CONTINUE or DIR_BEGINNING that contain this entry in its array_dirent
.br
 
.PP
NULL if failed, see *pstatus for error's meaning. 
.RE
.PP

.PP
Definition at line 348 of file cache_inode_readdir.c.
.SS "cache_inode_status_t cache_inode_invalidate_all_cached_dirent (cache_entry_t * pentry_dir, hash_table_t * ht, cache_inode_client_t * pclient, cache_inode_status_t * pstatus)"
.PP
Definition at line 623 of file cache_inode_readdir.c.
.SS "cache_entry_t* cache_inode_operate_cached_dirent (cache_entry_t * pentry_parent, fsal_name_t * pname, fsal_name_t * newname, cache_inode_dirent_op_t dirent_op, cache_inode_status_t * pstatus)"
.PP
cache_inode_operate_cached_dirent: locates a dirent in the cached dirent, and perform an operation on it.
.PP
Looks up for an dirent in the cached dirent. Thus function searches only in the entries listed in the dir_entries array. Some entries may be missing but existing and not be cached (it no readdir was never performed on the entry for example. This function provides a way to operate on the dirent.
.PP
\fBParameters:\fP
.RS 4
\fIpentry_parent\fP [IN] directory entry to be looked. 
.br
\fIname\fP [IN] name for the searched entry. 
.br
\fInewname\fP [IN] newname if function is used to rename a dirent 
.br
\fIdirent_op\fP [IN] operation (ADD, LOOKUP or REMOVE) to do on the dirent if found.  [OUT] returned status.
.RE
.PP
\fBReturns:\fP
.RS 4
the found entry if its exists and NULL if it is not in the dirent arrays. REMOVE always returns NULL. 
.RE
.PP

.PP
Definition at line 127 of file cache_inode_readdir.c.
.SS "cache_inode_status_t cache_inode_readdir (cache_entry_t * dir_pentry, unsigned int cookie, unsigned int nbwanted, unsigned int * pnbfound, unsigned int * pend_cookie, cache_inode_endofdir_t * peod_met, cache_inode_dir_entry_t * dirent_array, unsigned int * cookie_array, hash_table_t * ht, cache_inode_client_t * pclient, fsal_op_context_t * pcontext, cache_inode_status_t * pstatus)"
.PP
cache_inode_readdir: Reads partially a directory.
.PP
Looks up for a name in a directory indicated by a cached entry. The directory should have been cached before. This is the only function in the \fBcache_inode_readdir.c\fP file that manages MT safety on a dir chain.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] entry for the parent directory to be read. 
.br
\fIcookie\fP [IN] cookie for the readdir operation (basically the offset). 
.br
\fInbwanted\fP [IN] Maximum number of directory entries wanted. 
.br
\fIpeod_met\fP [OUT] A flag to know if end of directory was met during this call. 
.br
\fIdirent_array\fP [OUT] the resulting array of found directory entries. 
.br
\fIht\fP [IN] hash table used for the cache, unused in this call. 
.br
\fIpclient\fP [INOUT] ressource allocated by the client for the nfs management. 
.br
\fIpcontext\fP [IN] FSAL credentials 
.br
\fIpstatus\fP [OUT] returned status.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_INODE_SUCCESS if operation is a success 
.br
 
.PP
CACHE_INODE_BAD_TYPE if entry is not related to a directory
.br
 
.PP
CACHE_INODE_LRU_ERROR if allocation error occured when validating the entry 
.RE
.PP

.PP
Definition at line 1022 of file cache_inode_readdir.c.
.SS "cache_inode_status_t cache_inode_readdir_populate (cache_entry_t * pentry_dir, hash_table_t * ht, cache_inode_client_t * pclient, fsal_op_context_t * pcontext, cache_inode_status_t * pstatus)"
.PP
cache_inode_readdir_populate: fully reads a directory in FSAL and caches the related entries.
.PP
fully reads a directory in FSAL and caches the related entries. No MT safety managed here !!
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] entry for the parent directory to be read. This must be a DIR_BEGINNING 
.br
\fIht\fP [IN] hash table used for the cache, unused in this call. 
.br
\fIpclient\fP [INOUT] ressource allocated by the client for the nfs management. 
.br
\fIpcontext\fP [IN] FSAL credentials 
.br
\fIpstatus\fP [OUT] returned status. 
.RE
.PP

.PP
Definition at line 767 of file cache_inode_readdir.c.
.SS "cache_inode_status_t cache_inode_remove_cached_dirent (cache_entry_t * pentry_parent, fsal_name_t * pname, hash_table_t * ht, cache_inode_client_t * pclient, cache_inode_status_t * pstatus)"
.PP
cache_inode_remove_cached_dirent: Removes a directory entry to a cached directory.
.PP
Removes a directory entry to a cached directory. No MT safety managed here !!
.PP
\fBParameters:\fP
.RS 4
\fIpentry_parent\fP [INOUT] cache entry representing the directory to be managed. 
.br
\fIname\fP [IN] name of the entry to remove. 
.br
\fIht\fP [IN] hash table used for the cache, unused in this call. 
.br
\fIpclient\fP [INOUT] ressource allocated by the client for the nfs management. 
.br
\fIpstatus\fP [OUT] returned status.
.RE
.PP
\fBReturns:\fP
.RS 4
the same as *pstatus 
.RE
.PP

.PP
Definition at line 684 of file cache_inode_readdir.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for Cache inode layer from the source code.
