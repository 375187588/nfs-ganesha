<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="group__Cache__inode__gc__interface" kind="group">
    <compoundname>Cache_inode_gc_interface</compoundname>
    <title>Cache Inode GC interface.</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__Cache__inode__gc__interface_1ga69c5ffce5cdb7882aa52f72c665a2790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cache_inode_set_gc_policy</definition>
        <argsstring>(cache_inode_gc_policy_t policy)</argsstring>
        <name>cache_inode_set_gc_policy</name>
        <param>
          <type>cache_inode_gc_policy_t</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>cache_inode_set_gc_policy: Set the cache_inode garbage collecting policy.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>policy</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] policy to be set.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nothing (void function) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/Cache_inode/cache_inode_gc.c" line="533" bodyfile="/export/GANESHA/src/Cache_inode/cache_inode_gc.c" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="group__Cache__inode__gc__interface_1gab355d80bfbbb711ce94b45b7a3cc7df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cache_inode_gc_policy_t</type>
        <definition>cache_inode_gc_policy_t cache_inode_get_gc_policy</definition>
        <argsstring>(void)</argsstring>
        <name>cache_inode_get_gc_policy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>cache_inode_get_gc_policy: Set the cache_inode garbage collecting policy.</para><para><simplesect kind="return"><para>the current policy. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/Cache_inode/cache_inode_gc.c" line="545" bodyfile="/export/GANESHA/src/Cache_inode/cache_inode_gc.c" bodystart="544" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="group__Cache__inode__gc__interface_1ga2c07f75a5a24f519e42b34e8718bf79b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cache_inode_status_t</type>
        <definition>cache_inode_status_t cache_inode_gc</definition>
        <argsstring>(hash_table_t *ht, cache_inode_client_t *pclient, cache_inode_status_t *pstatus)</argsstring>
        <name>cache_inode_gc</name>
        <param>
          <type>hash_table_t *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>cache_inode_client_t *</type>
          <declname>pclient</declname>
        </param>
        <param>
          <type>cache_inode_status_t *</type>
          <declname>pstatus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>cache_inode_gc: Perform garbbage collection on the ressources managed by a client.</para><para>Perform garbbage collection on the ressources managed by a client.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>[INOUT] the hashtable used to stored the cache_inode entries. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pclient</parametername>
</parameternamelist>
<parameterdescription>
<para>[INOUT] ressource allocated by the client for the nfs management. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pstatus</parametername>
</parameternamelist>
<parameterdescription>
<para>[OUT] returned status.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CACHE_INODE_SUCCESS if operation is a success <linebreak/>
 </para><simplesectsep/><para>CACHE_INODE_LRU_ERROR if allocation error occured when validating the entry</para></simplesect>
<simplesect kind="see"><para>HashTable_GetSize </para><simplesectsep/><para>LRU_invalidate_by_function </para><simplesectsep/><para>LRU_gc_invalid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/Cache_inode/cache_inode_gc.c" line="570" bodyfile="/export/GANESHA/src/Cache_inode/cache_inode_gc.c" bodystart="567" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="group__Cache__inode__gc__interface_1ga04db13ebf2c5e871dda72102bf922d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cache_inode_gc_fd_func</definition>
        <argsstring>(LRU_entry_t *plru_entry, void *addparam)</argsstring>
        <name>cache_inode_gc_fd_func</name>
        <param>
          <type>LRU_entry_t *</type>
          <declname>plru_entry</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>addparam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/Cache_inode/cache_inode_gc.c" line="656" bodyfile="/export/GANESHA/src/Cache_inode/cache_inode_gc.c" bodystart="655" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="group__Cache__inode__gc__interface_1ga44c4a77761d87309e6230c59a8f7a656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cache_inode_status_t</type>
        <definition>cache_inode_status_t cache_inode_gc_fd</definition>
        <argsstring>(cache_inode_client_t *pclient, cache_inode_status_t *pstatus)</argsstring>
        <name>cache_inode_gc_fd</name>
        <param>
          <type>cache_inode_client_t *</type>
          <declname>pclient</declname>
        </param>
        <param>
          <type>cache_inode_status_t *</type>
          <declname>pstatus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Garbagge opened file descriptors </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/Cache_inode/cache_inode_gc.c" line="693" bodyfile="/export/GANESHA/src/Cache_inode/cache_inode_gc.c" bodystart="691" bodyend="725"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>These functions are used to run and configure the Cache inode GC </para>    </detaileddescription>
  </compounddef>
</doxygen>
