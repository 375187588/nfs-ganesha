<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.3.9.1">
  <compounddef id="Clnt__tcp_8c" kind="file">
    <compoundname>Clnt_tcp.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="yes">Rpc.h</includes>
    <includes local="no">sys/param.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">netdb.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="yes">Types.h</includes>
    <includes local="yes">stuff_alloc.h</includes>
    <includes local="yes">Auth.h</includes>
    <includes local="yes">Auth_none.h</includes>
    <incdepgraph>
      <node id="99">
        <label>Auth_none.h</label>
      </node>
      <node id="88">
        <label>stdlib.h</label>
      </node>
      <node id="95">
        <label>errno.h</label>
      </node>
      <node id="94">
        <label>netdb.h</label>
      </node>
      <node id="86">
        <label>Clnt_tcp.c</label>
        <link refid="Clnt_tcp.c"/>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>string.h</label>
      </node>
      <node id="90">
        <label>unistd.h</label>
      </node>
      <node id="92">
        <label>sys/param.h</label>
      </node>
      <node id="91">
        <label>Rpc.h</label>
      </node>
      <node id="96">
        <label>Types.h</label>
      </node>
      <node id="93">
        <label>sys/socket.h</label>
      </node>
      <node id="97">
        <label>stuff_alloc.h</label>
      </node>
      <node id="98">
        <label>Auth.h</label>
      </node>
      <node id="87">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structCt__data">Ct_data</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="Clnt__tcp_8c_1a0" prot="public" static="no">
        <name>NFDBITS</name>
        <initializer>(sizeof(long) * 8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="66" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Clnt__tcp_8c_1a1" prot="public" static="no">
        <name>MCALL_MSG_SIZE</name>
        <initializer>24</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="69" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Clnt__tcp_8c_1a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Readtcp</definition>
        <argsstring>()</argsstring>
        <name>Readtcp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="71"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Writetcp</definition>
        <argsstring>()</argsstring>
        <name>Writetcp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="72"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum Clnt_stat</type>
        <definition>enum Clnt_stat Clnttcp_call</definition>
        <argsstring>()</argsstring>
        <name>Clnttcp_call</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="74"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Clnttcp_abort</definition>
        <argsstring>()</argsstring>
        <name>Clnttcp_abort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="75" bodystart="353" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Clnttcp_geterr</definition>
        <argsstring>()</argsstring>
        <name>Clnttcp_geterr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="76"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Clnttcp_freeres</definition>
        <argsstring>()</argsstring>
        <name>Clnttcp_freeres</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="77"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Clnttcp_control</definition>
        <argsstring>()</argsstring>
        <name>Clnttcp_control</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="78"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a10" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Clnttcp_destroy</definition>
        <argsstring>()</argsstring>
        <name>Clnttcp_destroy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="79"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Client *</type>
        <definition>Client* Clnttcp_create</definition>
        <argsstring>(struct sockaddr_in *raddr, u_long prog, u_long vers, register int *sockp, u_int sendsz, u_int recvsz)</argsstring>
        <name>Clnttcp_create</name>
        <param>
          <type>struct sockaddr_in *</type>
          <declname>raddr</declname>
        </param>
        <param>
          <type>u_long</type>
          <declname>prog</declname>
        </param>
        <param>
          <type>u_long</type>
          <declname>vers</declname>
        </param>
        <param>
          <type>register int *</type>
          <declname>sockp</declname>
        </param>
        <param>
          <type>u_int</type>
          <declname>sendsz</declname>
        </param>
        <param>
          <type>u_int</type>
          <declname>recvsz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="117" bodystart="116" bodyend="233"/>
        <references refid="Auth__none_8c_1a10" compoundref="Auth__none_8c" startline="102" endline="126">Authnone_create</references>
        <references refid="structCt__data_1o4" compoundref="Clnt__tcp_8c" startline="95">Ct_data::ct_addr</references>
        <references refid="structCt__data_1o1" compoundref="Clnt__tcp_8c" startline="92">Ct_data::ct_closeit</references>
        <references refid="structCt__data_1o7" compoundref="Clnt__tcp_8c" startline="98">Ct_data::ct_mpos</references>
        <references refid="structCt__data_1o0" compoundref="Clnt__tcp_8c" startline="91">Ct_data::ct_sock</references>
        <references refid="structCt__data_1o2" compoundref="Clnt__tcp_8c" startline="93">Ct_data::ct_wait</references>
        <references refid="structCt__data_1o3" compoundref="Clnt__tcp_8c" startline="94">Ct_data::ct_waitset</references>
        <references refid="Clnt__raw_8c_1a0" compoundref="Clnt__raw_8c" startline="75">MCALL_MSG_SIZE</references>
        <references refid="Rpc__prot_8c_1a7" compoundref="Rpc__prot_8c" startline="143" endline="155">Xdr_callhdr</references>
        <references refid="Xdr__mem_8c_1a13" compoundref="Xdr__mem_8c" startline="90" endline="102">Xdrmem_create</references>
        <references refid="Xdr__rec_8c_1a16" compoundref="Xdr__rec_8c" startline="136" endline="199">Xdrrec_create</references>
        <referencedby refid="Clnt__generic_8c_1a0" compoundref="Clnt__generic_8c" startline="44" endline="100">Clnt_create</referencedby>
        <referencedby refid="onc__rpc__client_8c_1a11" compoundref="onc__rpc__client_8c" startline="56" endline="110">Creer_RPCClient</referencedby>
        <referencedby refid="Pm__getport_8c_1a2" compoundref="Pm__getport_8c" startline="53" endline="95">Pmap_getport</referencedby>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a12" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum Clnt_stat</type>
        <definition>enum Clnt_stat Clnttcp_call</definition>
        <argsstring>(register Client *h, u_long proc, Xdrproc_t xdr_args, caddr_t args_ptr, Xdrproc_t xdr_results, caddr_t results_ptr, struct timeval timeout)</argsstring>
        <name>Clnttcp_call</name>
        <param>
          <type>register Client *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>u_long</type>
          <declname>proc</declname>
        </param>
        <param>
          <type>Xdrproc_t</type>
          <declname>xdr_args</declname>
        </param>
        <param>
          <type>caddr_t</type>
          <declname>args_ptr</declname>
        </param>
        <param>
          <type>Xdrproc_t</type>
          <declname>xdr_results</declname>
        </param>
        <param>
          <type>caddr_t</type>
          <declname>results_ptr</declname>
        </param>
        <param>
          <type>struct timeval</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="237" bodystart="235" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a13" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Clnttcp_geterr</definition>
        <argsstring>(Client *h, struct Rpc_err *errp)</argsstring>
        <name>Clnttcp_geterr</name>
        <param>
          <type>Client *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>struct Rpc_err *</type>
          <declname>errp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="337" bodystart="336" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Clnttcp_freeres</definition>
        <argsstring>(Client *cl, Xdrproc_t xdr_res, caddr_t res_ptr)</argsstring>
        <name>Clnttcp_freeres</name>
        <param>
          <type>Client *</type>
          <declname>cl</declname>
        </param>
        <param>
          <type>Xdrproc_t</type>
          <declname>xdr_res</declname>
        </param>
        <param>
          <type>caddr_t</type>
          <declname>res_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="345" bodystart="344" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a15" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Clnttcp_control</definition>
        <argsstring>(Client *cl, int request, char *info)</argsstring>
        <name>Clnttcp_control</name>
        <param>
          <type>Client *</type>
          <declname>cl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>request</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="358" bodystart="357" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Clnttcp_destroy</definition>
        <argsstring>(Client *h)</argsstring>
        <name>Clnttcp_destroy</name>
        <param>
          <type>Client *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="380" bodystart="379" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Readtcp</definition>
        <argsstring>(register struct Ct_data *ct, caddr_t buf, register int len)</argsstring>
        <name>Readtcp</name>
        <param>
          <type>register struct <ref refid="structCt__data" kindref="compound">Ct_data</ref> *</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>caddr_t</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>register int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="398" bodystart="397" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="Clnt__tcp_8c_1a18" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Writetcp</definition>
        <argsstring>(struct Ct_data *ct, caddr_t buf, int len)</argsstring>
        <name>Writetcp</name>
        <param>
          <type>struct <ref refid="structCt__data" kindref="compound">Ct_data</ref> *</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>caddr_t</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="469" bodystart="468" bodyend="480"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="Clnt__tcp_8c_1a2" prot="public" static="yes" volatile="no" mutable="no">
        <type>Clnt_ops</type>
        <definition>struct Clnt_ops Tcp_ops</definition>
        <argsstring></argsstring>
        <name>Tcp_ops</name>
        <initializer> {
	Clnttcp_call,
	Clnttcp_abort,
	Clnttcp_geterr,
	Clnttcp_freeres,
	Clnttcp_destroy,
	Clnttcp_control
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c" line="88" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Sun<sp/>RPC<sp/>is<sp/>a<sp/>product<sp/>of<sp/>Sun<sp/>Microsystems,<sp/>Inc.<sp/>and<sp/>is<sp/>provided<sp/>for</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>unrestricted<sp/>use<sp/>provided<sp/>that<sp/>this<sp/>legend<sp/>is<sp/>included<sp/>on<sp/>all<sp/>tape</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>media<sp/>and<sp/>as<sp/>a<sp/>part<sp/>of<sp/>the<sp/>software<sp/>program<sp/>in<sp/>whole<sp/>or<sp/>part.<sp/><sp/>Users</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>may<sp/>copy<sp/>or<sp/>modify<sp/>Sun<sp/>RPC<sp/>without<sp/>charge,<sp/>but<sp/>are<sp/>not<sp/>authorized</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>license<sp/>or<sp/>distribute<sp/>it<sp/>to<sp/>anyone<sp/>else<sp/>except<sp/>as<sp/>part<sp/>of<sp/>a<sp/>product<sp/>or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>program<sp/>developed<sp/>by<sp/>the<sp/>user.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>SUN<sp/>RPC<sp/>IS<sp/>PROVIDED<sp/>AS<sp/>IS<sp/>WITH<sp/>NO<sp/>WARRANTIES<sp/>OF<sp/>ANY<sp/>KIND<sp/>INCLUDING<sp/>THE</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>DESIGN,<sp/>MERCHANTIBILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>PURPOSE,<sp/>OR<sp/>ARISING<sp/>FROM<sp/>A<sp/>COURSE<sp/>OF<sp/>DEALING,<sp/>USAGE<sp/>OR<sp/>TRADE<sp/>PRACTICE.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Sun<sp/>RPC<sp/>is<sp/>provided<sp/>with<sp/>no<sp/>support<sp/>and<sp/>without<sp/>any<sp/>obligation<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>part<sp/>of<sp/>Sun<sp/>Microsystems,<sp/>Inc.<sp/>to<sp/>assist<sp/>in<sp/>its<sp/>use,<sp/>correction,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>modification<sp/>or<sp/>enhancement.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>SUN<sp/>MICROSYSTEMS,<sp/>INC.<sp/>SHALL<sp/>HAVE<sp/>NO<sp/>LIABILITY<sp/>WITH<sp/>RESPECT<sp/>TO<sp/>THE</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>INFRINGEMENT<sp/>OF<sp/>COPYRIGHTS,<sp/>TRADE<sp/>SECRETS<sp/>OR<sp/>ANY<sp/>PATENTS<sp/>BY<sp/>SUN<sp/>RPC</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>OR<sp/>ANY<sp/>PART<sp/>THEREOF.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>In<sp/>no<sp/>event<sp/>will<sp/>Sun<sp/>Microsystems,<sp/>Inc.<sp/>be<sp/>liable<sp/>for<sp/>any<sp/>lost<sp/>revenue</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>or<sp/>profits<sp/>or<sp/>other<sp/>special,<sp/>indirect<sp/>and<sp/>consequential<sp/>damages,<sp/>even<sp/>if</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>Sun<sp/>has<sp/>been<sp/>advised<sp/>of<sp/>the<sp/>possibility<sp/>of<sp/>such<sp/>damages.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Sun<sp/>Microsystems,<sp/>Inc.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>2550<sp/>Garcia<sp/>Avenue</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>Mountain<sp/>View,<sp/>California<sp/><sp/>94043</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>clnt_tcp.c,<sp/>Implements<sp/>a<sp/>TCP/IP<sp/>based,<sp/>client<sp/>side<sp/>RPC.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1984,<sp/>Sun<sp/>Microsystems,<sp/>Inc.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>TCP<sp/>based<sp/>RPC<sp/>supports<sp/>&apos;batched<sp/>calls&apos;.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>A<sp/>sequence<sp/>of<sp/>calls<sp/>may<sp/>be<sp/>batched-up<sp/>in<sp/>a<sp/>send<sp/>buffer.<sp/><sp/>The<sp/>rpc<sp/>call</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>return<sp/>immediately<sp/>to<sp/>the<sp/>client<sp/>even<sp/>though<sp/>the<sp/>call<sp/>was<sp/>not<sp/>necessarily</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>sent.<sp/><sp/>The<sp/>batching<sp/>occurs<sp/>if<sp/>the<sp/>results&apos;<sp/>xdr<sp/>routine<sp/>is<sp/>NULL<sp/>(0)<sp/>AND</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>the<sp/>rpc<sp/>timeout<sp/>value<sp/>is<sp/>zero<sp/>(see<sp/>clnt.h,<sp/>rpc).</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>Clients<sp/>should<sp/>NOT<sp/>casually<sp/>batch<sp/>calls<sp/>that<sp/>in<sp/>fact<sp/>return<sp/>results;<sp/>that<sp/>is,</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>the<sp/>server<sp/>side<sp/>should<sp/>be<sp/>aware<sp/>that<sp/>a<sp/>call<sp/>is<sp/>batched<sp/>and<sp/>not<sp/>produce<sp/>any</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>return<sp/>message.<sp/><sp/>Batched<sp/>calls<sp/>that<sp/>produce<sp/>many<sp/>result<sp/>messages<sp/>can</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>deadlock<sp/>(netlock)<sp/>the<sp/>client<sp/>and<sp/>the<sp/>server....</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>Now<sp/>go<sp/>hang<sp/>yourself.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Rpc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/param.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netdb.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#include<sp/>&lt;rpc/pmap_clnt.h&gt;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stuff_alloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Auth.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Auth_none.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NFDBITS</highlight></codeline>
<codeline lineno="66" refid="Clnt__tcp_8c_1a0" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NFDBITS<sp/><sp/>(sizeof(long)<sp/>*<sp/>8)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>per<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="Clnt__tcp_8c_1a1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MCALL_MSG_SIZE<sp/>24</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Svc__tcp_8c_1a11" kindref="member">Readtcp</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Svc__tcp_8c_1a12" kindref="member">Writetcp</ref>();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>Clnt_stat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clnttcp_call();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clnttcp_abort();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clnttcp_geterr();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t<sp/><sp/><sp/><sp/>Clnttcp_freeres();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t<sp/><sp/>Clnttcp_control();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clnttcp_destroy();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Clnt_ops<sp/>Tcp_ops<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clnttcp_call,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clnttcp_abort,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clnttcp_geterr,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clnttcp_freeres,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clnttcp_destroy,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clnttcp_control</highlight></codeline>
<codeline lineno="88"><highlight class="normal">};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structCt__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>{</highlight></codeline>
<codeline lineno="91" refid="structCt__data_1o0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct_sock;</highlight></codeline>
<codeline lineno="92" refid="structCt__data_1o1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct_closeit;</highlight></codeline>
<codeline lineno="93" refid="structCt__data_1o2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/><sp/>ct_wait;</highlight></codeline>
<codeline lineno="94" refid="structCt__data_1o3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct_waitset;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wait<sp/>set<sp/>by<sp/>clnt_control?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="structCt__data_1o4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>ct_addr;<sp/></highlight></codeline>
<codeline lineno="96" refid="structCt__data_1o5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Rpc_err<sp/><sp/>ct_error;</highlight></codeline>
<codeline lineno="97" refid="structCt__data_1o6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct_mcall[MCALL_MSG_SIZE];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>marshalled<sp/>callmsg<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="structCt__data_1o7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct_mpos;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pos<sp/>after<sp/>marshal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="structCt__data_1o8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XDR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct_xdrs;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>Create<sp/>a<sp/>client<sp/>handle<sp/>for<sp/>a<sp/>tcp/ip<sp/>connection.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>If<sp/>*sockp&lt;0,<sp/>*sockp<sp/>is<sp/>set<sp/>to<sp/>a<sp/>newly<sp/>created<sp/>TCP<sp/>socket<sp/>and<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>connected<sp/>to<sp/>raddr.<sp/><sp/>If<sp/>*sockp<sp/>non-negative<sp/>then</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>raddr<sp/>is<sp/>ignored.<sp/><sp/>The<sp/>rpc/tcp<sp/>package<sp/>does<sp/>buffering</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>similar<sp/>to<sp/>stdio,<sp/>so<sp/>the<sp/>client<sp/>must<sp/>pick<sp/>send<sp/>and<sp/>receive<sp/>buffer<sp/>sizes,];</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>0<sp/>=&gt;<sp/>use<sp/>the<sp/>default.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>If<sp/>raddr-&gt;sin_port<sp/>is<sp/>0,<sp/>then<sp/>a<sp/>binder<sp/>on<sp/>the<sp/>remote<sp/>machine<sp/>is</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>consulted<sp/>for<sp/>the<sp/>right<sp/>port<sp/>number.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>NB:<sp/>*sockp<sp/>is<sp/>copied<sp/>into<sp/>a<sp/>private<sp/>area.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>NB:<sp/>It<sp/>is<sp/>the<sp/>clients<sp/>responsibility<sp/>to<sp/>close<sp/>*sockp.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>NB:<sp/>The<sp/>rpch-&gt;cl_auth<sp/>is<sp/>set<sp/>null<sp/>authentication.<sp/><sp/>Caller<sp/>may<sp/>wish<sp/>to<sp/>set<sp/>this</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>something<sp/>more<sp/>useful.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="Clnt__tcp_8c_1a11" refkind="member"><highlight class="normal">Client<sp/>*<sp/><ref refid="Clnt__tcp_8c_1a11" kindref="member">Clnttcp_create</ref>(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in<sp/>*<sp/>raddr,<sp/>u_long<sp/>prog,<sp/>u_long<sp/>vers,<sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>sockp,<sp/>u_int<sp/><sp/>sendsz,<sp/>u_int<sp/>recvsz)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Client<sp/>*h;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*ct<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>now;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Rpc_msg<sp/>call_msg;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/><sp/>=<sp/>(Client<sp/>*)mem_alloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*h));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*<sp/>tmplog<sp/>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>tmplog<sp/>=<sp/>fopen(<sp/>RPCSEC_GSS_LOG,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)fprintf(tmplog,<sp/></highlight><highlight class="stringliteral">&quot;Clnttcp_create:<sp/>out<sp/>of<sp/>memory\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(<sp/>tmplog<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpc_createerr.cf_stat<sp/>=<sp/>RPC_SYSTEMERROR;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpc_createerr.cf_error.re_errno<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fooy;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*)mem_alloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*ct));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*<sp/>tmplog<sp/>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>tmplog<sp/>=<sp/>fopen(<sp/>RPCSEC_GSS_LOG,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)fprintf(tmplog,<sp/></highlight><highlight class="stringliteral">&quot;Clnttcp_create:<sp/>out<sp/>of<sp/>memory\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(<sp/>tmplog<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpc_createerr.cf_stat<sp/>=<sp/>RPC_SYSTEMERROR;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpc_createerr.cf_error.re_errno<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fooy;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>no<sp/>port<sp/>number<sp/>given<sp/>ask<sp/>the<sp/>pmap<sp/>for<sp/>one</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raddr-&gt;sin_port<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_short<sp/>port;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((port<sp/>=<sp/>pmap_getport(raddr,<sp/>prog,<sp/>vers,<sp/>IPPROTO_TCP))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_free((caddr_t)ct,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structCt__data" kindref="compound">Ct_data</ref>));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_free((caddr_t)h,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Client));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((Client<sp/>*)NULL);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raddr-&gt;sin_port<sp/>=<sp/>htons(port);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>no<sp/>socket<sp/>given,<sp/>open<sp/>one</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*sockp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sockp<sp/>=<sp/>socket(AF_INET,<sp/>SOCK_STREAM,<sp/>IPPROTO_TCP);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)bindresvport(*sockp,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in<sp/>*)0);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*sockp<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(connect(*sockp,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)raddr,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*raddr))<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpc_createerr.cf_stat<sp/>=<sp/>RPC_SYSTEMERROR;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpc_createerr.cf_error.re_errno<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*sockp<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)close(*sockp);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fooy;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o1" kindref="member">ct_closeit</ref><sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o1" kindref="member">ct_closeit</ref><sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Set<sp/>up<sp/>private<sp/>data<sp/>struct</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o0" kindref="member">ct_sock</ref><sp/>=<sp/>*sockp;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o2" kindref="member">ct_wait</ref>.tv_usec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o3" kindref="member">ct_waitset</ref><sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o4" kindref="member">ct_addr</ref><sp/>=<sp/>*raddr;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Initialize<sp/>call<sp/>message</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)gettimeofday(&amp;now,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timezone<sp/>*)0);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_msg.rm_xid<sp/>=<sp/>getpid()<sp/>^<sp/>now.tv_sec<sp/>^<sp/>now.tv_usec;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_msg.rm_direction<sp/>=<sp/>CALL;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_msg.rm_call.cb_rpcvers<sp/>=<sp/>RPC_MSG_VERSION;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_msg.rm_call.cb_prog<sp/>=<sp/>prog;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_msg.rm_call.cb_vers<sp/>=<sp/>vers;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pre-serialize<sp/>the<sp/>staic<sp/>part<sp/>of<sp/>the<sp/>call<sp/>msg<sp/>and<sp/>stash<sp/>it<sp/>away</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Xdr__mem_8c_1a13" kindref="member">Xdrmem_create</ref>(&amp;(ct-&gt;ct_xdrs),<sp/>ct-&gt;ct_mcall,<sp/><ref refid="Clnt__raw_8c_1a0" kindref="member">MCALL_MSG_SIZE</ref>,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XDR_ENCODE);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="Rpc__prot_8c_1a7" kindref="member">Xdr_callhdr</ref>(&amp;(ct-&gt;ct_xdrs),<sp/>&amp;call_msg))<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct-&gt;ct_closeit)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)close(*sockp);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fooy;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o7" kindref="member">ct_mpos</ref><sp/>=<sp/>XDR_GETPOS(&amp;(ct-&gt;ct_xdrs));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XDR_DESTROY(&amp;(ct-&gt;ct_xdrs));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Create<sp/>a<sp/>client<sp/>handle<sp/>which<sp/>uses<sp/>xdrrec<sp/>for<sp/>serialization</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>authnone<sp/>for<sp/>authentication.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Xdr__rec_8c_1a16" kindref="member">Xdrrec_create</ref>(&amp;(ct-&gt;ct_xdrs),<sp/>sendsz,<sp/>recvsz,<sp/>(caddr_t)ct,<sp/>Readtcp,<sp/>Writetcp);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;cl_ops<sp/>=<sp/>&amp;Tcp_ops;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;cl_private<sp/>=<sp/>(caddr_t)<sp/>ct;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;cl_auth<sp/>=<sp/><ref refid="Auth__none_8c_1a10" kindref="member">Authnone_create</ref>();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(h);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">fooy:</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Something<sp/>goofed,<sp/>free<sp/>stuff<sp/>and<sp/>barf</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_free((caddr_t)ct,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structCt__data" kindref="compound">Ct_data</ref>));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_free((caddr_t)h,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Client));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((Client<sp/>*)NULL);</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Clnt_stat<sp/>Clnttcp_call(<sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>Client<sp/>*<sp/>h,<sp/>u_long<sp/>proc,<sp/>Xdrproc_t<sp/>xdr_args,<sp/>caddr_t<sp/><sp/>args_ptr,<sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xdrproc_t<sp/>xdr_results,<sp/>caddr_t<sp/>results_ptr,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timeval<sp/>timeout)</highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*ct<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*)<sp/>h-&gt;cl_private;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>XDR<sp/>*xdrs<sp/>=<sp/>&amp;(ct-&gt;<ref refid="structCt__data_1o8" kindref="member">ct_xdrs</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Rpc_msg<sp/>reply_msg;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_long<sp/>x_id;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*msg_x_id<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(ct-&gt;<ref refid="structCt__data_1o6" kindref="member">ct_mcall</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>yuk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>bool_t<sp/>shipnow;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>refreshes<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ct-&gt;<ref refid="structCt__data_1o3" kindref="member">ct_waitset</ref>)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o2" kindref="member">ct_wait</ref><sp/>=<sp/>timeout;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shipnow<sp/>=</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(xdr_results<sp/>==<sp/>(Xdrproc_t)0<sp/>&amp;&amp;<sp/>timeout.tv_sec<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>timeout.tv_usec<sp/>==<sp/>0)<sp/>?<sp/>FALSE<sp/>:<sp/>TRUE;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">call_again:</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrs-&gt;x_op<sp/>=<sp/>XDR_ENCODE;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>=<sp/>RPC_SUCCESS;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_id<sp/>=<sp/>ntohl(--(*msg_x_id));</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!<sp/>XDR_PUTBYTES(xdrs,<sp/>ct-&gt;<ref refid="structCt__data_1o6" kindref="member">ct_mcall</ref>,<sp/>ct-&gt;<ref refid="structCt__data_1o7" kindref="member">ct_mpos</ref>))<sp/>||</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!<sp/>XDR_PUTLONG(xdrs,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)&amp;proc))<sp/>||</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!<sp/>AUTH_MARSHALL(h-&gt;cl_auth,<sp/>xdrs))<sp/>||</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!<sp/>AUTH_WRAP(h-&gt;cl_auth,<sp/>xdrs,<sp/>xdr_args,<sp/>args_ptr)))</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>==<sp/>RPC_SUCCESS)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>=<sp/>RPC_CANTENCODEARGS;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(void)<ref refid="Xdr__rec_8c_1a27" kindref="member">Xdrrec_endofrecord</ref>(xdrs,<sp/>TRUE);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="Xdr__rec_8c_1a27" kindref="member">Xdrrec_endofrecord</ref>(xdrs,<sp/>shipnow))</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>=<sp/>RPC_CANTSEND);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>shipnow)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(RPC_SUCCESS);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Hack<sp/>to<sp/>provide<sp/>rpc-based<sp/>message<sp/>passing</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout.tv_sec<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>timeout.tv_usec<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>=<sp/>RPC_TIMEDOUT);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Keep<sp/>receiving<sp/>until<sp/>we<sp/>get<sp/>a<sp/>valid<sp/>transaction<sp/>id</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrs-&gt;x_op<sp/>=<sp/>XDR_DECODE;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(TRUE)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reply_msg.acpted_rply.ar_verf<sp/>=<sp/>_null_auth;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reply_msg.acpted_rply.ar_results.where<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reply_msg.acpted_rply.ar_results.proc<sp/>=<sp/>Xdr_void;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="Xdr__rec_8c_1a25" kindref="member">Xdrrec_skiprecord</ref>(xdrs))</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>decode<sp/>and<sp/>validate<sp/>the<sp/>response<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="Rpc__prot_8c_1a6" kindref="member">Xdr_replymsg</ref>(xdrs,<sp/>&amp;reply_msg))<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>==<sp/>RPC_SUCCESS)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reply_msg.rm_xid<sp/>==<sp/>x_id)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>process<sp/>header</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Rpc__prot_8c_1a10" kindref="member">_seterr_reply</ref>(&amp;reply_msg,<sp/>&amp;(ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>==<sp/>RPC_SUCCESS)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>AUTH_VALIDATE(h-&gt;cl_auth,<sp/>&amp;reply_msg.acpted_rply.ar_verf))<sp/></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>=<sp/>RPC_AUTHERROR;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_why<sp/>=<sp/>AUTH_INVALIDRESP;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>AUTH_UNWRAP(h-&gt;cl_auth,<sp/>xdrs,<sp/>xdr_results,<sp/>results_ptr))</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>==<sp/>RPC_SUCCESS)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>=<sp/>RPC_CANTDECODERES;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>verifier<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reply_msg.acpted_rply.ar_verf.oa_base<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrs-&gt;x_op<sp/>=<sp/>XDR_FREE;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<ref refid="Rpc__prot_8c_1a2" kindref="member">Xdr_opaque_auth</ref>(xdrs,<sp/>&amp;(reply_msg.acpted_rply.ar_verf));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>successful<sp/>completion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maybe<sp/>our<sp/>credentials<sp/>need<sp/>to<sp/>be<sp/>refreshed<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(refreshes--<sp/>&amp;&amp;<sp/>AUTH_REFRESH(h-&gt;cl_auth))</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>call_again;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>unsuccessful<sp/>completion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status);</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clnttcp_geterr(<sp/>Client<sp/>*<sp/>h,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>Rpc_err<sp/>*<sp/>errp)</highlight></codeline>
<codeline lineno="337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*ct<sp/>=</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*)<sp/>h-&gt;cl_private;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*errp<sp/>=<sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t<sp/>Clnttcp_freeres(<sp/>Client<sp/>*<sp/>cl,<sp/>Xdrproc_t<sp/>xdr_res,<sp/>caddr_t<sp/>res_ptr)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*ct<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*)cl-&gt;cl_private;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>XDR<sp/>*xdrs<sp/>=<sp/>&amp;(ct-&gt;<ref refid="structCt__data_1o8" kindref="member">ct_xdrs</ref>);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrs-&gt;x_op<sp/>=<sp/>XDR_FREE;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((*xdr_res)(xdrs,<sp/>res_ptr));</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clnttcp_abort()</highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t<sp/>Clnttcp_control(<sp/>Client<sp/>*<sp/>cl,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>request,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>info)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*ct<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*)cl-&gt;cl_private;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(request)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CLSET_TIMEOUT:</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o2" kindref="member">ct_wait</ref><sp/>=<sp/>*(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>*)info;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o3" kindref="member">ct_waitset</ref><sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CLGET_TIMEOUT:</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>*)info<sp/>=<sp/>ct-&gt;<ref refid="structCt__data_1o2" kindref="member">ct_wait</ref>;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CLGET_SERVER_ADDR:</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>*)info<sp/>=<sp/>ct-&gt;<ref refid="structCt__data_1o4" kindref="member">ct_addr</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(FALSE);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(TRUE);</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clnttcp_destroy(<sp/>Client<sp/>*<sp/>h<sp/>)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*ct<sp/>=</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*)<sp/>h-&gt;cl_private;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct-&gt;<ref refid="structCt__data_1o1" kindref="member">ct_closeit</ref>)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)close(ct-&gt;<ref refid="structCt__data_1o0" kindref="member">ct_sock</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XDR_DESTROY(&amp;(ct-&gt;<ref refid="structCt__data_1o8" kindref="member">ct_xdrs</ref>));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_free((caddr_t)ct,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structCt__data" kindref="compound">Ct_data</ref>));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_free((caddr_t)h,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Client));</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*<sp/>Interface<sp/>between<sp/>xdr<sp/>serializer<sp/>and<sp/>tcp<sp/>connection.</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>Behaves<sp/>like<sp/>the<sp/>system<sp/>calls,<sp/>read<sp/>&amp;<sp/>write,<sp/>but<sp/>keeps<sp/>some<sp/>error<sp/>state</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/>around<sp/>for<sp/>the<sp/>rpc<sp/>level.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="Svc__tcp_8c_1a11" kindref="member">Readtcp</ref>(<sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*<sp/>ct,<sp/>caddr_t<sp/>buf,<sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd_set<sp/>*fds,<sp/>readfds;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>start,<sp/>after,<sp/>duration,<sp/>delta,<sp/>tmp;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/>save_errno;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>fd_mask<sp/>;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct-&gt;ct_sock+1<sp/>&gt;<sp/>FD_SETSIZE)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes<sp/>=<sp/>howmany(ct-&gt;ct_sock+1,<sp/>NFDBITS)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(fd_mask);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fds<sp/>=<sp/>(fd_set<sp/>*)malloc(bytes);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fds<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(fds,<sp/>0,<sp/>bytes);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fds<sp/>=<sp/>&amp;readfds;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_ZERO(fds);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gettimeofday(&amp;start,<sp/>NULL);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>ct-&gt;<ref refid="structCt__data_1o2" kindref="member">ct_wait</ref>;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(TRUE)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>XXX<sp/>we<sp/>know<sp/>the<sp/>other<sp/>bits<sp/>are<sp/>still<sp/>clear<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_SET(ct-&gt;ct_sock,<sp/>fds);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>select(ct-&gt;ct_sock+1,<sp/>fds,<sp/>NULL,<sp/>NULL,<sp/>&amp;delta);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_errno<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gettimeofday(&amp;after,<sp/>NULL);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Timersub(&amp;start,<sp/>&amp;after,<sp/>&amp;duration);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Timersub(&amp;ct-&gt;ct_wait,<sp/>&amp;duration,<sp/>&amp;tmp);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta.tv_sec<sp/>&lt;<sp/>0<sp/>||<sp/>!Timerisset(&amp;delta))</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(r)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>=<sp/>RPC_TIMEDOUT;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fds<sp/>!=<sp/>&amp;readfds)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(fds);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-1:</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errno<sp/>==<sp/>EINTR)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>=<sp/>RPC_CANTRECV;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_errno<sp/>=<sp/>save_errno;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fds<sp/>!=<sp/>&amp;readfds)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(fds);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fds<sp/>!=<sp/>&amp;readfds)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(fds);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(len<sp/>=<sp/>read(ct-&gt;ct_sock,<sp/>buf,<sp/>len))<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>premature<sp/>eof<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_errno<sp/>=<sp/>ECONNRESET;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>=<sp/>RPC_CANTRECV;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>-1;<sp/><sp/></highlight><highlight class="comment">/*<sp/>it&apos;s<sp/>really<sp/>an<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-1:</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_errno<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>=<sp/>RPC_CANTRECV;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(len);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="Svc__tcp_8c_1a12" kindref="member">Writetcp</ref>(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structCt__data" kindref="compound">Ct_data</ref><sp/>*<sp/>ct,<sp/>caddr_t<sp/>buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>cnt;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>len;<sp/>cnt<sp/>&gt;<sp/>0;<sp/>cnt<sp/>-=<sp/>i,<sp/>buf<sp/>+=<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>=<sp/>write(ct-&gt;<ref refid="structCt__data_1o0" kindref="member">ct_sock</ref>,<sp/>buf,<sp/>cnt))<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_errno<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;<ref refid="structCt__data_1o5" kindref="member">ct_error</ref>.re_status<sp/>=<sp/>RPC_CANTSEND;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(len);</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Clnt_tcp.c"/>
  </compounddef>
</doxygen>
