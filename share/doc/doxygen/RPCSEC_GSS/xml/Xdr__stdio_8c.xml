<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.3.9.1">
  <compounddef id="Xdr__stdio_8c" kind="file">
    <compoundname>Xdr_stdio.c</compoundname>
    <includes local="yes">Types.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="yes">Xdr.h</includes>
    <incdepgraph>
      <node id="486">
        <label>Xdr.h</label>
      </node>
      <node id="483">
        <label>Xdr_stdio.c</label>
        <link refid="Xdr_stdio.c"/>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
        <childnode refid="486" relation="include">
        </childnode>
      </node>
      <node id="484">
        <label>Types.h</label>
      </node>
      <node id="485">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="Xdr__stdio_8c_1a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Xdrstdio_getlong</definition>
        <argsstring>()</argsstring>
        <name>Xdrstdio_getlong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="51"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Xdrstdio_putlong</definition>
        <argsstring>()</argsstring>
        <name>Xdrstdio_putlong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="52"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Xdrstdio_getbytes</definition>
        <argsstring>()</argsstring>
        <name>Xdrstdio_getbytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="53"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Xdrstdio_putbytes</definition>
        <argsstring>()</argsstring>
        <name>Xdrstdio_putbytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="54"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int</type>
        <definition>u_int Xdrstdio_getpos</definition>
        <argsstring>()</argsstring>
        <name>Xdrstdio_getpos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="55"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Xdrstdio_setpos</definition>
        <argsstring>()</argsstring>
        <name>Xdrstdio_setpos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="56"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t *</type>
        <definition>int32_t* Xdrstdio_inline</definition>
        <argsstring>()</argsstring>
        <name>Xdrstdio_inline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="57"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Xdrstdio_destroy</definition>
        <argsstring>()</argsstring>
        <name>Xdrstdio_destroy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="58"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Xdrstdio_create</definition>
        <argsstring>(XDR *xdrs, FILE *file, enum Xdr_op op)</argsstring>
        <name>Xdrstdio_create</name>
        <param>
          <type>XDR *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>enum Xdr_op</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="84" bodystart="80" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a10" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Xdrstdio_destroy</definition>
        <argsstring>(XDR *xdrs)</argsstring>
        <name>Xdrstdio_destroy</name>
        <param>
          <type>XDR *</type>
          <declname>xdrs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="100" bodystart="98" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Xdrstdio_getlong</definition>
        <argsstring>(XDR *xdrs, long *lp)</argsstring>
        <name>Xdrstdio_getlong</name>
        <param>
          <type>XDR *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>lp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="109" bodystart="106" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a12" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Xdrstdio_putlong</definition>
        <argsstring>(XDR *xdrs, long *lp)</argsstring>
        <name>Xdrstdio_putlong</name>
        <param>
          <type>XDR *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>lp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="122" bodystart="119" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a13" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Xdrstdio_getbytes</definition>
        <argsstring>(XDR *xdrs, caddr_t addr, u_int len)</argsstring>
        <name>Xdrstdio_getbytes</name>
        <param>
          <type>XDR *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>caddr_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>u_int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="136" bodystart="132" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Xdrstdio_putbytes</definition>
        <argsstring>(XDR *xdrs, caddr_t addr, u_int len)</argsstring>
        <name>Xdrstdio_putbytes</name>
        <param>
          <type>XDR *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>caddr_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>u_int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="148" bodystart="144" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a15" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int</type>
        <definition>u_int Xdrstdio_getpos</definition>
        <argsstring>(XDR *xdrs)</argsstring>
        <name>Xdrstdio_getpos</name>
        <param>
          <type>XDR *</type>
          <declname>xdrs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="158" bodystart="156" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t Xdrstdio_setpos</definition>
        <argsstring>(XDR *xdrs, u_int pos)</argsstring>
        <name>Xdrstdio_setpos</name>
        <param>
          <type>XDR *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>u_int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="167" bodystart="164" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="Xdr__stdio_8c_1a17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t *</type>
        <definition>int32_t* Xdrstdio_inline</definition>
        <argsstring>(XDR *xdrs, u_int len)</argsstring>
        <name>Xdrstdio_inline</name>
        <param>
          <type>XDR *</type>
          <declname>xdrs</declname>
        </param>
        <param>
          <type>u_int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="178" bodystart="175" bodyend="190"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="Xdr__stdio_8c_1a0" prot="public" static="yes" volatile="no" mutable="no">
        <type>Xdr_ops</type>
        <definition>struct Xdr_ops Xdrstdio_ops</definition>
        <argsstring></argsstring>
        <name>Xdrstdio_ops</name>
        <initializer> {
	Xdrstdio_getlong,	
	Xdrstdio_putlong,	
	Xdrstdio_getbytes,	
	Xdrstdio_putbytes,	
	Xdrstdio_getpos,	
	Xdrstdio_setpos,	
	Xdrstdio_inline,	
	Xdrstdio_destroy	
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c" line="72" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Sun<sp/>RPC<sp/>is<sp/>a<sp/>product<sp/>of<sp/>Sun<sp/>Microsystems,<sp/>Inc.<sp/>and<sp/>is<sp/>provided<sp/>for</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>unrestricted<sp/>use<sp/>provided<sp/>that<sp/>this<sp/>legend<sp/>is<sp/>included<sp/>on<sp/>all<sp/>tape</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>media<sp/>and<sp/>as<sp/>a<sp/>part<sp/>of<sp/>the<sp/>software<sp/>program<sp/>in<sp/>whole<sp/>or<sp/>part.<sp/><sp/>Users</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>may<sp/>copy<sp/>or<sp/>modify<sp/>Sun<sp/>RPC<sp/>without<sp/>charge,<sp/>but<sp/>are<sp/>not<sp/>authorized</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>license<sp/>or<sp/>distribute<sp/>it<sp/>to<sp/>anyone<sp/>else<sp/>except<sp/>as<sp/>part<sp/>of<sp/>a<sp/>product<sp/>or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>program<sp/>developed<sp/>by<sp/>the<sp/>user.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>SUN<sp/>RPC<sp/>IS<sp/>PROVIDED<sp/>AS<sp/>IS<sp/>WITH<sp/>NO<sp/>WARRANTIES<sp/>OF<sp/>ANY<sp/>KIND<sp/>INCLUDING<sp/>THE</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>DESIGN,<sp/>MERCHANTIBILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>PURPOSE,<sp/>OR<sp/>ARISING<sp/>FROM<sp/>A<sp/>COURSE<sp/>OF<sp/>DEALING,<sp/>USAGE<sp/>OR<sp/>TRADE<sp/>PRACTICE.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Sun<sp/>RPC<sp/>is<sp/>provided<sp/>with<sp/>no<sp/>support<sp/>and<sp/>without<sp/>any<sp/>obligation<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>part<sp/>of<sp/>Sun<sp/>Microsystems,<sp/>Inc.<sp/>to<sp/>assist<sp/>in<sp/>its<sp/>use,<sp/>correction,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>modification<sp/>or<sp/>enhancement.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>SUN<sp/>MICROSYSTEMS,<sp/>INC.<sp/>SHALL<sp/>HAVE<sp/>NO<sp/>LIABILITY<sp/>WITH<sp/>RESPECT<sp/>TO<sp/>THE</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>INFRINGEMENT<sp/>OF<sp/>COPYRIGHTS,<sp/>TRADE<sp/>SECRETS<sp/>OR<sp/>ANY<sp/>PATENTS<sp/>BY<sp/>SUN<sp/>RPC</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>OR<sp/>ANY<sp/>PART<sp/>THEREOF.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>In<sp/>no<sp/>event<sp/>will<sp/>Sun<sp/>Microsystems,<sp/>Inc.<sp/>be<sp/>liable<sp/>for<sp/>any<sp/>lost<sp/>revenue</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>or<sp/>profits<sp/>or<sp/>other<sp/>special,<sp/>indirect<sp/>and<sp/>consequential<sp/>damages,<sp/>even<sp/>if</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>Sun<sp/>has<sp/>been<sp/>advised<sp/>of<sp/>the<sp/>possibility<sp/>of<sp/>such<sp/>damages.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Sun<sp/>Microsystems,<sp/>Inc.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>2550<sp/>Garcia<sp/>Avenue</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>Mountain<sp/>View,<sp/>California<sp/><sp/>94043</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(LIBC_SCCS)<sp/>&amp;&amp;<sp/>!defined(lint)</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="client-gss_8c_1a12" kindref="member">rcsid</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;$OpenBSD:<sp/>xdr_stdio.c,v<sp/>1.4<sp/>1996/09/15<sp/>09:31:44<sp/>tholo<sp/>Exp<sp/>$&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LIBC_SCCS<sp/>and<sp/>not<sp/>lint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>xdr_stdio.c,<sp/>XDR<sp/>implementation<sp/>on<sp/>standard<sp/>i/o<sp/>file.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1984,<sp/>Sun<sp/>Microsystems,<sp/>Inc.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>This<sp/>set<sp/>of<sp/>routines<sp/>implements<sp/>a<sp/>XDR<sp/>on<sp/>a<sp/>stdio<sp/>stream.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>XDR_ENCODE<sp/>serializes<sp/>onto<sp/>the<sp/>stream,<sp/>XDR_DECODE<sp/>de-serializes</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>from<sp/>the<sp/>stream.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Xdr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__linux__</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;netinet/in.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t<sp/><sp/><sp/>Xdrstdio_getlong();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t<sp/><sp/><sp/>Xdrstdio_putlong();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t<sp/><sp/><sp/>Xdrstdio_getbytes();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t<sp/><sp/><sp/>Xdrstdio_putbytes();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>u_int<sp/><sp/><sp/><sp/>Xdrstdio_getpos();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t<sp/><sp/><sp/>Xdrstdio_setpos();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32_t<sp/>*Xdrstdio_inline();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>Xdrstdio_destroy();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>Ops<sp/>vector<sp/>for<sp/>stdio<sp/>type<sp/>XDR</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Xdr_ops<sp/><sp/><sp/>Xdrstdio_ops<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xdrstdio_getlong,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deseraialize<sp/>a<sp/>long<sp/>int<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xdrstdio_putlong,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>seraialize<sp/>a<sp/>long<sp/>int<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xdrstdio_getbytes,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deserialize<sp/>counted<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xdrstdio_putbytes,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>serialize<sp/>counted<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xdrstdio_getpos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>offset<sp/>in<sp/>the<sp/>stream<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xdrstdio_setpos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>offset<sp/>in<sp/>the<sp/>stream<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xdrstdio_inline,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>prime<sp/>stream<sp/>for<sp/>inline<sp/>macros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xdrstdio_destroy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>destroy<sp/>stream<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>a<sp/>stdio<sp/>xdr<sp/>stream.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>Sets<sp/>the<sp/>xdr<sp/>stream<sp/>handle<sp/>xdrs<sp/>for<sp/>use<sp/>on<sp/>the<sp/>stream<sp/>file.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>Operation<sp/>flag<sp/>is<sp/>set<sp/>to<sp/>op.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="Xdr__stdio_8c_1a9" refkind="member"><highlight class="normal"><ref refid="Xdr__stdio_8c_1a9" kindref="member">Xdrstdio_create</ref>(xdrs,<sp/>file,<sp/>op)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>XDR<sp/>*xdrs;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*file;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enum<sp/>Xdr_op<sp/>op;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrs-&gt;x_op<sp/>=<sp/>op;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrs-&gt;x_ops<sp/>=<sp/>&amp;Xdrstdio_ops;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrs-&gt;x_private<sp/>=<sp/>(caddr_t)file;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrs-&gt;x_handy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xdrs-&gt;x_base<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>Destroy<sp/>a<sp/>stdio<sp/>xdr<sp/>stream.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>Cleans<sp/>up<sp/>the<sp/>xdr<sp/>stream<sp/>handle<sp/>xdrs<sp/>previously<sp/>set<sp/>up<sp/>by<sp/>xdrstdio_create.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">Xdrstdio_destroy(xdrs)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>XDR<sp/>*xdrs;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)fflush((FILE<sp/>*)xdrs-&gt;x_private);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>xx<sp/>should<sp/>we<sp/>close<sp/>the<sp/>file<sp/>??<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t</highlight></codeline>
<codeline lineno="106"><highlight class="normal">Xdrstdio_getlong(xdrs,<sp/>lp)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XDR<sp/>*xdrs;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*lp;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread((caddr_t)lp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t),<sp/>1,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(FILE<sp/>*)xdrs-&gt;x_private)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(FALSE);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lp<sp/>=<sp/>(long)ntohl((int32_t)*lp);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(TRUE);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t</highlight></codeline>
<codeline lineno="119"><highlight class="normal">Xdrstdio_putlong(xdrs,<sp/>lp)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XDR<sp/>*xdrs;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*lp;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>mycopy<sp/>=<sp/>(long)htonl((int32_t)*lp);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite((caddr_t)&amp;mycopy,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t),<sp/>1,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(FILE<sp/>*)xdrs-&gt;x_private)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(FALSE);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(TRUE);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t</highlight></codeline>
<codeline lineno="132"><highlight class="normal">Xdrstdio_getbytes(xdrs,<sp/>addr,<sp/>len)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XDR<sp/>*xdrs;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caddr_t<sp/>addr;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_int<sp/>len;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((len<sp/>!=<sp/>0)<sp/>&amp;&amp;<sp/>(fread(addr,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)len,<sp/>1,<sp/>(FILE<sp/>*)xdrs-&gt;x_private)<sp/>!=<sp/>1))</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(FALSE);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(TRUE);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t</highlight></codeline>
<codeline lineno="144"><highlight class="normal">Xdrstdio_putbytes(xdrs,<sp/>addr,<sp/>len)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XDR<sp/>*xdrs;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caddr_t<sp/>addr;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_int<sp/>len;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((len<sp/>!=<sp/>0)<sp/>&amp;&amp;<sp/>(fwrite(addr,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)len,<sp/>1,<sp/>(FILE<sp/>*)xdrs-&gt;x_private)<sp/>!=<sp/>1))</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(FALSE);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(TRUE);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>u_int</highlight></codeline>
<codeline lineno="156"><highlight class="normal">Xdrstdio_getpos(xdrs)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XDR<sp/>*xdrs;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((u_int)<sp/>ftell((FILE<sp/>*)xdrs-&gt;x_private));</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bool_t</highlight></codeline>
<codeline lineno="164"><highlight class="normal">Xdrstdio_setpos(xdrs,<sp/>pos)<sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XDR<sp/>*xdrs;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_int<sp/>pos;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((fseek((FILE<sp/>*)xdrs-&gt;x_private,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)pos,<sp/>0)<sp/>&lt;<sp/>0)<sp/>?</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>:<sp/>TRUE);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ARGSUSED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32_t<sp/>*</highlight></codeline>
<codeline lineno="175"><highlight class="normal">Xdrstdio_inline(xdrs,<sp/>len)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XDR<sp/>*xdrs;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_int<sp/>len;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Must<sp/>do<sp/>some<sp/>work<sp/>to<sp/>implement<sp/>this:<sp/>must<sp/>insure</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>enough<sp/>data<sp/>in<sp/>the<sp/>underlying<sp/>stdio<sp/>buffer,</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>that<sp/>the<sp/>buffer<sp/>is<sp/>aligned<sp/>so<sp/>that<sp/>we<sp/>can<sp/>indirect<sp/>through<sp/>a</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>long<sp/>*,<sp/>and<sp/>stuff<sp/>this<sp/>pointer<sp/>in<sp/>xdrs-&gt;x_buf.<sp/><sp/>Doing</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>fread<sp/>or<sp/>fwrite<sp/>to<sp/>a<sp/>scratch<sp/>buffer<sp/>would<sp/>defeat</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>most<sp/>of<sp/>the<sp/>gains<sp/>to<sp/>be<sp/>had<sp/>here<sp/>and<sp/>require<sp/>storage</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>management<sp/>on<sp/>this<sp/>buffer,<sp/>so<sp/>we<sp/>don&apos;t<sp/>do<sp/>this.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(NULL);</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/opt/philippe/GANESHA/src/RPCSEC_GSS/Xdr_stdio.c"/>
  </compounddef>
</doxygen>
