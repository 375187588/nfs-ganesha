.TH "cache_content_misc.c" 3 "15 Sep 2010" "Version 0.1" "File Content layer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cache_content_misc.c \- 
.PP
Management of the file content cache: miscellaneous functions.  

.SH SYNOPSIS
.br
.PP
\fC#include 'fsal.h'\fP
.br
\fC#include 'LRU_List.h'\fP
.br
\fC#include 'log_macros.h'\fP
.br
\fC#include 'HashData.h'\fP
.br
\fC#include 'HashTable.h'\fP
.br
\fC#include 'cache_inode.h'\fP
.br
\fC#include 'cache_content.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include 'nfs_exports.h'\fP
.br
\fC#include <unistd.h>\fP
.br
\fC#include <sys/types.h>\fP
.br
\fC#include <sys/param.h>\fP
.br
\fC#include <time.h>\fP
.br
\fC#include <pthread.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <libgen.h>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBALPHABET_LEN\fP   16"
.br
.ti -1c
.RI "#define \fBPRIME_16BITS\fP   65521"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "short \fBHashFileID4\fP (u_int64_t fileid4)"
.br
.ti -1c
.RI "cache_content_status_t \fBcache_content_create_name\fP (char *path, cache_content_nametype_t type, fsal_op_context_t *pcontext, cache_entry_t *pentry_inode, cache_content_client_t *pclient)"
.br
.ti -1c
.RI "int \fBcache_content_get_export_id\fP (char *dirname)"
.br
.ti -1c
.RI "u_int64_t \fBcache_content_get_inum\fP (char *filename)"
.br
.ti -1c
.RI "int \fBcache_content_get_datapath\fP (char *basepath, u_int64_t inum, char *datapath)"
.br
.ti -1c
.RI "off_t \fBcache_content_recover_size\fP (char *basepath, u_int64_t inum)"
.br
.ti -1c
.RI "off_t \fBcache_content_get_cached_size\fP (cache_content_entry_t *pentry)"
.br
.ti -1c
.RI "cache_inode_status_t \fBcache_content_error_convert\fP (cache_content_status_t status)"
.br
.ti -1c
.RI "off_t \fBcache_content_fsal_seek_convert\fP (fsal_seek_t seek, cache_content_status_t *pstatus)"
.br
.ti -1c
.RI "size_t \fBcache_content_fsal_size_convert\fP (fsal_size_t size, cache_content_status_t *pstatus)"
.br
.ti -1c
.RI "cache_content_status_t \fBcache_content_prepare_directories\fP (exportlist_t *pexportlist, char *cache_dir, cache_content_status_t *pstatus)"
.br
.ti -1c
.RI "cache_content_status_t \fBcache_content_valid\fP (cache_content_entry_t *pentry, cache_inode_op_t op, cache_content_client_t *pclient)"
.br
.ti -1c
.RI "cache_content_status_t \fBcache_content_check_threshold\fP (char *datacache_path, unsigned int threshold_min, unsigned int threshold_max, int *p_bool_overflow, unsigned long *p_blocks_to_lwm)"
.br
.ti -1c
.RI "int \fBcache_content_local_cache_opendir\fP (char *cache_dir, cache_content_dirinfo_t *pdirectory)"
.br
.ti -1c
.RI "cache_content_status_t \fBcache_content_test_cached\fP (cache_entry_t *pentry_inode, cache_content_client_t *pclient, fsal_op_context_t *pcontext, cache_content_status_t *pstatus)"
.br
.ti -1c
.RI "int \fBcache_content_local_cache_dir_iter\fP (cache_content_dirinfo_t *directory, struct dirent *pdir_entry, unsigned int index, unsigned int mod)"
.br
.ti -1c
.RI "void \fBcache_content_local_cache_closedir\fP (cache_content_dirinfo_t *directory)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "unsigned int \fBcache_content_dir_errno\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Management of the file content cache: miscellaneous functions. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
leibovic 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2006/01/18 07:29:11 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.14 
.RE
.PP
\fBcache_content_misc.c\fP : Management of the file content cache, miscellaneous functions. 
.PP
Definition in file \fBcache_content_misc.c\fP.
.SH "Define Documentation"
.PP 
.SS "#define ALPHABET_LEN   16"
.SS "#define PRIME_16BITS   65521"
.SH "Function Documentation"
.PP 
.SS "cache_content_status_t cache_content_check_threshold (char * datacache_path, unsigned int threshold_min, unsigned int threshold_max, int * p_bool_overflow, unsigned long * p_blocks_to_lwm)"cache_content_check_threshold: check datacache filesystem's threshold.
.PP
\fBParameters:\fP
.RS 4
\fIdatacache_path\fP [IN] the datacache filesystem's path. 
.br
\fIthreshold_min\fP [IN] the low watermark for the filesystem (in percent). 
.br
\fIthreshold_max\fP [IN] the high watermark for the filesystem (in percent). 
.br
\fIp_bool_overflow\fP [OUT] boolean that indicates whether the FS overcomes the high watermark. 
.br
\fIp_blocks_to_lwm\fP [OUT] if bool_overflow is set to true, this indicates the number of blocks to be purged in order to reach the low watermark.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_CONTENT_SUCCESS if successful 
.br
 
.PP
CACHE_CONTENT_INVALID_ARGUMENT if some argument has an unexpected value
.br
 
.PP
CACHE_CONTENT_LOCAL_CACHE_ERROR if an error occured while getting informations from datacache filesystem. 
.RE
.PP

.PP
Definition at line 564 of file cache_content_misc.c.
.SS "cache_content_status_t cache_content_create_name (char * path, cache_content_nametype_t type, fsal_op_context_t * pcontext, cache_entry_t * pentry_inode, cache_content_client_t * pclient)"cache_content_create_name: Creates a name in the local fs for a cached entry.
.PP
Creates a name in the local fs for a cached entry and creates the directories that whil contain this file.
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP [OUT] buffer to be used for storing the name. 
.br
\fItype\fP [IN] type of pathname to be created. 
.br
\fIpentry_inode\fP [OUT] Entry in Cache inode layer related to the file content entry. 
.br
\fIpclient\fP [IN] resources allocated for the file content client.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_CONTENT_SUCCESS if operation is a success, other values show an error. 
.RE
.PP

.PP
Definition at line 112 of file cache_content_misc.c.
.SS "cache_inode_status_t cache_content_error_convert (cache_content_status_t status)"cache_content_error_convert: Converts a cache_content_status to a cache_inode_status.
.PP
Converts a cache_content_status to a cache_inode_status.
.PP
\fBParameters:\fP
.RS 4
\fIstatus\fP [IN] File content status to be converted.
.RE
.PP
\fBReturns:\fP
.RS 4
a cache_inode_status_t resulting from the conversion. 
.RE
.PP

.PP
Definition at line 349 of file cache_content_misc.c.
.SS "off_t cache_content_fsal_seek_convert (fsal_seek_t seek, cache_content_status_t * pstatus)"cache_content_fsal_seek_convert: converts a fsal_seek_t to unix offet.
.PP
Converts a fsal_seek_t to unix offet. Non absolulte fsal_seek_t will produce an error.
.PP
\fBParameters:\fP
.RS 4
\fIseek\fP [IN] FSAL Seek descriptor. 
.br
\fIpstatus\fP [OUT] pointer to the status.
.RE
.PP
\fBReturns:\fP
.RS 4
the converted value. 
.RE
.PP

.PP
Definition at line 407 of file cache_content_misc.c.
.SS "size_t cache_content_fsal_size_convert (fsal_size_t size, cache_content_status_t * pstatus)"cache_content_fsal_size_convert: converts a fsal_size_t to unix size.
.PP
Converts a fsal_seek_t to unix size.
.PP
\fBParameters:\fP
.RS 4
\fIseek\fP [IN] FSAL Seek descriptor. 
.br
\fIpstatus\fP [OUT] pointer to the status.
.RE
.PP
\fBReturns:\fP
.RS 4
the converted value. 
.RE
.PP

.PP
Definition at line 434 of file cache_content_misc.c.
.SS "off_t cache_content_get_cached_size (cache_content_entry_t * pentry)"cache_content_get_cached_size: recovers the size of a data cached file.
.PP
Recovers the size of a data cached file.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] related pentry
.RE
.PP
\fBReturns:\fP
.RS 4
the recovered size (as a off_t) or -1 is failed. 
.RE
.PP

.PP
Definition at line 319 of file cache_content_misc.c.
.SS "int cache_content_get_datapath (char * basepath, u_int64_t inum, char * datapath)"cache_content_get_datapath : recovers the path for a file of a specified inum.
.PP
\fBParameters:\fP
.RS 4
\fIbasepath\fP [IN] path to the root of the directory in the cache for the related export entry 
.br
\fIinum\fP [IN] inode number for the file whose size is to be recovered. 
.br
\fIpath\fP [OUT] the absolute path of the file (must be at least a MAXPATHLEN length string).
.RE
.PP
\fBReturns:\fP
.RS 4
0 if OK, or -1 is failed. 
.RE
.PP

.PP
Definition at line 256 of file cache_content_misc.c.
.SS "int cache_content_get_export_id (char * dirname)"cache_content_get_export_id: gets an export id from an export dirname.
.PP
Gets an export id from an export dirname.
.PP
\fBParameters:\fP
.RS 4
\fIdirname\fP [IN] The dirname for the export_id dirname.
.RE
.PP
\fBReturns:\fP
.RS 4
-1 if failed, the export_id if successfull. 
.RE
.PP

.PP
Definition at line 197 of file cache_content_misc.c.
.SS "u_int64_t cache_content_get_inum (char * filename)"cache_content_get_inum: gets an inode number fronm a cache filename.
.PP
Gets an inode number fronm a cache filename.
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP [IN] The filename to be parsed.
.RE
.PP
\fBReturns:\fP
.RS 4
0 if failed, the inum if successfull. 
.RE
.PP

.PP
Definition at line 221 of file cache_content_misc.c.
.SS "void cache_content_local_cache_closedir (cache_content_dirinfo_t * directory)"cache_content_local_cache_closedir: Close a local cache directory associated to an export entry.
.PP
\fBParameters:\fP
.RS 4
\fIdirectory[IN]\fP the handle to the directory to be closed
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function) 
.RE
.PP

.PP
Definition at line 950 of file cache_content_misc.c.
.SS "int cache_content_local_cache_dir_iter (cache_content_dirinfo_t * directory, struct dirent * pdir_entry, unsigned int index, unsigned int mod)"cache_content_local_cache_dir_iter: iterate on a local cache directory to get the entry one by one
.PP
\fBParameters:\fP
.RS 4
\fIdirectory\fP [IN] the directory to be read 
.br
\fIindex\fP [IN] thread index for multithreaded flushes (first has index 0) 
.br
\fImod\fP [IN] modulus for multithreaded flushes (number of threads) 
.br
\fIpdir_entry\fP [OUT] found dir_entry
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if OK, FALSE if NOK. 
.RE
.PP

.PP
Definition at line 746 of file cache_content_misc.c.
.SS "int cache_content_local_cache_opendir (char * cache_dir, cache_content_dirinfo_t * pdirectory)"cache_content_local_cache_opendir: Open a local cache directory associated to an export entry.
.PP
\fBParameters:\fP
.RS 4
\fIcache_dir\fP [IN] the path to the directory associated with the export entry 
.br
\fIpdirectory\fP [OUT] pointer to trhe openend directory
.RE
.PP
\fBReturns:\fP
.RS 4
the handle to the directory or NULL is failed 
.RE
.PP

.PP
Definition at line 651 of file cache_content_misc.c.
.SS "cache_content_status_t cache_content_prepare_directories (exportlist_t * pexportlist, char * cache_dir, cache_content_status_t * pstatus)"cache_content_prepare_directories: do the mkdir to set the data cache directories
.PP
do the mkdir to set the data cache directories.
.PP
\fBParameters:\fP
.RS 4
\fIpexportlist\fP [IN] export list 
.br
\fIpstatus\fP [OUT] pointer to the status.
.RE
.PP
\fBReturns:\fP
.RS 4
the status for the operation 
.RE
.PP

.PP
Definition at line 456 of file cache_content_misc.c.
.SS "off_t cache_content_recover_size (char * basepath, u_int64_t inum)"cache_content_recover_size: recovers the size of a data cached file.
.PP
Recovers the size of a data cached file.
.PP
\fBParameters:\fP
.RS 4
\fIbasepath\fP [IN] path to the root of the directory in the cache for the related export entry 
.br
\fIinum\fP [IN] inode number for the file whose size is to be recovered.
.RE
.PP
\fBReturns:\fP
.RS 4
the recovered size (as a off_t) or -1 is failed. 
.RE
.PP

.PP
Definition at line 286 of file cache_content_misc.c.
.SS "cache_content_status_t cache_content_test_cached (cache_entry_t * pentry_inode, cache_content_client_t * pclient, fsal_op_context_t * pcontext, cache_content_status_t * pstatus)"cache_content_test_cached: Tests if a given pentry_inode has already an associated data cache
.PP
Tests if a given pentry_inode has already an associated data cache. This is useful to recover data from a data cache built by a former server instance.
.PP
\fBParameters:\fP
.RS 4
\fIpentry_inode\fP [IN] entry in cache_inode layer for this file. 
.br
\fIpclient\fP [IN] ressource allocated by the client for the nfs management. 
.br
\fIpcontext\fP [IN] the related FSAL Context  [OUT] returned status.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_CONTENT_SUCCESS if entry is found, CACHE_CONTENT_NOT_FOUND if not found 
.RE
.PP

.PP
Definition at line 695 of file cache_content_misc.c.
.SS "cache_content_status_t cache_content_valid (cache_content_entry_t * pentry, cache_inode_op_t op, cache_content_client_t * pclient)"cache_content_valid: validates an entry to update its garbagge status.
.PP
Validates an error to update its garbagge status. Entry is supposed to be locked when this function is called !!
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [INOUT] entry to be validated. 
.br
\fIop\fP [IN] can be set to CACHE_INODE_OP_GET or CACHE_INODE_OP_SET to show the type of operation done. 
.br
\fIpclient\fP [INOUT] ressource allocated by the client for the nfs management.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_INODE_SUCCESS if successful 
.br
 
.PP
CACHE_INODE_LRU_ERROR if an errorr occured in LRU management. 
.RE
.PP

.PP
Definition at line 507 of file cache_content_misc.c.
.SS "short HashFileID4 (u_int64_t fileid4)"
.PP
Definition at line 81 of file cache_content_misc.c.
.SH "Variable Documentation"
.PP 
.SS "unsigned int \fBcache_content_dir_errno\fP"
.PP
Definition at line 75 of file cache_content_misc.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for File Content layer from the source code.
