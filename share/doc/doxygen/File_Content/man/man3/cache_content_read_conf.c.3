.TH "cache_content_read_conf.c" 3 "15 Sep 2010" "Version 0.1" "File Content layer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cache_content_read_conf.c \- 
.PP
Management of the file content cache: configuration file parsing.  

.SH SYNOPSIS
.br
.PP
\fC#include 'LRU_List.h'\fP
.br
\fC#include 'log_macros.h'\fP
.br
\fC#include 'HashData.h'\fP
.br
\fC#include 'HashTable.h'\fP
.br
\fC#include 'fsal.h'\fP
.br
\fC#include 'cache_inode.h'\fP
.br
\fC#include 'cache_content.h'\fP
.br
\fC#include 'config_parsing.h'\fP
.br
\fC#include <unistd.h>\fP
.br
\fC#include <sys/types.h>\fP
.br
\fC#include <sys/param.h>\fP
.br
\fC#include <time.h>\fP
.br
\fC#include <pthread.h>\fP
.br
\fC#include <string.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "cache_content_status_t \fBcache_content_read_conf_client_parameter\fP (config_file_t in_config, cache_content_client_parameter_t *pparam)"
.br
.ti -1c
.RI "void \fBcache_content_print_conf_client_parameter\fP (FILE *output, cache_content_client_parameter_t param)"
.br
.ti -1c
.RI "cache_content_status_t \fBcache_content_read_conf_gc_policy\fP (config_file_t in_config, cache_content_gc_policy_t *ppolicy)"
.br
.ti -1c
.RI "void \fBcache_content_print_conf_gc_policy\fP (FILE *output, cache_content_gc_policy_t gcpolicy)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "char \fBfcc_log_path\fP [MAXPATHLEN]"
.br
.ti -1c
.RI "int \fBfcc_debug_level\fP = -1"
.br
.in -1c
.SH "Detailed Description"
.PP 
Management of the file content cache: configuration file parsing. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
deniel 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2005/11/28 17:02:33 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.10 
.RE
.PP
\fBcache_content_read_conf.c\fP : Management of the file content cache: configuration file parsing. 
.PP
Definition in file \fBcache_content_read_conf.c\fP.
.SH "Function Documentation"
.PP 
.SS "void cache_content_print_conf_client_parameter (FILE * output, cache_content_client_parameter_t param)"cache_content_print_conf_client_parameter: prints the client parameter.
.PP
Prints the client parameters.
.PP
\fBParameters:\fP
.RS 4
\fIoutput\fP [IN] a descriptor to the IO for printing the data. 
.br
\fIparam\fP [IN] structure to be printed.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function). 
.RE
.PP

.PP
Definition at line 215 of file cache_content_read_conf.c.
.SS "void cache_content_print_conf_gc_policy (FILE * output, cache_content_gc_policy_t gcpolicy)"cache_content_print_gc_pol: prints the garbage collection policy.
.PP
Prints the garbage collection policy.
.PP
\fBParameters:\fP
.RS 4
\fIoutput\fP [IN] a descriptor to the IO for printing the data. 
.br
\fIparam\fP [IN] structure to be printed.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function). 
.RE
.PP

.PP
Definition at line 334 of file cache_content_read_conf.c.
.SS "cache_content_status_t cache_content_read_conf_client_parameter (config_file_t in_config, cache_content_client_parameter_t * pparam)"
.PP
\fBTodo\fP
.RS 4
: BUGAZOMEU: to be removed 
.RE
.PP
.PP
\fBTodo\fP
.RS 4
: BUGAZOMEU: to be removed 
.RE
.PP
.PP
\fBTodo\fP
.RS 4
: BUGAZOMEU: to be removed 
.RE
.PP

.PP
Definition at line 77 of file cache_content_read_conf.c.
.SS "cache_content_status_t cache_content_read_conf_gc_policy (config_file_t in_config, cache_content_gc_policy_t * ppolicy)"cache_content_read_conf_gc_policy: read the garbage collection policy in configuration file.
.PP
Reads the garbage collection policy in configuration file.
.PP
\fBParameters:\fP
.RS 4
\fIin_config\fP [IN] configuration file handle 
.br
\fIpparam\fP [OUT] read parameters
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_CONTENT_SUCCESS if ok, CACHE_CONTENT_NOT_FOUND is stanza is not there, CACHE_CONTENT_INVALID_ARGUMENT otherwise. 
.RE
.PP

.PP
Definition at line 238 of file cache_content_read_conf.c.
.SH "Variable Documentation"
.PP 
.SS "int \fBfcc_debug_level\fP = -1"
.PP
Definition at line 63 of file cache_content_read_conf.c.
.SS "char \fBfcc_log_path\fP[MAXPATHLEN]"
.PP
Definition at line 62 of file cache_content_read_conf.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for File Content layer from the source code.
