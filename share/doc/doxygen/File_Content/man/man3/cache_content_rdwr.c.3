.TH "cache_content_rdwr.c" 3 "15 Sep 2010" "Version 0.1" "File Content layer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cache_content_rdwr.c \- 
.PP
Management of the file content cache: read/write operations.  

.SH SYNOPSIS
.br
.PP
\fC#include 'fsal.h'\fP
.br
\fC#include 'LRU_List.h'\fP
.br
\fC#include 'log_macros.h'\fP
.br
\fC#include 'HashData.h'\fP
.br
\fC#include 'HashTable.h'\fP
.br
\fC#include 'cache_inode.h'\fP
.br
\fC#include 'cache_content.h'\fP
.br
\fC#include <unistd.h>\fP
.br
\fC#include <sys/types.h>\fP
.br
\fC#include <sys/stat.h>\fP
.br
\fC#include <fcntl.h>\fP
.br
\fC#include <sys/param.h>\fP
.br
\fC#include <time.h>\fP
.br
\fC#include <pthread.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "cache_content_status_t \fBcache_content_open\fP (cache_content_entry_t *pentry, cache_content_client_t *pclient, cache_content_status_t *pstatus)"
.br
.ti -1c
.RI "cache_content_status_t \fBcache_content_close\fP (cache_content_entry_t *pentry, cache_content_client_t *pclient, cache_content_status_t *pstatus)"
.br
.ti -1c
.RI "cache_content_status_t \fBcache_content_rdwr\fP (cache_content_entry_t *pentry, cache_content_io_direction_t read_or_write, fsal_seek_t *seek_descriptor, fsal_size_t *pio_size_in, fsal_size_t *pio_size_out, caddr_t buffer, fsal_boolean_t *p_fsal_eof, struct stat *pbuffstat, cache_content_client_t *pclient, fsal_op_context_t *pcontext, cache_content_status_t *pstatus)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Management of the file content cache: read/write operations. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
deniel 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2005/11/28 17:02:33 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.12 
.RE
.PP
cache_content_rdwr.c.c : Management of the file content cache, read and write operations. 
.PP
Definition in file \fBcache_content_rdwr.c\fP.
.SH "Function Documentation"
.PP 
.SS "cache_content_status_t cache_content_close (cache_content_entry_t * pentry, cache_content_client_t * pclient, cache_content_status_t * pstatus)"cache_content_close: closes the local fd on the cache.
.PP
Closes the local fd on the cache.
.PP
No lock management is done in this layer: the related pentry in the cache inode layer is locked and will prevent from concurent accesses.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] entry in file content layer whose content is to be accessed. 
.br
\fIpclient\fP [IN] ressource allocated by the client for the nfs management.  [OUT] returned status.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_CONTENT_SUCCESS is successful . 
.RE
.PP

.PP
Definition at line 152 of file cache_content_rdwr.c.
.SS "cache_content_status_t cache_content_open (cache_content_entry_t * pentry, cache_content_client_t * pclient, cache_content_status_t * pstatus)"cache_content_open: opens the local fd on the cache.
.PP
Opens the local fd on the cache.
.PP
No lock management is done in this layer: the related pentry in the cache inode layer is locked and will prevent from concurent accesses.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] entry in file content layer whose content is to be accessed. 
.br
\fIpclient\fP [IN] ressource allocated by the client for the nfs management.  [OUT] returned status.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_CONTENT_SUCCESS is successful . 
.RE
.PP

.PP
Definition at line 81 of file cache_content_rdwr.c.
.SS "cache_content_status_t cache_content_rdwr (cache_content_entry_t * pentry, cache_content_io_direction_t read_or_write, fsal_seek_t * seek_descriptor, fsal_size_t * pio_size_in, fsal_size_t * pio_size_out, caddr_t buffer, fsal_boolean_t * p_fsal_eof, struct stat * pbuffstat, cache_content_client_t * pclient, fsal_op_context_t * pcontext, cache_content_status_t * pstatus)"cache_content_rdwr: Reads/Writes through the cache layer.
.PP
Reads/Writes through the cache layer. This routine should be called only from the cache_inode layer.
.PP
No lock management is done in this layer: the related pentry in the cache inode layer is locked and will prevent from concurent accesses.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [IN] entry in file content layer whose content is to be accessed. 
.br
\fIread_or_write\fP [IN] a flag of type cache_content_io_direction_t to tell if a read or write is to be done. 
.br
\fIseek_descriptor\fP [IN] absolute position (in the FSAL file) where the IO will be done. 
.br
\fIpio_size_in\fP [IN] requested io size 
.br
\fIpio_size_out\fP [OUT] the size of the io that was successfully made. 
.br
\fIpbuffstat\fP [OUT] the 'stat' of entry in the data cache after the operation 
.br
\fIbuffer\fP write:[IN] read:[OUT] the buffer for the data. 
.br
\fIpclient\fP [IN] ressource allocated by the client for the nfs management. 
.br
\fIpcontext\fP [IN] fsal credentials for the operation.  [OUT] returned status.
.RE
.PP
\fBReturns:\fP
.RS 4
CACHE_CONTENT_SUCCESS is successful . 
.RE
.PP

.PP
Definition at line 203 of file cache_content_rdwr.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for File Content layer from the source code.
