.TH "nfs_rpc_dispatcher_thread.c" 3 "15 Sep 2010" "Version 0.1" "Daemon Main" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nfs_rpc_dispatcher_thread.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <pthread.h>\fP
.br
\fC#include <fcntl.h>\fP
.br
\fC#include <sys/file.h>\fP
.br
\fC#include <sys/select.h>\fP
.br
\fC#include 'HashData.h'\fP
.br
\fC#include 'HashTable.h'\fP
.br
\fC#include <rpc/rpc.h>\fP
.br
\fC#include <rpc/svc.h>\fP
.br
\fC#include <rpc/pmap_clnt.h>\fP
.br
\fC#include 'log_macros.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include 'nfs23.h'\fP
.br
\fC#include 'nfs4.h'\fP
.br
\fC#include 'mount.h'\fP
.br
\fC#include 'nlm4.h'\fP
.br
\fC#include 'rquota.h'\fP
.br
\fC#include 'nfs_init.h'\fP
.br
\fC#include 'nfs_core.h'\fP
.br
\fC#include 'cache_inode.h'\fP
.br
\fC#include 'cache_content.h'\fP
.br
\fC#include 'nfs_exports.h'\fP
.br
\fC#include 'nfs_creds.h'\fP
.br
\fC#include 'nfs_proto_functions.h'\fP
.br
\fC#include 'nfs_dupreq.h'\fP
.br
\fC#include 'nfs_file_handle.h'\fP
.br
\fC#include 'nfs_stat.h'\fP
.br
\fC#include 'SemN.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBNULL_SVC\fP   ((struct svc_callout *)0)"
.br
.ti -1c
.RI "#define \fBNO_VALUE_CHOOSEN\fP   1000000"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "SVCXPRT * \fBSvcfd_create\fP (int fd, u_int sendsize, u_int recvsize)"
.br
.ti -1c
.RI "SVCXPRT * \fBSvctcp_create\fP (register int sock, u_int sendsize, u_int recvsize)"
.br
.ti -1c
.RI "SVCXPRT * \fBSvcudp_bufcreate\fP (register int sock, u_int sendsz, u_int recvsz)"
.br
.ti -1c
.RI "bool_t \fBSvc_register\fP (SVCXPRT *xprt, u_long prog, u_long vers, void(*dispatch)(), int protocol)"
.br
.ti -1c
.RI "void \fBsocket_setoptions\fP (int socketFd)"
.br
.ti -1c
.RI "void \fBnfs_rpc_dispatch_dummy\fP (struct svc_req *ptr_req, SVCXPRT *ptr_svc)"
.br
.ti -1c
.RI "int \fBnfs_Init_svc\fP ()"
.br
.ti -1c
.RI "int \fBnfs_rpc_get_worker_index\fP (int mount_protocol_flag)"
.br
.ti -1c
.RI "void \fBnfs_rpc_getreq\fP (fd_set *readfds, nfs_parameter_t *pnfs_para)"
.br
.ti -1c
.RI "int \fBclean_pending_request\fP (LRU_entry_t *pentry, void *addparam)"
.br
.ti -1c
.RI "int \fBprint_pending_request\fP (LRU_data_t data, char *str)"
.br
.ti -1c
.RI "void \fBrpc_dispatcher_svc_run\fP (nfs_parameter_t *pnfs_param)"
.br
.ti -1c
.RI "void * \fBrpc_dispatcher_thread\fP (void *Arg)"
.br
.ti -1c
.RI "int \fBnfs_Init_request_data\fP (nfs_request_data_t *pdata)"
.br
.ti -1c
.RI "void \fBconstructor_nfs_request_data_t\fP (void *ptr)"
.br
.ti -1c
.RI "int \fBnfs_Init_gc_counter\fP (void)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBnfs_start_info_t\fP \fBnfs_start_info\fP"
.br
.ti -1c
.RI "fd_set \fBSvc_fdset\fP"
.br
.ti -1c
.RI "nfs_worker_data_t * \fBworkers_data\fP"
.br
.ti -1c
.RI "nfs_parameter_t \fBnfs_param\fP"
.br
.ti -1c
.RI "SVCXPRT * \fBXports\fP [FD_SETSIZE]"
.br
.ti -1c
.RI "hash_table_t * \fBht_dupreq\fP"
.br
.ti -1c
.RI "pthread_mutex_t \fBmutex_cond_xprt\fP [FD_SETSIZE]"
.br
.ti -1c
.RI "pthread_cond_t \fBcondvar_xprt\fP [FD_SETSIZE]"
.br
.ti -1c
.RI "int \fBetat_xprt\fP [FD_SETSIZE]"
.br
.ti -1c
.RI "unsigned int \fBnb_current_gc_workers\fP"
.br
.ti -1c
.RI "pthread_mutex_t \fBlock_nb_current_gc_workers\fP"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define NO_VALUE_CHOOSEN   1000000"
.SS "#define NULL_SVC   ((struct svc_callout *)0)"
.PP
Definition at line 107 of file nfs_rpc_dispatcher_thread.c.
.SH "Function Documentation"
.PP 
.SS "int clean_pending_request (LRU_entry_t * pentry, void * addparam)"clean_pending_request: cleans an entry in a nfs request LRU,
.PP
cleans an entry in a nfs request LRU.
.PP
\fBParameters:\fP
.RS 4
\fIpentry\fP [INOUT] entry to be cleaned. 
.br
\fIaddparam\fP [IN] additional parameter used for cleaning.
.RE
.PP
\fBReturns:\fP
.RS 4
0 if ok, other values mean an error. 
.RE
.PP

.PP
Definition at line 1937 of file nfs_rpc_dispatcher_thread.c.
.SS "void constructor_nfs_request_data_t (void * ptr)"constructor_nfs_request_data_t: Constructor for a nfs_request_data_t structure
.PP
This function is used to init the nfs_request_data for a worker. These data are used by the worker for RPC processing.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP void pointer to the structure to be managed
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function) will exit the program if failed. 
.RE
.PP

.PP
Definition at line 2169 of file nfs_rpc_dispatcher_thread.c.
.SS "int nfs_Init_gc_counter (void)"nfs_Init_gc_counter: Init the worker's gc counters.
.PP
This functions is used to init a mutex and a counter associated with it, to keep track of the number of worker currently performing the garbagge collection.
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP No parameters
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successfull, -1 otherwise. 
.RE
.PP

.PP
Definition at line 2190 of file nfs_rpc_dispatcher_thread.c.
.SS "int nfs_Init_request_data (nfs_request_data_t * pdata)"nfs_Init_request_data: Init the data associated with a pending request
.PP
This function is used to init the nfs_request_data for a worker. These data are used by the worker for RPC processing.
.PP
\fBParameters:\fP
.RS 4
\fIparam\fP A structure of type nfs_worker_parameter_t with all the necessary information related to a worker 
.br
\fIpdata\fP Pointer to the data to be initialized.
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successfull, -1 otherwise. 
.RE
.PP

.PP
Definition at line 2083 of file nfs_rpc_dispatcher_thread.c.
.SS "int nfs_Init_svc ()"nfs_Init_svc: Init the svc descriptors for the nfs daemon.
.PP
Perform all the required initialization for the SVCXPRT pointer. 
.PP
Definition at line 197 of file nfs_rpc_dispatcher_thread.c.
.SS "void nfs_rpc_dispatch_dummy (struct svc_req * ptr_req, SVCXPRT * ptr_svc)"nfs_rpc_dispatch_dummy: Function never called, but the symbol is necessary for Svc_register/
.PP
\fBParameters:\fP
.RS 4
\fIptr_req\fP the RPC request to be managed 
.br
\fIptr_svc\fP SVCXPRT pointer to be used for managing this request
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function) and is never called indeed. 
.RE
.PP

.PP
Definition at line 183 of file nfs_rpc_dispatcher_thread.c.
.SS "int nfs_rpc_get_worker_index (int mount_protocol_flag)"nfs_rpc_get_worker_index: Returns the index of the worker to be used
.PP
\fBParameters:\fP
.RS 4
\fImount_protocol_flag\fP a flag (TRUE of FALSE) to tell if the worker is to be used for mount protocol
.RE
.PP
\fBReturns:\fP
.RS 4
the chosen worker index. 
.RE
.PP

.PP
Definition at line 1596 of file nfs_rpc_dispatcher_thread.c.
.SS "void nfs_rpc_getreq (fd_set * readfds, nfs_parameter_t * pnfs_para)"nfs_rpc_getreq: Do half of the work done by svc_getreqset.
.PP
This function wait for an incoming ONC message by waiting on a 'select' statement. Then getting a request it perform the authentication and extracts the RPC message for the related socket. It then find the less busy worker (the one with the shortest pending queue) and put the msg in this queue.
.PP
\fBParameters:\fP
.RS 4
\fIreadfds\fP File Descriptor Set related to the socket used for RPC management.
.RE
.PP
\fBReturns:\fP
.RS 4
Nothing (void function), but calls svcerr_* function to notify the client when an error occures. 
.RE
.PP

.PP
Definition at line 1625 of file nfs_rpc_dispatcher_thread.c.
.SS "int print_pending_request (LRU_data_t data, char * str)"print_pending_request: prints an entry related to a pending request in the LRU list.
.PP
prints an entry related to a pending request in the LRU list.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP [IN] data stored in a LRU entry to be printed. 
.br
\fIstr\fP [OUT] string used to store the result.
.RE
.PP
\fBReturns:\fP
.RS 4
0 if ok, other values mean an error. 
.RE
.PP

.PP
Definition at line 1960 of file nfs_rpc_dispatcher_thread.c.
.SS "void rpc_dispatcher_svc_run (nfs_parameter_t * pnfs_param)"nfs_rpc_dispatcher_svc_run: the same as svc_run.
.PP
The same as svc_run.
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function) 
.RE
.PP

.PP
Definition at line 1976 of file nfs_rpc_dispatcher_thread.c.
.SS "void* rpc_dispatcher_thread (void * Arg)"rpc_dispatcher_thread: thread used for RPC dispatching.
.PP
Thead used for RPC dispatching. It gets the requests and then spool it to one of the worker's LRU. The worker chosen is the one with the smaller load (its LRU is the shorter one).
.PP
\fBParameters:\fP
.RS 4
\fIIndexArg\fP the index for the worker thread (unused)
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to the result (but this function will mostly loop forever). 
.RE
.PP

.PP
Definition at line 2044 of file nfs_rpc_dispatcher_thread.c.
.SS "void socket_setoptions (int socketFd)"
.PP
Definition at line 196 of file nfs_tools.c.
.SS "bool_t Svc_register (SVCXPRT * xprt, u_long prog, u_long vers, void(*)() dispatch, int protocol)"
.PP
Definition at line 120 of file Svc_oncrpc.c.
.SS "SVCXPRT* Svcfd_create (int fd, u_int sendsize, u_int recvsize)"
.PP
Definition at line 226 of file Svc_tcp_gssrpc.c.
.SS "SVCXPRT* Svctcp_create (register int sock, u_int sendsize, u_int recvsize)"
.PP
Definition at line 155 of file Svc_tcp_gssrpc.c.
.SS "SVCXPRT* Svcudp_bufcreate (register int sock, u_int sendsz, u_int recvsz)"
.PP
Definition at line 118 of file Svc_udp_gssrpc.c.
.SH "Variable Documentation"
.PP 
.SS "pthread_cond_t \fBcondvar_xprt\fP[FD_SETSIZE]"
.PP
Definition at line 77 of file Svc_tcp_gssrpc.c.
.SS "int \fBetat_xprt\fP[FD_SETSIZE]"
.PP
Definition at line 78 of file Svc_tcp_gssrpc.c.
.SS "hash_table_t* \fBht_dupreq\fP"
.PP
Definition at line 97 of file nfs_dupreq.c.
.SS "pthread_mutex_t \fBlock_nb_current_gc_workers\fP"
.PP
Definition at line 130 of file nfs_rpc_dispatcher_thread.c.
.SS "pthread_mutex_t \fBmutex_cond_xprt\fP[FD_SETSIZE]"
.PP
Definition at line 76 of file Svc_tcp_gssrpc.c.
.SS "unsigned int \fBnb_current_gc_workers\fP"
.PP
Definition at line 129 of file nfs_rpc_dispatcher_thread.c.
.SS "nfs_parameter_t \fBnfs_param\fP"
.PP
Definition at line 85 of file nfs_init.c.
.SS "\fBnfs_start_info_t\fP \fBnfs_start_info\fP"
.PP
Definition at line 93 of file nfs_init.c.
.SS "fd_set \fBSvc_fdset\fP"
.PP
Definition at line 67 of file Svc_gssrpc.c.
.SS "nfs_worker_data_t* \fBworkers_data\fP"
.PP
Definition at line 87 of file nfs_init.c.
.SS "SVCXPRT* \fBXports\fP[FD_SETSIZE]"
.PP
Definition at line 27 of file Svc_oncrpc.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for Daemon Main from the source code.
