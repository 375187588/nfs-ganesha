.TH "nfs_worker_thread.c" 3 "31 Mar 2009" "Version 0.1" "Daemon Main" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nfs_worker_thread.c \- The file that contain the 'worker_thread' routine for the nfsd.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <pthread.h>\fP
.br
\fC#include <fcntl.h>\fP
.br
\fC#include <sys/file.h>\fP
.br
\fC#include 'HashData.h'\fP
.br
\fC#include 'HashTable.h'\fP
.br
\fC#include <rpc/rpc.h>\fP
.br
\fC#include <rpc/svc.h>\fP
.br
\fC#include <rpc/pmap_clnt.h>\fP
.br
\fC#include 'log_functions.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include 'nfs23.h'\fP
.br
\fC#include 'nfs4.h'\fP
.br
\fC#include 'mount.h'\fP
.br
\fC#include 'nfs_core.h'\fP
.br
\fC#include 'cache_inode.h'\fP
.br
\fC#include 'cache_content.h'\fP
.br
\fC#include 'nfs_exports.h'\fP
.br
\fC#include 'nfs_creds.h'\fP
.br
\fC#include 'nfs_proto_functions.h'\fP
.br
\fC#include 'nfs_dupreq.h'\fP
.br
\fC#include 'nfs_file_handle.h'\fP
.br
\fC#include 'nfs_stat.h'\fP
.br
\fC#include 'SemN.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBNULL_SVC\fP   ((struct svc_callout *)0)"
.br
.ti -1c
.RI "#define \fBSVCAUTH_PRIVATE\fP(auth)   ((struct \fBsvc_rpc_gss_data\fP *)(auth)->svc_ah_private)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "enum auth_stat \fB_authenticate\fP (register struct svc_req *rqst, struct rpc_msg *msg)"
.br
.ti -1c
.RI "int \fBnfs_Init_worker_data\fP (nfs_worker_data_t *pdata)"
.br
.ti -1c
.RI "void * \fBworker_thread\fP (void *IndexArg)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "nfs_worker_data_t * \fBworkers_data\fP"
.br
.ti -1c
.RI "nfs_parameter_t \fBnfs_param\fP"
.br
.ti -1c
.RI "SVCXPRT ** \fBXports\fP"
.br
.ti -1c
.RI "hash_table_t * \fBht_dupreq\fP"
.br
.ti -1c
.RI "unsigned int \fBnb_current_gc_workers\fP"
.br
.ti -1c
.RI "pthread_mutex_t \fBlock_nb_current_gc_workers\fP"
.br
.ti -1c
.RI "pthread_mutex_t \fBmutex_cond_xprt\fP [FD_SETSIZE]"
.br
.ti -1c
.RI "pthread_cond_t \fBcondvar_xprt\fP [FD_SETSIZE]"
.br
.ti -1c
.RI "int \fBetat_xprt\fP [FD_SETSIZE]"
.br
.ti -1c
.RI "int \fBnfs_do_terminate\fP = FALSE"
.br
.ti -1c
.RI "const nfs_function_desc_t \fBnfs2_func_desc\fP []"
.br
.ti -1c
.RI "const nfs_function_desc_t \fBnfs3_func_desc\fP []"
.br
.ti -1c
.RI "const nfs_function_desc_t \fBnfs4_func_desc\fP []"
.br
.ti -1c
.RI "const nfs_function_desc_t \fBmnt1_func_desc\fP []"
.br
.ti -1c
.RI "const nfs_function_desc_t \fBmnt3_func_desc\fP []"
.br
.in -1c
.SH "Detailed Description"
.PP 
The file that contain the 'worker_thread' routine for the nfsd. 

\fBAuthor:\fP
.RS 4
$Author$ 
.RE
.PP
\fBDate:\fP
.RS 4
$Date$ 
.RE
.PP
\fBVersion:\fP
.RS 4
$Revision$ \fBnfs_worker_thread.c\fP : The file that contain the 'worker_thread' routine for the nfsd (and all the related stuff). 
.RE
.PP

.PP
Definition in file \fBnfs_worker_thread.c\fP.
.SH "Define Documentation"
.PP 
.SS "#define NULL_SVC   ((struct svc_callout *)0)"
.PP
Definition at line 133 of file nfs_worker_thread.c.
.SS "#define SVCAUTH_PRIVATE(auth)   ((struct \fBsvc_rpc_gss_data\fP *)(auth)->svc_ah_private)"
.PP
Definition at line 134 of file nfs_worker_thread.c.
.SH "Function Documentation"
.PP 
.SS "enum auth_stat _authenticate (register struct svc_req * rqst, struct rpc_msg * msg)"
.PP
.SS "int nfs_Init_worker_data (nfs_worker_data_t * pdata)"
.PP
nfs_Init_worker_data: Init the data associated with a worker instance.
.PP
This function is used to init the nfs_worker_data for a worker thread. These data are used by the worker for RPC processing.
.PP
\fBParameters:\fP
.RS 4
\fIparam\fP A structure of type nfs_worker_parameter_t with all the necessary information related to a worker 
.br
\fIpdata\fP Pointer to the data to be initialized.
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successfull, -1 otherwise. 
.RE
.PP

.PP
Definition at line 769 of file nfs_worker_thread.c.
.SS "void* worker_thread (void * IndexArg)"
.PP
worker_thread: The main function for a worker thread
.PP
This is the body of the worker thread. Its starting arguments are located in global array worker_data. The argument is no pointer but the worker's index. It then uses this index to address its own worker data in the array.
.PP
\fBParameters:\fP
.RS 4
\fIIndexArg\fP the index for the worker thread, in fact an integer cast as a void *
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to the result (but this function will mostly loop forever). 
.RE
.PP

.PP
Definition at line 822 of file nfs_worker_thread.c.
.SH "Variable Documentation"
.PP 
.SS "pthread_cond_t \fBcondvar_xprt\fP[FD_SETSIZE]"
.PP
Definition at line 77 of file Svc_tcp_gssrpc.c.
.SS "int \fBetat_xprt\fP[FD_SETSIZE]"
.PP
Definition at line 78 of file Svc_tcp_gssrpc.c.
.SS "hash_table_t* \fBht_dupreq\fP"
.PP
Definition at line 140 of file nfs_dupreq.c.
.SS "pthread_mutex_t \fBlock_nb_current_gc_workers\fP"
.PP
Definition at line 180 of file nfs_rpc_dispatcher_thread.c.
.SS "const nfs_function_desc_t \fBmnt1_func_desc\fP[]"
.PP
\fBInitial value:\fP
.PP
.nf

{
  {mnt_Null    , mnt_Null_Free,    (xdrproc_t)xdr_void,    (xdrproc_t)xdr_void,      'mnt_Null',    NOTHING_SPECIAL },
  {mnt_Mnt     , mnt1_Mnt_Free,    (xdrproc_t)xdr_dirpath, (xdrproc_t)xdr_fhstatus2, 'mnt_Mnt',     NEEDS_CRED  },
  {mnt_Dump    , mnt_Dump_Free,    (xdrproc_t)xdr_void,    (xdrproc_t)xdr_mountlist, 'mnt_Dump',    NOTHING_SPECIAL },
  {mnt_Umnt    , mnt_Umnt_Free,    (xdrproc_t)xdr_dirpath, (xdrproc_t)xdr_void,      'mnt_Umnt',    NOTHING_SPECIAL },
  {mnt_UmntAll , mnt_UmntAll_Free, (xdrproc_t)xdr_void,    (xdrproc_t)xdr_void,      'mnt_UmntAll', NOTHING_SPECIAL },
  {mnt_Export  ,  mnt_Export_Free, (xdrproc_t)xdr_void,    (xdrproc_t)xdr_exports,   'mnt_Export',  NOTHING_SPECIAL }
}
.fi
.PP
Definition at line 224 of file nfs_worker_thread.c.
.SS "const nfs_function_desc_t \fBmnt3_func_desc\fP[]"
.PP
\fBInitial value:\fP
.PP
.nf

{
  {mnt_Null   , mnt_Null_Free,    (xdrproc_t)xdr_void,     (xdrproc_t)xdr_void,      'mnt_Null',    NOTHING_SPECIAL },
  {mnt_Mnt    , mnt3_Mnt_Free,    (xdrproc_t)xdr_dirpath,  (xdrproc_t)xdr_mountres3, 'mnt_Mnt',     NEEDS_CRED  },
  {mnt_Dump   , mnt_Dump_Free,    (xdrproc_t)xdr_void,     (xdrproc_t)xdr_mountlist, 'mnt_Dump',    NOTHING_SPECIAL },
  {mnt_Umnt   , mnt_Umnt_Free,    (xdrproc_t)xdr_dirpath,  (xdrproc_t)xdr_void,      'mnt_Umnt',    NOTHING_SPECIAL },
  {mnt_UmntAll, mnt_UmntAll_Free, (xdrproc_t)xdr_void,     (xdrproc_t)xdr_void,      'mnt_UmntAll', NOTHING_SPECIAL },
  {mnt_Export , mnt_Export_Free,  (xdrproc_t)xdr_void,     (xdrproc_t)xdr_exports,   'mnt_Export',  NOTHING_SPECIAL }
}
.fi
.PP
Definition at line 234 of file nfs_worker_thread.c.
.SS "pthread_mutex_t \fBmutex_cond_xprt\fP[FD_SETSIZE]"
.PP
Definition at line 76 of file Svc_tcp_gssrpc.c.
.SS "unsigned int \fBnb_current_gc_workers\fP"
.PP
Definition at line 179 of file nfs_rpc_dispatcher_thread.c.
.SS "const nfs_function_desc_t \fBnfs2_func_desc\fP[]"
.PP
\fBInitial value:\fP
.PP
.nf
 
{ 
  {nfs_Null,        nfs_Null_Free,        (xdrproc_t)xdr_void,         (xdrproc_t)xdr_void,         'nfs_Null',       NOTHING_SPECIAL },
  {nfs_Getattr,     nfs_Getattr_Free,     (xdrproc_t)xdr_fhandle2,     (xdrproc_t)xdr_ATTR2res,     'nfs_Getattr',    NEEDS_CRED  },
  {nfs_Setattr,     nfs_Setattr_Free,     (xdrproc_t)xdr_SETATTR2args, (xdrproc_t)xdr_ATTR2res,     'nfs_Setattr',    MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS },
  {nfs2_Root,       nfs2_Root_Free,       (xdrproc_t)xdr_void,         (xdrproc_t)xdr_void,         'nfs2_Root',      NOTHING_SPECIAL },
  {nfs_Lookup,      nfs2_Lookup_Free,     (xdrproc_t)xdr_diropargs2,   (xdrproc_t)xdr_DIROP2res,    'nfs_Lookup',     NEEDS_CRED|SUPPORTS_GSS  },
  {nfs_Readlink,    nfs2_Readlink_Free,   (xdrproc_t)xdr_fhandle2,     (xdrproc_t)xdr_READLINK2res, 'nfs_Readlink',   NEEDS_CRED|SUPPORTS_GSS  },
  {nfs_Read,        nfs2_Read_Free,       (xdrproc_t)xdr_READ2args,    (xdrproc_t)xdr_READ2res,     'nfs_Read',       NEEDS_CRED|SUPPORTS_GSS  },
  {nfs2_Writecache, nfs2_Writecache_Free, (xdrproc_t)xdr_void,         (xdrproc_t)xdr_void,         'nfs_Writecache', NOTHING_SPECIAL },
  {nfs_Write,       nfs_Write_Free,       (xdrproc_t)xdr_WRITE2args,   (xdrproc_t)xdr_ATTR2res,     'nfs_Write',      MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS },
  {nfs_Create,      nfs_Create_Free,      (xdrproc_t)xdr_CREATE2args,  (xdrproc_t)xdr_DIROP2res,    'nfs_Create',     MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS },
  {nfs_Remove,      nfs_Remove_Free,      (xdrproc_t)xdr_diropargs2,   (xdrproc_t)xdr_nfsstat2,     'nfs_Remove',     MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS },
  {nfs_Rename,      nfs_Rename_Free,      (xdrproc_t)xdr_RENAME2args,  (xdrproc_t)xdr_nfsstat2,     'nfs_Rename',     MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS },
  {nfs_Link,        nfs_Link_Free,        (xdrproc_t)xdr_LINK2args,    (xdrproc_t)xdr_nfsstat2,     'nfs_Link',       MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS },
  {nfs_Symlink,     nfs_Symlink_Free,     (xdrproc_t)xdr_SYMLINK2args, (xdrproc_t)xdr_nfsstat2,     'nfs_Symlink',    MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS },
  {nfs_Mkdir,       nfs_Mkdir_Free,       (xdrproc_t)xdr_CREATE2args,  (xdrproc_t)xdr_DIROP2res,    'nfs_Mkdir',      MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS },
  {nfs_Rmdir,       nfs_Rmdir_Free,       (xdrproc_t)xdr_diropargs2,   (xdrproc_t)xdr_nfsstat2,     'nfs_Rmdir',      MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS },
  {nfs_Readdir,     nfs2_Readdir_Free,    (xdrproc_t)xdr_READDIR2args, (xdrproc_t)xdr_READDIR2res,  'nfs_Readdir',    NEEDS_CRED|SUPPORTS_GSS },
  {nfs_Fsstat,      nfs_Fsstat_Free,      (xdrproc_t)xdr_fhandle2,     (xdrproc_t)xdr_STATFS2res,   'nfs_Fsstat',     NEEDS_CRED  }
}
.fi
.PP
Definition at line 169 of file nfs_worker_thread.c.
.SS "const nfs_function_desc_t \fBnfs3_func_desc\fP[]"
.PP
\fBInitial value:\fP
.PP
.nf
 
{
  {nfs_Null,         nfs_Null_Free,         (xdrproc_t)xdr_void,             (xdrproc_t)xdr_void,            'nfs_Null',         NOTHING_SPECIAL  },
  {nfs_Getattr,      nfs_Getattr_Free,      (xdrproc_t)xdr_GETATTR3args,     (xdrproc_t)xdr_GETATTR3res,     'nfs_Getattr',      NEEDS_CRED|SUPPORTS_GSS },
  {nfs_Setattr,      nfs_Setattr_Free,      (xdrproc_t)xdr_SETATTR3args,     (xdrproc_t)xdr_SETATTR3res,     'nfs_Setattr',      MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS  },
  {nfs_Lookup,       nfs3_Lookup_Free,      (xdrproc_t)xdr_LOOKUP3args,      (xdrproc_t)xdr_LOOKUP3res,      'nfs_Lookup',       NEEDS_CRED|SUPPORTS_GSS },
  {nfs3_Access,      nfs3_Access_Free,      (xdrproc_t)xdr_ACCESS3args,      (xdrproc_t)xdr_ACCESS3res,      'nfs3_Access',      NEEDS_CRED|SUPPORTS_GSS },
  {nfs_Readlink,     nfs3_Readlink_Free,    (xdrproc_t)xdr_READLINK3args,    (xdrproc_t)xdr_READLINK3res,    'nfs_Readlink',     NEEDS_CRED|SUPPORTS_GSS },
  {nfs_Read,         nfs3_Read_Free,        (xdrproc_t)xdr_READ3args,        (xdrproc_t)xdr_READ3res,        'nfs_Read',         NEEDS_CRED|SUPPORTS_GSS },
  {nfs_Write,        nfs_Write_Free,        (xdrproc_t)xdr_WRITE3args,       (xdrproc_t)xdr_WRITE3res,       'nfs_Write',        MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS  },
  {nfs_Create,       nfs_Create_Free,       (xdrproc_t)xdr_CREATE3args,      (xdrproc_t)xdr_CREATE3res,      'nfs_Create',       MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS  },
  {nfs_Mkdir,        nfs_Mkdir_Free,        (xdrproc_t)xdr_MKDIR3args,       (xdrproc_t)xdr_MKDIR3res,       'nfs_Mkdir',        MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS  },
  {nfs_Symlink,      nfs_Symlink_Free,      (xdrproc_t)xdr_SYMLINK3args,     (xdrproc_t)xdr_SYMLINK3res,     'nfs_Symlink',      MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS  },
  {nfs3_Mknod,       nfs3_Mknod_Free,       (xdrproc_t)xdr_MKNOD3args,       (xdrproc_t)xdr_MKNOD3res,       'nfs3_Mknod',       MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS  },
  {nfs_Remove,       nfs_Remove_Free,       (xdrproc_t)xdr_REMOVE3args,      (xdrproc_t)xdr_REMOVE3res,      'nfs_Remove',       MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS  },
  {nfs_Rmdir,        nfs_Rmdir_Free,        (xdrproc_t)xdr_RMDIR3args,       (xdrproc_t)xdr_RMDIR3res,       'nfs_Rmdir',        MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS  },
  {nfs_Rename,       nfs_Rename_Free,       (xdrproc_t)xdr_RENAME3args,      (xdrproc_t)xdr_RENAME3res,      'nfs_Rename',       MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS  },
  {nfs_Link,         nfs_Link_Free,         (xdrproc_t)xdr_LINK3args,        (xdrproc_t)xdr_LINK3res,        'nfs_Link',         MAKES_WRITE|NEEDS_CRED|CAN_BE_DUP|SUPPORTS_GSS  },
  {nfs_Readdir,      nfs3_Readdir_Free,     (xdrproc_t)xdr_READDIR3args,     (xdrproc_t)xdr_READDIR3res,     'nfs_Readdir',      NEEDS_CRED|SUPPORTS_GSS },
  {nfs3_Readdirplus, nfs3_Readdirplus_Free, (xdrproc_t)xdr_READDIRPLUS3args, (xdrproc_t)xdr_READDIRPLUS3res, 'nfs3_Readdirplus', NEEDS_CRED|SUPPORTS_GSS }, 
  {nfs_Fsstat,       nfs_Fsstat_Free,       (xdrproc_t)xdr_FSSTAT3args,      (xdrproc_t)xdr_FSSTAT3res,      'nfs_Fsstat',       NEEDS_CRED|SUPPORTS_GSS }, 
  {nfs3_Fsinfo,      nfs3_Fsinfo_Free,      (xdrproc_t)xdr_FSINFO3args,      (xdrproc_t)xdr_FSINFO3res,      'nfs3_Fsinfo',      NEEDS_CRED }, 
  {nfs3_Pathconf,    nfs3_Pathconf_Free,    (xdrproc_t)xdr_PATHCONF3args,    (xdrproc_t)xdr_PATHCONF3res,    'nfs3_Pathconf',    NEEDS_CRED|SUPPORTS_GSS }, 
  {nfs3_Commit,      nfs3_Commit_Free,      (xdrproc_t)xdr_COMMIT3args,      (xdrproc_t)xdr_COMMIT3res,      'nfs3_Commit',      MAKES_WRITE|NEEDS_CRED|SUPPORTS_GSS }
}
.fi
.PP
Definition at line 191 of file nfs_worker_thread.c.
.SS "const nfs_function_desc_t \fBnfs4_func_desc\fP[]"
.PP
\fBInitial value:\fP
.PP
.nf
 
{
  {nfs_Null,      nfs_Null_Free,      (xdrproc_t)xdr_void,          (xdrproc_t)xdr_void,         'nfs_Null',      NOTHING_SPECIAL },
  {nfs4_Compound, nfs4_Compound_Free, (xdrproc_t)xdr_COMPOUND4args, (xdrproc_t)xdr_COMPOUND4res, 'nfs4_Compound', NEEDS_CRED|SUPPORTS_GSS }
}
.fi
.PP
Definition at line 218 of file nfs_worker_thread.c.
.SS "int \fBnfs_do_terminate\fP = FALSE"
.PP
Definition at line 165 of file nfs_worker_thread.c.
.SS "nfs_parameter_t \fBnfs_param\fP"
.PP
Definition at line 135 of file nfs_init.c.
.SS "nfs_worker_data_t* \fBworkers_data\fP"
.PP
Definition at line 137 of file nfs_init.c.
.SS "SVCXPRT** \fBXports\fP"
.PP
Definition at line 70 of file Svc_gssrpc.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for Daemon Main from the source code.
