.TH "nfs_tools.c" 3 "15 Sep 2010" "Version 0.1" "Daemon Main" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nfs_tools.c \- 
.PP
Some tools very usefull in the nfs protocol implementation.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <sys/socket.h>\fP
.br
\fC#include <netinet/in.h>\fP
.br
\fC#include <netinet/tcp.h>\fP
.br
\fC#include <sys/types.h>\fP
.br
\fC#include <ctype.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <dirent.h>\fP
.br
\fC#include <netdb.h>\fP
.br
\fC#include <arpa/inet.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <unistd.h>\fP
.br
\fC#include <sys/poll.h>\fP
.br
\fC#include <pthread.h>\fP
.br
\fC#include <fcntl.h>\fP
.br
\fC#include <sys/file.h>\fP
.br
\fC#include <pwd.h>\fP
.br
\fC#include <grp.h>\fP
.br
\fC#include <rpc/rpc.h>\fP
.br
\fC#include <rpc/svc.h>\fP
.br
\fC#include <rpc/pmap_clnt.h>\fP
.br
\fC#include 'log_functions.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include 'nfs_core.h'\fP
.br
\fC#include 'nfs23.h'\fP
.br
\fC#include 'nfs4.h'\fP
.br
\fC#include 'fsal.h'\fP
.br
\fC#include 'nfs_tools.h'\fP
.br
\fC#include 'nfs_exports.h'\fP
.br
\fC#include 'nfs_file_handle.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBtcp_conn\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "unsigned long \fBdecimal_simple_hash_func\fP (hash_parameter_t *p_hparam, hash_buffer_t *buffclef)"
.br
.ti -1c
.RI "unsigned long \fBdecimal_rbt_hash_func\fP (hash_parameter_t *p_hparam, hash_buffer_t *buffclef)"
.br
.ti -1c
.RI "int \fBdisplay_cache\fP (hash_buffer_t *pbuff, char *str)"
.br
.ti -1c
.RI "int \fBcompare_cache\fP (hash_buffer_t *buff1, hash_buffer_t *buff2)"
.br
.ti -1c
.RI "int \fBprint_cache\fP (LRU_data_t data, char *str)"
.br
.ti -1c
.RI "int \fBclean_cache\fP (LRU_entry_t *pentry, void *addparam)"
.br
.ti -1c
.RI "int \fBlru_inode_entry_to_str\fP (LRU_data_t data, char *str)"
.br
.ti -1c
.RI "int \fBlru_data_entry_to_str\fP (LRU_data_t data, char *str)"
.br
.ti -1c
.RI "int \fBlru_inode_clean_entry\fP (LRU_entry_t *entry, void *adddata)"
.br
.ti -1c
.RI "int \fBlru_data_clean_entry\fP (LRU_entry_t *entry, void *adddata)"
.br
.ti -1c
.RI "void \fBsocket_setoptions\fP (int socketFd)"
.br
.ti -1c
.RI "int \fBcmp_sockaddr\fP (struct sockaddr *addr_1, struct sockaddr *addr_2)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Some tools very usefull in the nfs protocol implementation. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
deniel 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2006/01/20 07:39:22 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.14 
.RE
.PP
\fBnfs_tools.c\fP : Some tools very usefull in the nfs protocol implementation
.PP
\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
deniel 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2006/01/20 07:39:22 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.43 
.RE
.PP
\fBnfs_tools.c\fP : Some tools very usefull in the nfs protocol implementation 
.PP
Definition in file \fBnfs_tools.c\fP.
.SH "Function Documentation"
.PP 
.SS "int clean_cache (LRU_entry_t * pentry, void * addparam)"
.PP
Definition at line 123 of file nfs_tools.c.
.SS "int cmp_sockaddr (struct sockaddr * addr_1, struct sockaddr * addr_2)"
.PP
Definition at line 216 of file nfs_tools.c.
.SS "int compare_cache (hash_buffer_t * buff1, hash_buffer_t * buff2)"
.PP
Definition at line 113 of file nfs_tools.c.
.SS "unsigned long decimal_rbt_hash_func (hash_parameter_t * p_hparam, hash_buffer_t * buffclef)"
.PP
Definition at line 102 of file nfs_tools.c.
.SS "unsigned long decimal_simple_hash_func (hash_parameter_t * p_hparam, hash_buffer_t * buffclef)"
.PP
Definition at line 95 of file nfs_tools.c.
.SS "int display_cache (hash_buffer_t * pbuff, char * str)"
.PP
Definition at line 108 of file nfs_tools.c.
.SS "int lru_data_clean_entry (LRU_entry_t * entry, void * adddata)"lru_data_clean_entry: a function used to clean up a LRU entry during cache inode gc.
.PP
a function used to clean up a LRU entry during cache inode gc.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP [INOUT] the entry to be cleaned up. 
.br
\fIadddata\fP [IN] a buffer with additional input parameters.
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, other values show an error. 
.RE
.PP

.PP
Definition at line 191 of file nfs_tools.c.
.SS "int lru_data_entry_to_str (LRU_data_t data, char * str)"lru_data_entry_to_str: printing function for internal worker's LRU.
.PP
printing function for internal worker's LRU.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP [IN] the LRU data to be printed. 
.br
\fIstr\fP [OUT] the string result.
.RE
.PP
\fBReturns:\fP
.RS 4
the length of the computed string of -1 if failed. 
.RE
.PP

.PP
Definition at line 157 of file nfs_tools.c.
.SS "int lru_inode_clean_entry (LRU_entry_t * entry, void * adddata)"lru_inode_clean_entry: a function used to clean up a LRU entry during cache inode gc.
.PP
a function used to clean up a LRU entry during cache inode gc.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP [INOUT] the entry to be cleaned up. 
.br
\fIadddata\fP [IN] a buffer with additional input parameters.
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, other values show an error. 
.RE
.PP

.PP
Definition at line 174 of file nfs_tools.c.
.SS "int lru_inode_entry_to_str (LRU_data_t data, char * str)"lru_inode_entry_to_str: printing function for internal worker's LRU.
.PP
printing function for internal worker's LRU.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP [IN] the LRU data to be printed. 
.br
\fIstr\fP [OUT] the string result.
.RE
.PP
\fBReturns:\fP
.RS 4
the length of the computed string of -1 if failed. 
.RE
.PP

.PP
Definition at line 140 of file nfs_tools.c.
.SS "int print_cache (LRU_data_t data, char * str)"
.PP
Definition at line 118 of file nfs_tools.c.
.SS "void socket_setoptions (int socketFd)"
.PP
Definition at line 196 of file nfs_tools.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for Daemon Main from the source code.
