.TH "stuff_alloc.h" 3 "15 Sep 2010" "Version 0.1" "Stuff Allocator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
stuff_alloc.h \- 
.PP
Stuff allocators macros.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdlib.h>\fP
.br
\fC#include 'BuddyMalloc.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMem_Alloc\fP(a)   BuddyMallocExit( a )"
.br
.ti -1c
.RI "#define \fBMem_Calloc\fP(s1, s2)   BuddyCalloc( s1, s2 )"
.br
.ti -1c
.RI "#define \fBMem_Realloc\fP(p, s)   BuddyRealloc( (caddr_t)(p), s )"
.br
.ti -1c
.RI "#define \fBMem_Free\fP(a)   BuddyFree((caddr_t) (a))"
.br
.ti -1c
.RI "#define \fBMem_Errno\fP   BuddyErrno"
.br
.ti -1c
.RI "#define \fBGetPreferedPool\fP(_n, _s)   BuddyPreferedPoolCount( _n, _s)"
.br
.ti -1c
.RI "#define \fBSTUFF_PREALLOC\fP(_pool, _nb, _type, _name_next)"
.br
.ti -1c
.RI "#define \fBGET_PREALLOC\fP(_entry, _pool, _nb, _type, _name_next)"
.br
.ti -1c
.RI "#define \fBRELEASE_PREALLOC\fP(_entry, _pool, _name_next)"
.br
.ti -1c
.RI "#define \fBSTUFF_PREALLOC_CONSTRUCT\fP(_pool, _nb, _type, _name_next, _construct)"
.br
.ti -1c
.RI "#define \fBGET_PREALLOC_CONSTRUCT\fP(_entry, _pool, _nb, _type, _name_next, _construct)"
.br
.ti -1c
.RI "#define \fBRELEASE_PREALLOC_DESTRUCT\fP(entry, pool, name_next, destruct)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Stuff allocators macros. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
leibovic 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2006/01/24 15:06:30 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.18 
.RE
.PP
\fBstuff_alloc.h\fP : Stuff allocators macros. 
.PP
Definition in file \fBstuff_alloc.h\fP.
.SH "Define Documentation"
.PP 
.SS "#define GET_PREALLOC(_entry, _pool, _nb, _type, _name_next)"\fBValue:\fP
.PP
.nf
do                                                                        \
{                                                                         \
                                                                          \
  if( ( _pool == NULL ) && ( _nb != 0 ) )                                 \
    STUFF_PREALLOC( _pool, _nb, _type, _name_next ) ;                     \
                                                                          \
  if( _pool != NULL )                                                     \
    {                                                                     \
      _entry = _pool ;                                                    \
      _pool = _entry->_name_next ;                                        \
    }                                                                     \
  else                                                                    \
   _entry = NULL ;                                                        \
} while( 0 )
.fi
GET_PREALLOC: Gets an entry in a preallocated pool.
.PP
This macro is used to get an entry from a pre-allocated pool. If the pool is empty, the macro STUFF_PREALLOC will be called with the same last four arguments to extend the pool. If nb is set to zero during this call, STUFF_PREALLOC is not called and no entry is get from the pool that is empty.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry we need. 
.br
\fIpool\fP the preallocted pool that we want to init. 
.br
\fInb\fP the number of entries to be allocated. 
.br
\fItype\fP the type of the entries to be allocated. 
.br
\fIname_next\fP the name of the field, in structure of type 'type' which pointer to the next entry.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (this is a macro), but entry will be NULL if an error occures. 
.RE
.PP

.PP
Definition at line 137 of file stuff_alloc.h.
.SS "#define GET_PREALLOC_CONSTRUCT(_entry, _pool, _nb, _type, _name_next, _construct)"\fBValue:\fP
.PP
.nf
do                                                                             \
{                                                                              \
  if( ( _pool == NULL ) && ( _nb != 0 ) )                                      \
    STUFF_PREALLOC_CONSTRUCT( _pool, _nb, _type, _name_next, _construct ) ;    \
                                                                               \
  if( _pool != NULL )                                                          \
    {                                                                          \
      _entry = _pool ;                                                         \
      _pool = _entry->_name_next ;                                             \
    }                                                                          \
  else                                                                         \
   _entry = NULL ;                                                             \
} while( 0 )
.fi
GET_PREALLOC_CONSTRUCT: Gets an entry in a preallocated pool.
.PP
This macro is used to get an entry from a pre-allocated pool. If the pool is empty, the macro STUFF_PREALLOC will be called with the same last four arguments to extend the pool. If nb is set to zero during this call, STUFF_PREALLOC is not called and no entry is get from the pool that is empty.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry we need. 
.br
\fIpool\fP the preallocted pool that we want to init. 
.br
\fInb\fP the number of entries to be allocated. 
.br
\fItype\fP the type of the entries to be allocated. 
.br
\fIname_next\fP the name of the field, in structure of type 'type' which pointer to the next entry. 
.br
\fIconstruct\fP the constructor for the object: takes a pointer to void as argument and returns void
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (this is a macro), but entry will be NULL if an error occures. 
.RE
.PP

.PP
Definition at line 241 of file stuff_alloc.h.
.SS "#define GetPreferedPool(_n, _s)   BuddyPreferedPoolCount( _n, _s)"
.PP
Definition at line 72 of file stuff_alloc.h.
.SS "#define Mem_Alloc(a)   BuddyMallocExit( a )"
.PP
Definition at line 64 of file stuff_alloc.h.
.SS "#define Mem_Calloc(s1, s2)   BuddyCalloc( s1, s2 )"
.PP
Definition at line 65 of file stuff_alloc.h.
.SS "#define Mem_Errno   BuddyErrno"
.PP
Definition at line 70 of file stuff_alloc.h.
.SS "#define Mem_Free(a)   BuddyFree((caddr_t) (a))"
.PP
Definition at line 69 of file stuff_alloc.h.
.SS "#define Mem_Realloc(p, s)   BuddyRealloc( (caddr_t)(p), s )"
.PP
Definition at line 66 of file stuff_alloc.h.
.SS "#define RELEASE_PREALLOC(_entry, _pool, _name_next)"\fBValue:\fP
.PP
.nf
do                                                                        \
{                                                                         \
  _entry->_name_next = _pool ;                                            \
  _pool = _entry ;                                                        \
} while( 0 )
.fi
RELEASE_PREALLOC: Releases an entry and puts it back to the pool.
.PP
When an entry is no used any more, this macro is used to put it back to the pool, so that it could be reuse later. The released entry is chained to the pool, through the 'name_next' field.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry to be released. 
.br
\fIpool\fP the pool to which the entry belongs. 
.br
\fIname_next\fP the name of the field, in structure of type 'type' which pointer to the next entry.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (this is a macro). 
.RE
.PP

.PP
Definition at line 168 of file stuff_alloc.h.
.SS "#define RELEASE_PREALLOC_DESTRUCT(entry, pool, name_next, destruct)"\fBValue:\fP
.PP
.nf
do                                                                        \
{                                                                         \
  destruct( (void *)entry ) ;                                             \
  entry->name_next = pool ;                                               \
  pool = entry ;                                                          \
} while( 0 )
.fi
RELEASE_PREALLOC_DESTRUCT: Releases an entry and puts it back to the pool with a destructor.
.PP
When an entry is no used any more, this macro is used to put it back to the pool, so that it could be reuse later. The released entry is chained to the pool, through the 'name_next' field.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry to be released. 
.br
\fIpool\fP the pool to which the entry belongs. 
.br
\fIname_next\fP the name of the field, in structure of type 'type' which pointer to the next entry. 
.br
\fIdestruct\fP the destructor for the object: takes a pointer to void as argument and returns void
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (this is a macro). 
.RE
.PP

.PP
Definition at line 272 of file stuff_alloc.h.
.SS "#define STUFF_PREALLOC(_pool, _nb, _type, _name_next)"\fBValue:\fP
.PP
.nf
do                                                                            \
{                                                                             \
  unsigned int _i = 0 ;                                                       \
  unsigned int _prefered = 0 ;                                                \
                                                                              \
  _prefered = GetPreferedPool( _nb, sizeof(_type) );                          \
  _pool= NULL ;                                                               \
                                                                              \
  if( ( _pool = ( _type *)Mem_Alloc( sizeof( _type ) * _prefered ) ) != NULL ) \
    {                                                                         \
      for( _i = 0 ; _i < ( unsigned int)_prefered ; _i++ )                    \
        {                                                                     \
          if( _i != _prefered -1 )                                            \
            _pool[_i]._name_next = &(_pool[_i+1]) ;                           \
          else                                                                \
            _pool[_i]._name_next = NULL ;                                     \
        }                                                                     \
    }                                                                         \
} while( 0 )
.fi
STUFF_PREALLOC: Allocates a pool of pre-allocated entries.
.PP
This macro Allocates a pool of pre-allocated entries. It calls malloc to get the spool as an arry and then chains all the entries together. Each entry is supposed to have a specific 'next' field, a pointer to an object of its own type, to be used as a pointer to the next entry in the pool.
.PP
If BuddyMalloc is used, it is supposed to be already initialised.
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP the preallocted pool that we want to init. 
.br
\fInb\fP the number of entries to be allocated. 
.br
\fItype\fP the type of the entries to be allocated. 
.br
\fIname_next\fP the name of the field, in structure of type 'type' which pointer to the next entry.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (this is a macro), but pool will be NULL if an error occures. 
.RE
.PP

.PP
Definition at line 98 of file stuff_alloc.h.
.SS "#define STUFF_PREALLOC_CONSTRUCT(_pool, _nb, _type, _name_next, _construct)"\fBValue:\fP
.PP
.nf
do                                                                        \
{                                                                         \
  unsigned int _i = 0 ;                                                   \
  unsigned int _prefered = 0 ;                                            \
                                                                          \
  _prefered = GetPreferedPool( _nb, sizeof(_type) );                       \
                                                                          \
  _pool = ( _type *)Mem_Calloc( _prefered, sizeof( _type ) ) ;            \
                                                                          \
  if( _pool != NULL )                                                     \
    {                                                                     \
      for( _i = 0 ; _i < _prefered ; _i++ )                               \
        {                                                                 \
          if( _i != _prefered -1 )                                        \
            _pool[_i]._name_next = &(_pool[_i+1]) ;                       \
          else                                                            \
            _pool[_i]._name_next = NULL ;                                 \
                                                                          \
          if( _construct != NULL )                                        \
            _construct( (void *)&(_pool[_i]) )  ;                         \
                                                                          \
        }                                                                 \
    }                                                                     \
} while( 0 )
.fi
STUFF_PREALLOC_CONSTRUCT: Allocates a pool of pre-allocated entries with a call to a constructor.
.PP
This macro Allocates a pool of pre-allocated entries. It calls malloc to get the spool as an arry and then chains all the entries together. Each entry is supposed to have a specific 'next' field, a pointer to an object of its own type, to be used as a pointer to the next entry in the pool.
.PP
If BuddyMalloc is used, it is supposed to be already initialised.
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP the preallocted pool that we want to init. 
.br
\fInb\fP the number of entries to be allocated. 
.br
\fItype\fP the type of the entries to be allocated. 
.br
\fIname_next\fP the name of the field, in structure of type 'type' which pointer to the next entry. 
.br
\fIconstruct\fP the constructor for the object: takes a pointer to void as argument and returns void
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (this is a macro), but pool will be NULL if an error occures. 
.RE
.PP

.PP
Definition at line 196 of file stuff_alloc.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for Stuff Allocator from the source code.
