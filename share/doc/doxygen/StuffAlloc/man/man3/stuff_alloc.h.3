.TH "stuff_alloc.h" 3 "9 Apr 2008" "Version 0.1" "Stuff Allocator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
stuff_alloc.h \- Stuff allocators macros. 
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib.h>\fP
.br
\fC#include 'BuddyMalloc.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMem_Alloc\fP(a)   BuddyMalloc( a )"
.br
.ti -1c
.RI "#define \fBSTUFF_PREALLOC\fP(pool, nb, type, name_next)"
.br
.ti -1c
.RI "#define \fBGET_PREALLOC\fP(entry, pool, nb, type, name_next)"
.br
.ti -1c
.RI "#define \fBRELEASE_PREALLOC\fP(entry, pool, name_next)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Stuff allocators macros. 

\fBAuthor:\fP
.RS 4
\fBAuthor\fP.RS 4
deniel 
.RE
.PP
.RE
.PP
\fBDate:\fP
.RS 4
\fBDate\fP.RS 4
2005/05/03 07:24:33 
.RE
.PP
.RE
.PP
\fBVersion:\fP
.RS 4
\fBRevision\fP.RS 4
1.4 
.RE
.PP
.RE
.PP
\fBstuff_alloc.h\fP : Stuff allocators macros.
.PP
\fBHeader\fP.RS 4
/cea/home/cvs/cvs/SHERPA/BaseCvs/GANESHA/src/StuffAlloc/stuff_alloc.h,v 1.4 2005/05/03 07:24:33 deniel Exp 
.RE
.PP
.PP
\fBLog\fP.RS 4
\fBstuff_alloc.h\fP,v 
.RE
.PP
Revision 1.4 2005/05/03 07:24:33 deniel Using Buddy System instead of regular malloc/free
.PP
Revision 1.3 2004/10/20 16:51:25 deniel Comments added to stuuf allocator macros
.PP
Revision 1.2 2004/10/19 14:40:26 deniel Ok for UDP and TCP processing
.PP
Revision 1.2 2004/10/18 08:43:49 deniel Many changes in protootypes ans data structures Adding some functions in preallocator
.PP
Revision 1.1 2004/10/13 13:01:44 deniel Now using the stuff allocator
.PP
Definition in file \fBstuff_alloc.h\fP.
.SH "Define Documentation"
.PP 
.SS "#define GET_PREALLOC(entry, pool, nb, type, name_next)"
.PP
\fBValue:\fP
.PP
.nf
do                                                                        \
{                                                                         \
                                                                          \
  if( ( pool == NULL ) && ( nb != 0 ) )                                   \
    STUFF_PREALLOC( pool, nb, type, name_next ) ;                         \
                                                                          \
  if( pool != NULL )                                                      \
    {                                                                     \
      entry = pool ;                                                      \
      pool = entry->name_next ;                                           \
    }                                                                     \
  else                                                                    \
   entry = NULL ;                                                         \
} while( 0 )
.fi
GET_PREALLOC: Gets an entry in a preallocated pool.
.PP
This macro is used to get an entry from a pre-allocated pool. If the pool is empty, the macro STUFF_PREALLOC will be called with the same last four arguments to extend the pool. If nb is set to zero during this call, STUFF_PREALLOC is not called and no entry is get from the pool that is empty.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry we need. 
.br
\fIpool\fP the preallocted pool that we want to init. 
.br
\fInb\fP the number of entries to be allocated. 
.br
\fItype\fP the type of the entries to be allocated. 
.br
\fIname_next\fP the name of the field, in structure of type 'type' which pointer to the next entry.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (this is a macro), but entry will be NULL if an error occures. 
.RE
.PP

.PP
Definition at line 105 of file stuff_alloc.h.
.SS "#define Mem_Alloc(a)   BuddyMalloc( a )"
.PP
Definition at line 43 of file stuff_alloc.h.
.SS "#define RELEASE_PREALLOC(entry, pool, name_next)"
.PP
\fBValue:\fP
.PP
.nf
do                                                                        \
{                                                                         \
  entry->name_next = pool ;                                               \
  pool = entry ;                                                          \
} while( 0 )
.fi
RELEASE_PREALLOC: Releases an entry and puts it back to the pool.
.PP
When an entry is no used any more, this macro is used to put it back to the pool, so that it could be reuse later. The released entry is chained to the pool, through the 'name_next' field.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry to be released. 
.br
\fIpool\fP the pool to which the entry belongs. 
.br
\fIname_next\fP the name of the field, in structure of type 'type' which pointer to the next entry.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (this is a macro). 
.RE
.PP

.PP
Definition at line 136 of file stuff_alloc.h.
.SS "#define STUFF_PREALLOC(pool, nb, type, name_next)"
.PP
\fBValue:\fP
.PP
.nf
do                                                                        \
{                                                                         \
  int i = 0 ;                                                             \
                                                                          \
  pool= NULL ;                                                            \
                                                                          \
  if( ( pool = ( type *)Mem_Alloc( sizeof( type ) * nb ) ) != NULL )         \
    {                                                                     \
      for( i = 0 ; i < nb ; i++ )                                         \
        {                                                                 \
          if( i != nb -1 )                                                \
            pool[i].name_next = &(pool[i+1]) ;                            \
          else                                                            \
            pool[i].name_next = NULL ;                                    \
        }                                                                 \
    }                                                                     \
} while( 0 )
.fi
STUFF_PREALLOC: Allocates a pool of pre-allocated entries.
.PP
This macro Allocates a pool of pre-allocated entries. It calls malloc to get the spool as an arry and then chains all the entries together. Each entry is supposed to have a specific 'next' field, a pointer to an object of its own type, to be used as a pointer to the next entry in the pool.
.PP
If BuddyMalloc is used, it is supposed to be already initialised.
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP the preallocted pool that we want to init. 
.br
\fInb\fP the number of entries to be allocated. 
.br
\fItype\fP the type of the entries to be allocated. 
.br
\fIname_next\fP the name of the field, in structure of type 'type' which pointer to the next entry.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (this is a macro), but pool will be NULL if an error occures. 
.RE
.PP

.PP
Definition at line 66 of file stuff_alloc.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for Stuff Allocator from the source code.
