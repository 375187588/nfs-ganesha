.TH "nfs4_pseudo.c" 3 "15 Sep 2010" "Version 0.1" "NFS and Mount protocols layer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nfs4_pseudo.c \- 
.PP
Routines used for managing the NFS4 pseudo file system.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <pthread.h>\fP
.br
\fC#include <fcntl.h>\fP
.br
\fC#include <sys/file.h>\fP
.br
\fC#include 'HashData.h'\fP
.br
\fC#include 'HashTable.h'\fP
.br
\fC#include <rpc/types.h>\fP
.br
\fC#include <rpc/rpc.h>\fP
.br
\fC#include <rpc/auth.h>\fP
.br
\fC#include <rpc/pmap_clnt.h>\fP
.br
\fC#include 'log_macros.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include 'nfs4.h'\fP
.br
\fC#include 'nfs_core.h'\fP
.br
\fC#include 'nfs_proto_functions.h'\fP
.br
\fC#include 'nfs_tools.h'\fP
.br
\fC#include 'nfs_exports.h'\fP
.br
\fC#include 'nfs_file_handle.h'\fP
.br
\fC#include 'cache_inode.h'\fP
.br
\fC#include 'cache_content.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBNB_TOK_ARG\fP   10"
.br
.ti -1c
.RI "#define \fBNB_OPT_TOK\fP   10"
.br
.ti -1c
.RI "#define \fBNB_TOK_PATH\fP   20"
.br
.ti -1c
.RI "#define \fBarg_GETATTR4\fP   op->nfs_argop4_u.opgetattr"
.br
.ti -1c
.RI "#define \fBres_GETATTR4\fP   resp->nfs_resop4_u.opgetattr"
.br
.ti -1c
.RI "#define \fBres_ACCESS4\fP   resp->nfs_resop4_u.opaccess"
.br
.ti -1c
.RI "#define \fBarg_ACCESS4\fP   op->nfs_argop4_u.opaccess"
.br
.ti -1c
.RI "#define \fBarg_LOOKUP4\fP   op->nfs_argop4_u.oplookup"
.br
.ti -1c
.RI "#define \fBres_LOOKUP4\fP   resp->nfs_resop4_u.oplookup"
.br
.ti -1c
.RI "#define \fBarg_LOOKUPP4\fP   op->nfs_argop4_u.oplookupp"
.br
.ti -1c
.RI "#define \fBres_LOOKUPP4\fP   resp->nfs_resop4_u.oplookupp"
.br
.ti -1c
.RI "#define \fBarg_READDIR4\fP   op->nfs_argop4_u.opreaddir"
.br
.ti -1c
.RI "#define \fBres_READDIR4\fP   resp->nfs_resop4_u.opreaddir"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "uint64_t \fBnfs4_PseudoToId\fP (nfs_fh4 *fh4p)"
.br
.ti -1c
.RI "pseudofs_t * \fBnfs4_GetPseudoFs\fP (void)"
.br
.ti -1c
.RI "int \fBnfs4_ExportToPseudoFS\fP (exportlist_t *pexportlist)"
.br
.ti -1c
.RI "int \fBnfs4_PseudoToFattr\fP (pseudofs_entry_t *psfsp, fattr4 *Fattr, compound_data_t *data, nfs_fh4 *objFH, bitmap4 *Bitmap)"
.br
.ti -1c
.RI "int \fBnfs4_FhandleToPseudo\fP (nfs_fh4 *fh4p, pseudofs_t *psfstree, pseudofs_entry_t *psfsentry)"
.br
.ti -1c
.RI "int \fBnfs4_PseudoToFhandle\fP (nfs_fh4 *fh4p, pseudofs_entry_t *psfsentry)"
.br
.ti -1c
.RI "int \fBnfs4_CreateROOTFH4\fP (nfs_fh4 *fh4p, compound_data_t *data)"
.br
.ti -1c
.RI "int \fBnfs4_op_getattr_pseudo\fP (struct nfs_argop4 *op, compound_data_t *data, struct nfs_resop4 *resp)"
.br
.ti -1c
.RI "int \fBnfs4_op_access_pseudo\fP (struct nfs_argop4 *op, compound_data_t *data, struct nfs_resop4 *resp)"
.br
.ti -1c
.RI "int \fBnfs4_op_lookup_pseudo\fP (struct nfs_argop4 *op, compound_data_t *data, struct nfs_resop4 *resp)"
.br
.ti -1c
.RI "int \fBnfs4_op_lookupp_pseudo\fP (struct nfs_argop4 *op, compound_data_t *data, struct nfs_resop4 *resp)"
.br
.ti -1c
.RI "int \fBnfs4_op_readdir_pseudo\fP (struct nfs_argop4 *op, compound_data_t *data, struct nfs_resop4 *resp)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "time_t \fBServerBootTime\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Routines used for managing the NFS4 pseudo file system. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
leibovic 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2006/02/08 12:49:32 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.24 
.RE
.PP
\fBnfs4_pseudo.c\fP: Routines used for managing the NFS4 pseudo file system. 
.PP
Definition in file \fBnfs4_pseudo.c\fP.
.SH "Define Documentation"
.PP 
.SS "#define arg_ACCESS4   op->nfs_argop4_u.opaccess"
.PP
Definition at line 1385 of file nfs4_pseudo.c.
.SS "#define arg_GETATTR4   op->nfs_argop4_u.opgetattr"nfs4_op_getattr_pseudo: Gets attributes for directory in pseudo fs
.PP
Gets attributes for directory in pseudo fs. These are hardcoded constants.
.PP
\fBParameters:\fP
.RS 4
\fIop\fP [IN] pointer to nfs4_op arguments 
.br
\fIdata\fP [INOUT] Pointer to the compound request's data 
.br
\fIresp\fP [IN] Pointer to nfs4_op results
.RE
.PP
\fBReturns:\fP
.RS 4
NFS4_OK 
.RE
.PP

.PP
Definition at line 1336 of file nfs4_pseudo.c.
.SS "#define arg_LOOKUP4   op->nfs_argop4_u.oplookup"nfs4_op_lookup_pseudo: looks up into the pseudo fs.
.PP
looks up into the pseudo fs. If a junction traversal is detected, does the necessary stuff for correcting traverse.
.PP
\fBParameters:\fP
.RS 4
\fIop\fP [IN] pointer to nfs4_op arguments 
.br
\fIdata\fP [INOUT] Pointer to the compound request's data 
.br
\fIresp\fP [IN] Pointer to nfs4_op results
.RE
.PP
\fBReturns:\fP
.RS 4
NFS4_OK if successfull, other values show an error. 
.RE
.PP

.PP
Definition at line 1418 of file nfs4_pseudo.c.
.SS "#define arg_LOOKUPP4   op->nfs_argop4_u.oplookupp"nfs4_op_lookupp_pseudo: looks up into the pseudo fs for the parent directory
.PP
looks up into the pseudo fs for the parent directory of the current file handle.
.PP
\fBParameters:\fP
.RS 4
\fIop\fP [IN] pointer to nfs4_op arguments 
.br
\fIdata\fP [INOUT] Pointer to the compound request's data 
.br
\fIresp\fP [IN] Pointer to nfs4_op results
.RE
.PP
\fBReturns:\fP
.RS 4
NFS4_OK if successfull, other values show an error. 
.RE
.PP

.PP
Definition at line 1621 of file nfs4_pseudo.c.
.SS "#define arg_READDIR4   op->nfs_argop4_u.opreaddir"nfs4_op_readdir_pseudo: Reads a directory in the pseudo fs
.PP
Reads a directory in the pseudo fs.
.PP
\fBParameters:\fP
.RS 4
\fIop\fP [IN] pointer to nfs4_op arguments 
.br
\fIdata\fP [INOUT] Pointer to the compound request's data 
.br
\fIresp\fP [IN] Pointer to nfs4_op results
.RE
.PP
\fBReturns:\fP
.RS 4
NFS4_OK if successfull, other values show an error. 
.RE
.PP

.PP
Definition at line 1680 of file nfs4_pseudo.c.
.SS "#define NB_OPT_TOK   10"
.PP
Definition at line 75 of file nfs4_pseudo.c.
.SS "#define NB_TOK_ARG   10"
.PP
Definition at line 74 of file nfs4_pseudo.c.
.SS "#define NB_TOK_PATH   20"
.PP
Definition at line 76 of file nfs4_pseudo.c.
.SS "#define res_ACCESS4   resp->nfs_resop4_u.opaccess"nfs4_op_access_pseudo: Checks for object accessibility in pseudo fs.
.PP
Checks for object accessibility in pseudo fs. All entries in pseudo fs return can't be accessed as ACCESS4_MODIFY|ACCESS4_EXTEND|ACCESS4_DELETE because pseudo fs is behaving as a read-only fs.
.PP
\fBParameters:\fP
.RS 4
\fIop\fP [IN] pointer to nfs4_op arguments 
.br
\fIdata\fP [INOUT] Pointer to the compound request's data 
.br
\fIresp\fP [IN] Pointer to nfs4_op results
.RE
.PP
\fBReturns:\fP
.RS 4
NFS4_OK 
.RE
.PP

.PP
Definition at line 1384 of file nfs4_pseudo.c.
.SS "#define res_GETATTR4   resp->nfs_resop4_u.opgetattr"
.PP
Definition at line 1337 of file nfs4_pseudo.c.
.SS "#define res_LOOKUP4   resp->nfs_resop4_u.oplookup"
.PP
Definition at line 1419 of file nfs4_pseudo.c.
.SS "#define res_LOOKUPP4   resp->nfs_resop4_u.oplookupp"
.PP
Definition at line 1622 of file nfs4_pseudo.c.
.SS "#define res_READDIR4   resp->nfs_resop4_u.opreaddir"
.PP
Definition at line 1681 of file nfs4_pseudo.c.
.SH "Function Documentation"
.PP 
.SS "int nfs4_CreateROOTFH4 (nfs_fh4 * fh4p, compound_data_t * data)"nfs4_CreateROOTFH: Creates the file handle for the '/' of the pseudo file system
.PP
Creates the file handle for the '/' of the pseudo file syste.
.PP
\fBParameters:\fP
.RS 4
\fIfh4p\fP [OUT] pointer to the file handle to be allocated 
.br
\fIdata\fP [INOUT] pointer to the compound request's data
.RE
.PP
\fBReturns:\fP
.RS 4
NFS4_OK if successfull, NFS4ERR_BADHANDLE if an error occured when creating the file handle. 
.RE
.PP

.PP
Definition at line 1294 of file nfs4_pseudo.c.
.SS "int nfs4_ExportToPseudoFS (exportlist_t * pexportlist)"nfs4_ExportToPseudoFS: Build a pseudo fs from an exportlist
.PP
Build a pseudo fs from an exportlist. This export list itself is obtained by reading the configuration file.
.PP
\fBReturns:\fP
.RS 4
the pseudo fs root 
.RE
.PP

.PP
Definition at line 131 of file nfs4_pseudo.c.
.SS "int nfs4_FhandleToPseudo (nfs_fh4 * fh4p, pseudofs_t * psfstree, pseudofs_entry_t * psfsentry)"nfs4_FhandleToPseudo: converts a NFSv4 file handle fs to an id in the pseudo
.PP
Converts a NFSv4 file handle fs to an id in the pseudo, and check if the fh is related to a pseudo entry
.PP
\fBParameters:\fP
.RS 4
\fIfh4p\fP [IN] pointer to nfsv4 filehandle 
.br
\fIpsfsentry\fP [OUT] pointer to pseudofs entry
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if successfull, FALSE if an error occured (this means the fh4 was not related to a pseudo entry) 
.RE
.PP

.PP
Definition at line 1233 of file nfs4_pseudo.c.
.SS "pseudofs_t* nfs4_GetPseudoFs (void)"nfs4_GetPseudoFs: Gets the root of the pseudo file system.
.PP
Gets the root of the pseudo file system. This is only a wrapper to static variable gPseudoFs.
.PP
\fBReturns:\fP
.RS 4
the pseudo fs root 
.RE
.PP

.PP
Definition at line 117 of file nfs4_pseudo.c.
.SS "int nfs4_op_access_pseudo (struct nfs_argop4 * op, compound_data_t * data, struct nfs_resop4 * resp)"
.PP
Definition at line 1387 of file nfs4_pseudo.c.
.SS "int nfs4_op_getattr_pseudo (struct nfs_argop4 * op, compound_data_t * data, struct nfs_resop4 * resp)"
.PP
Definition at line 1339 of file nfs4_pseudo.c.
.SS "int nfs4_op_lookup_pseudo (struct nfs_argop4 * op, compound_data_t * data, struct nfs_resop4 * resp)"
.PP
Definition at line 1421 of file nfs4_pseudo.c.
.SS "int nfs4_op_lookupp_pseudo (struct nfs_argop4 * op, compound_data_t * data, struct nfs_resop4 * resp)"
.PP
Definition at line 1624 of file nfs4_pseudo.c.
.SS "int nfs4_op_readdir_pseudo (struct nfs_argop4 * op, compound_data_t * data, struct nfs_resop4 * resp)"
.PP
Definition at line 1683 of file nfs4_pseudo.c.
.SS "int nfs4_PseudoToFattr (pseudofs_entry_t * psfsp, fattr4 * Fattr, compound_data_t * data, nfs_fh4 * objFH, bitmap4 * Bitmap)"nfs4_PseudoToFattr: Gets the attributes for an entry in the pseudofs
.PP
Gets the attributes for an entry in the pseudofs. Because pseudo fs structure is very simple (it is read-only and contains only directory that belongs to root), a set of standardized values is returned
.PP
\fBParameters:\fP
.RS 4
\fIpsfp\fP [IN] pointer to the pseudo fs entry on which attributes are queried 
.br
\fIFattr\fP [OUT] Pointer to the buffer that will contain the queried attributes 
.br
\fIdata\fP [INOUT] Pointer to the compound request's data 
.br
\fIBitmap\fP [IN] Pointer to a bitmap that describes the attributes to be returned
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successfull, -1 if something wrong occured. In this case, the reason is that too many attributes were asked. 
.RE
.PP

.PP
\fBTodo\fP
.RS 4
: not the right answer, actual quotas should be implemented 
.RE
.PP
.PP
\fBTodo\fP
.RS 4
: not the right answer, actual quotas should be implemented 
.RE
.PP
.PP
\fBTodo\fP
.RS 4
: BUGAZOMEU: Allocation at NULL Adress here.... 
.RE
.PP
.PP
\fBTodo\fP
.RS 4
: BUGAZOMEU: Allocation at NULL Adress here.... 
.RE
.PP

.PP
Definition at line 299 of file nfs4_pseudo.c.
.SS "int nfs4_PseudoToFhandle (nfs_fh4 * fh4p, pseudofs_entry_t * psfsentry)"nfs4_PseudoToFhandle: converts an id in the pseudo fs to a NFSv4 file handle
.PP
Converts an id in the pseudo fs to a NFSv4 file handle.
.PP
\fBParameters:\fP
.RS 4
\fIfh4p\fP [OUT] pointer to nfsv4 filehandle 
.br
\fIpsfsentry\fP [IN] pointer to pseudofs entry
.RE
.PP
\fBReturns:\fP
.RS 4
NFS4_OK if successfull, other values show an error. 
.RE
.PP

.PP
Definition at line 1264 of file nfs4_pseudo.c.
.SS "uint64_t nfs4_PseudoToId (nfs_fh4 * fh4p)"nfs4_PseudoToId: TConverts a file handle (to a pseudo object) to the id of this pseudo object in the pseudofs
.PP
This routine merely extracts a field from the file handle which is not seen as opaque in this case. Because file handle are opaque structure, it is prefered to have a dedicated function for this and so hiding the file handle internal structure.
.PP
\fBParameters:\fP
.RS 4
\fIfh4p\fP [IN] pointer to the file handle to process.
.RE
.PP
\fBReturns:\fP
.RS 4
the pseudo id found 
.RE
.PP
\fBSee also:\fP
.RS 4
nfs_GetPseudoFs 
.RE
.PP

.PP
Definition at line 97 of file nfs4_pseudo.c.
.SH "Variable Documentation"
.PP 
.SS "time_t \fBServerBootTime\fP"
.SH "Author"
.PP 
Generated automatically by Doxygen for NFS and Mount protocols layer from the source code.
