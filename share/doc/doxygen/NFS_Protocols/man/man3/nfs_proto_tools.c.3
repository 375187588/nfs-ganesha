.TH "nfs_proto_tools.c" 3 "9 Apr 2008" "Version 0.1" "NFS and Mount protocols layer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nfs_proto_tools.c \- A set of functions used to managed NFS. 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <pthread.h>\fP
.br
\fC#include <fcntl.h>\fP
.br
\fC#include <sys/file.h>\fP
.br
\fC#include <pwd.h>\fP
.br
\fC#include <grp.h>\fP
.br
\fC#include 'HashData.h'\fP
.br
\fC#include 'HashTable.h'\fP
.br
\fC#include <rpc/types.h>\fP
.br
\fC#include <rpc/rpc.h>\fP
.br
\fC#include <rpc/auth.h>\fP
.br
\fC#include <rpc/pmap_clnt.h>\fP
.br
\fC#include 'log_functions.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include 'nfs23.h'\fP
.br
\fC#include 'nfs4.h'\fP
.br
\fC#include 'mount.h'\fP
.br
\fC#include 'nfs_core.h'\fP
.br
\fC#include 'cache_inode.h'\fP
.br
\fC#include 'cache_content.h'\fP
.br
\fC#include 'nfs_exports.h'\fP
.br
\fC#include 'nfs_creds.h'\fP
.br
\fC#include 'nfs_proto_functions.h'\fP
.br
\fC#include 'nfs_tools.h'\fP
.br
\fC#include 'nfs_file_handle.h'\fP
.br
\fC#include 'nfs_proto_tools.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "cache_entry_t * \fBnfs_FhandleToCache\fP (u_long rq_vers, fhandle2 *pfh2, nfs_fh3 *pfh3, nfs_fh4 *pfh4, nfsstat2 *pstatus2, nfsstat3 *pstatus3, nfsstat4 *pstatus4, fsal_attrib_list_t *pattr, fsal_op_context_t *pcontext, cache_inode_client_t *pclient, hash_table_t *ht, int *prc)"
.br
.ti -1c
.RI "int \fBnfs_SetPostOpAttr\fP (fsal_op_context_t *pcontext, exportlist_t *pexport, cache_entry_t *pentry, fsal_attrib_list_t *pfsal_attr, post_op_attr *presult)"
.br
.ti -1c
.RI "void \fBnfs_SetPreOpAttr\fP (fsal_attrib_list_t *pfsal_attr, pre_op_attr *pattr)"
.br
.ti -1c
.RI "void \fBnfs_SetWccData\fP (fsal_op_context_t *pcontext, exportlist_t *pexport, cache_entry_t *pentry, fsal_attrib_list_t *pbefore_attr, fsal_attrib_list_t *pafter_attr, wcc_data *pwcc_data)"
.br
.ti -1c
.RI "int \fBnfs_RetryableError\fP (cache_inode_status_t cache_status)"
.br
.ti -1c
.RI "void \fBnfs_SetFailedStatus\fP (fsal_op_context_t *pcontext, exportlist_t *pexport, int version, cache_inode_status_t status, nfsstat2 *pstatus2, nfsstat3 *pstatus3, cache_entry_t *pentry0, post_op_attr *ppost_op_attr, cache_entry_t *pentry1, fsal_attrib_list_t *ppre_vattr1, wcc_data *pwcc_data1, cache_entry_t *pentry2, fsal_attrib_list_t *ppre_vattr2, wcc_data *pwcc_data2)"
.br
.ti -1c
.RI "int \fBnfs4_FSALattr_To_Fattr\fP (exportlist_t *pexport, fsal_attrib_list_t *pattr, fattr4 *Fattr, compound_data_t *data, nfs_fh4 *objFH, bitmap4 *Bitmap)"
.br
.ti -1c
.RI "int \fBnfs3_Sattr_To_FSALattr\fP (fsal_attrib_list_t *pFSAL_attr, sattr3 *psattr)"
.br
.ti -1c
.RI "int \fBnfs2_FSALattr_To_Fattr\fP (exportlist_t *pexport, fsal_attrib_list_t *pFSAL_attr, fattr2 *pFattr)"
.br
.ti -1c
.RI "int \fBnfs4_SetCompoundExport\fP (compound_data_t *data)"
.br
.ti -1c
.RI "int \fBnfs4_FhandleToExId\fP (nfs_fh4 *fh4p, unsigned short *ExIdp)"
.br
.ti -1c
.RI "void \fBnfs4_stringid_split\fP (char *buff, char *uidname, char *domainname)"
.br
.ti -1c
.RI "int \fButf82str\fP (char *str, utf8string *utf8str)"
.br
.ti -1c
.RI "int \fBstr2utf8\fP (char *str, utf8string *utf8str)"
.br
.ti -1c
.RI "seqid4 \fBnfs4_NextSeqId\fP (seqid4 seqid)"
.br
.ti -1c
.RI "void \fBnfs4_bitmap4_to_list\fP (bitmap4 *b, uint_t *plen, uint32_t *pval)"
.br
.ti -1c
.RI "void \fBnfs4_list_to_bitmap4\fP (bitmap4 *b, uint_t *plen, uint32_t *pval)"
.br
.ti -1c
.RI "int \fBnfs3_FSALattr_To_Fattr\fP (exportlist_t *pexport, fsal_attrib_list_t *FSAL_attr, fattr3 *Fattr)"
.br
.ti -1c
.RI "int \fBnfs2_Sattr_To_FSALattr\fP (fsal_attrib_list_t *pFSAL_attr, sattr2 *Fattr)"
.br
.ti -1c
.RI "int \fBnfs4_Fattr_Check_Access\fP (fattr4 *Fattr, int access)"
.br
.ti -1c
.RI "int \fBnfs4_Fattr_Check_Access_Bitmap\fP (bitmap4 *pbitmap, int access)"
.br
.ti -1c
.RI "int \fBnfs4_Fattr_Supported\fP (fattr4 *Fattr)"
.br
.ti -1c
.RI "int \fBnfs4_Fattr_Supported_Bitmap\fP (bitmap4 *pbitmap)"
.br
.ti -1c
.RI "int \fBnfs4_Fattr_cmp\fP (fattr4 *Fattr1, fattr4 *Fattr2)"
.br
.ti -1c
.RI "int \fBnfs4_Fattr_To_FSAL_attr\fP (fsal_attrib_list_t *pFSAL_attr, fattr4 *Fattr)"
.br
.ti -1c
.RI "nfsstat4 \fBnfs4_Errno\fP (cache_inode_status_t error)"
.br
.ti -1c
.RI "nfsstat3 \fBnfs3_Errno\fP (cache_inode_status_t error)"
.br
.ti -1c
.RI "nfsstat2 \fBnfs2_Errno\fP (cache_inode_status_t error)"
.br
.ti -1c
.RI "int \fBnfs4_AllocateFH\fP (nfs_fh4 *fh)"
.br
.ti -1c
.RI "int \fBnfs4_MakeCred\fP (compound_data_t *data)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "nfs_parameter_t \fBnfs_param\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A set of functions used to managed NFS. 

\fBAuthor:\fP
.RS 4
\fBAuthor\fP.RS 4
leibovic 
.RE
.PP
.RE
.PP
\fBDate:\fP
.RS 4
\fBDate\fP.RS 4
2006/01/31 10:06:00 
.RE
.PP
.RE
.PP
\fBVersion:\fP
.RS 4
\fBRevision\fP.RS 4
1.48 
.RE
.PP
.RE
.PP
\fBnfs_proto_tools.c\fP - A set of functions used to managed NFS.
.PP
Definition in file \fBnfs_proto_tools.c\fP.
.SH "Function Documentation"
.PP 
.SS "nfsstat2 nfs2_Errno (cache_inode_status_t error)"
.PP
nfs2_Errno: Converts a cache_inode status to a nfsv2 status.
.PP
Converts a cache_inode status to a nfsv2 status.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP [IN] Input cache inode ewrror.
.RE
.PP
\fBReturns:\fP
.RS 4
the converted NFSv2 status. 
.RE
.PP

.PP
Definition at line 3262 of file nfs_proto_tools.c.
.PP
Referenced by nfs_Readdir(), and nfs_SetFailedStatus().
.SS "int nfs2_FSALattr_To_Fattr (exportlist_t * pexport, fsal_attrib_list_t * pFSAL_attr, fattr2 * pFattr)"
.PP
nfs2_FSALattr_To_Fattr: Converts FSAL Attributes to NFSv2 attributes.
.PP
Converts FSAL Attributes to NFSv2 attributes.
.PP
\fBParameters:\fP
.RS 4
\fIpexport\fP [IN] the related export entry. 
.br
\fIFSAL_attr\fP [IN] pointer to FSAL attributes. 
.br
\fIFattr\fP [OUT] pointer to NFSv2 attributes.
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 otherwise.
.RE
.PP
.PP
\fBTodo\fP
.RS 4
mode mask ? 
.PP
mode mask ?
.RE
.PP

.PP
Definition at line 1614 of file nfs_proto_tools.c.
.PP
Referenced by nfs_Create(), nfs_Getattr(), nfs_Lookup(), nfs_Mkdir(), nfs_Read(), nfs_Setattr(), and nfs_Write().
.SS "int nfs2_Sattr_To_FSALattr (fsal_attrib_list_t * pFSAL_attr, sattr2 * Fattr)"
.PP
nfs2_Sattr_To_FSALattr: Converts NFSv2 Set Attributes to FSAL attributes.
.PP
Converts NFSv2 Set Attributes to FSAL attributes.
.PP
\fBParameters:\fP
.RS 4
\fIFSAL_attr\fP [IN] pointer to FSAL attributes. 
.br
\fIFattr\fP [OUT] pointer to NFSv2 set attributes.
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 otherwise. 
.RE
.PP

.PP
Definition at line 2168 of file nfs_proto_tools.c.
.PP
Referenced by nfs_Create(), and nfs_Setattr().
.SS "nfsstat3 nfs3_Errno (cache_inode_status_t error)"
.PP
nfs3_Errno: Converts a cache_inode status to a nfsv3 status.
.PP
Converts a cache_inode status to a nfsv3 status.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP [IN] Input cache inode ewrror.
.RE
.PP
\fBReturns:\fP
.RS 4
the converted NFSv3 status.
.RE
.PP
.PP
\fBTodo\fP
.RS 4
: Check if this works by making stress tests
.RE
.PP

.PP
Definition at line 3147 of file nfs_proto_tools.c.
.PP
Referenced by nfs3_Pathconf(), nfs3_Readdirplus(), nfs_Readdir(), and nfs_SetFailedStatus().
.SS "int nfs3_FSALattr_To_Fattr (exportlist_t * pexport, fsal_attrib_list_t * FSAL_attr, fattr3 * Fattr)"
.PP
nfs3_FSALattr_To_Fattr: Converts FSAL Attributes to NFSv3 attributes.
.PP
Converts FSAL Attributes to NFSv3 attributes.
.PP
\fBParameters:\fP
.RS 4
\fIpexport\fP [IN] the related export entry 
.br
\fIFSAL_attr\fP [IN] pointer to FSAL attributes. 
.br
\fIFattr\fP [OUT] pointer to NFSv3 attributes.
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 otherwise. 
.RE
.PP

.PP
Definition at line 2072 of file nfs_proto_tools.c.
.PP
Referenced by nfs_Getattr(), nfs_Setattr(), and nfs_SetPostOpAttr().
.SS "int nfs3_Sattr_To_FSALattr (fsal_attrib_list_t * pFSAL_attr, sattr3 * psattr)"
.PP
nfs3_Sattr_To_FSALattr: Converts NFSv3 Sattr to FSAL Attributes.
.PP
Converts NFSv3 Sattr to FSAL Attributes.
.PP
\fBParameters:\fP
.RS 4
\fIpFSAL_attr\fP [OUT] computed FSAL attributes. 
.br
\fIpsattr\fP [IN] NFSv3 sattr to be set.
.RE
.PP
\fBReturns:\fP
.RS 4
0 if failed, 1 if successful. 
.RE
.PP

.PP
Definition at line 1506 of file nfs_proto_tools.c.
.PP
Referenced by nfs_Create(), and nfs_Setattr().
.SS "int nfs4_AllocateFH (nfs_fh4 * fh)"
.PP
nfs4_AllocateFH: Allocates a buffer to be used for storing a NFSv4 filehandle.
.PP
Allocates a buffer to be used for storing a NFSv4 filehandle.
.PP
\fBParameters:\fP
.RS 4
\fIfh\fP [INOUT] the filehandle to manage.
.RE
.PP
\fBReturns:\fP
.RS 4
NFS4_OK if successful, NFS3ERR_SERVERFAULT, NFS4ERR_RESOURCE or NFS4ERR_STALE otherwise. 
.RE
.PP

.PP
Definition at line 3365 of file nfs_proto_tools.c.
.PP
Referenced by CreatePUBFH4(), CreateROOTFH4(), nfs4_CreateROOTFH4(), nfs4_op_create(), nfs4_op_getfh(), nfs4_op_lookup_pseudo(), nfs4_op_open(), nfs4_op_putfh(), nfs4_op_putpubfh(), nfs4_op_putrootfh(), nfs4_op_readdir(), nfs4_op_readdir_pseudo(), and nfs4_op_savefh().
.SS "void nfs4_bitmap4_to_list (bitmap4 * b, uint_t * plen, uint32_t * pval)"
.PP
nfs_bitmap4_to_list: convert an attribute's bitmap to a list of attributes.
.PP
Convert an attribute's bitmap to a list of attributes.
.PP
\fBParameters:\fP
.RS 4
\fIb\fP [IN] bitmap to convert. 
.br
\fIplen\fP [OUT] list's length. 
.br
\fIplval\fP [OUT] list's values.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function) 
.RE
.PP

.PP
Definition at line 1949 of file nfs_proto_tools.c.
.PP
Referenced by nfs4_Fattr_Check_Access(), nfs4_Fattr_Check_Access_Bitmap(), nfs4_Fattr_cmp(), nfs4_Fattr_Supported(), nfs4_Fattr_Supported_Bitmap(), nfs4_Fattr_To_FSAL_attr(), nfs4_FSALattr_To_Fattr(), and nfs4_PseudoToFattr().
.SS "nfsstat4 nfs4_Errno (cache_inode_status_t error)"
.PP
nfs4_Errno: Converts a cache_inode status to a nfsv4 status.
.PP
Converts a cache_inode status to a nfsv4 status.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP [IN] Input cache inode ewrror.
.RE
.PP
\fBReturns:\fP
.RS 4
the converted NFSv4 status. 
.RE
.PP

.PP
Definition at line 3031 of file nfs_proto_tools.c.
.PP
Referenced by nfs4_op_access(), nfs4_op_close(), nfs4_op_create(), nfs4_op_getattr(), nfs4_op_link(), nfs4_op_lock(), nfs4_op_lookup(), nfs4_op_lookupp(), nfs4_op_open(), nfs4_op_read(), nfs4_op_readdir(), nfs4_op_readlink(), nfs4_op_remove(), nfs4_op_rename(), nfs4_op_setattr(), and nfs4_op_write().
.SS "int nfs4_Fattr_Check_Access (fattr4 * Fattr, int access)"
.PP
nfs4_Fattr_Check_Access: checks if attributes have READ or WRITE access.
.PP
Checks if attributes have READ or WRITE access.
.PP
\fBParameters:\fP
.RS 4
\fIFattr\fP [IN] pointer to NFSv4 attributes. 
.br
\fIaccess\fP [IN] access to be checked, either FATTR4_ATTR_READ or FATTR4_ATTR_WRITE
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 otherwise. 
.RE
.PP

.PP
Definition at line 2264 of file nfs_proto_tools.c.
.PP
References nfs4_bitmap4_to_list().
.PP
Referenced by nfs4_op_create(), nfs4_op_nverify(), nfs4_op_open(), nfs4_op_setattr(), and nfs4_op_verify().
.SS "int nfs4_Fattr_Check_Access_Bitmap (bitmap4 * pbitmap, int access)"
.PP
nfs4_Fattr_Check_Access_Bitmap: checks if attributes bitmaps have READ or WRITE access.
.PP
Checks if attributes have READ or WRITE access.
.PP
\fBParameters:\fP
.RS 4
\fIpbitmap\fP [IN] pointer to NFSv4 attributes. 
.br
\fIaccess\fP [IN] access to be checked, either FATTR4_ATTR_READ or FATTR4_ATTR_WRITE
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 otherwise. 
.RE
.PP

.PP
Definition at line 2311 of file nfs_proto_tools.c.
.PP
References nfs4_bitmap4_to_list().
.PP
Referenced by nfs4_op_getattr(), and nfs4_op_readdir().
.SS "int nfs4_Fattr_cmp (fattr4 * Fattr1, fattr4 * Fattr2)"
.PP
nfs4_Fattr_cmp: compares 2 fattr4 buffers.
.PP
Compares 2 fattr4 buffers.
.PP
\fBParameters:\fP
.RS 4
\fIFattr1\fP [IN] pointer to NFSv4 attributes. 
.br
\fIFattr2\fP [IN] pointer to NFSv4 attributes.
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if attributes are the same, FALSE otherwise, but -1 if RDATTR_ERROR is set 
.RE
.PP

.PP
Definition at line 2451 of file nfs_proto_tools.c.
.PP
References nfs4_bitmap4_to_list().
.PP
Referenced by nfs4_op_nverify(), and nfs4_op_verify().
.SS "int nfs4_Fattr_Supported (fattr4 * Fattr)"
.PP
nfs4_Fattr_Supported: Checks if an attribute is supported.
.PP
Checks if an attribute is supported.
.PP
\fBParameters:\fP
.RS 4
\fIFattr\fP [IN] pointer to NFSv4 attributes.
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 otherwise. 
.RE
.PP

.PP
Definition at line 2357 of file nfs_proto_tools.c.
.PP
References nfs4_bitmap4_to_list().
.PP
Referenced by nfs4_op_create(), nfs4_op_nverify(), nfs4_op_open(), nfs4_op_setattr(), and nfs4_op_verify().
.SS "int nfs4_Fattr_Supported_Bitmap (bitmap4 * pbitmap)"
.PP
nfs4_Fattr_Supported: Checks if an attribute is supported.
.PP
Checks if an attribute is supported.
.PP
\fBParameters:\fP
.RS 4
\fIFattr\fP [IN] pointer to NFSv4 attributes.
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 otherwise. 
.RE
.PP

.PP
Definition at line 2404 of file nfs_proto_tools.c.
.PP
References nfs4_bitmap4_to_list().
.PP
Referenced by nfs4_op_getattr().
.SS "int nfs4_Fattr_To_FSAL_attr (fsal_attrib_list_t * pFSAL_attr, fattr4 * Fattr)"
.PP
nfs4_Fattr_To_FSAL_attr: Converts NFSv4 attributes buffer to a FSAL attributes structure.
.PP
Converts NFSv4 attributes buffer to a FSAL attributes structure.
.PP
\fBParameters:\fP
.RS 4
\fIpFSAL_attr\fP [OUT] pointer to FSAL attributes. 
.br
\fIFattr\fP [IN] pointer to NFSv4 attributes.
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 if not supported, -1 if argument is badly formed 
.RE
.PP

.PP
Definition at line 2621 of file nfs_proto_tools.c.
.PP
References nfs4_bitmap4_to_list().
.PP
Referenced by nfs4_op_create(), nfs4_op_open(), and nfs4_op_setattr().
.SS "int nfs4_FhandleToExId (nfs_fh4 * fh4p, unsigned short * ExIdp)"
.PP
nfs4_FhandleToExId
.PP
This routine extracts the export id from the filehandle
.PP
\fBParameters:\fP
.RS 4
\fIfh4p\fP [IN] pointer to file handle to be used. 
.br
\fIExIdp\fP [OUT] pointer to buffer in which found export id will be stored.
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE is successful, FALSE otherwise. 
.RE
.PP

.PP
Definition at line 1758 of file nfs_proto_tools.c.
.SS "int nfs4_FSALattr_To_Fattr (exportlist_t * pexport, fsal_attrib_list_t * pattr, fattr4 * Fattr, compound_data_t * data, nfs_fh4 * objFH, bitmap4 * Bitmap)"
.PP
nfs4_FSALattr_To_Fattr: Converts FSAL Attributes to NFSv4 Fattr buffer.
.PP
Converts FSAL Attributes to NFSv4 Fattr buffer.
.PP
\fBParameters:\fP
.RS 4
\fIpexport\fP [IN] the related export entry. 
.br
\fIpattr\fP [IN] pointer to FSAL attributes. 
.br
\fIFattr\fP [OUT] NFSv4 Fattr buffer 
.br
\fIdata\fP [IN] NFSv4 compoud request's data. 
.br
\fIBitmap\fP [OUT] NFSv4 attributes bitmap to the Fattr buffer.
.RE
.PP
\fBReturns:\fP
.RS 4
-1 if failed, 0 if successful.
.RE
.PP
.PP
\fBTodo\fP
.RS 4
: not the right answer, actual quotas should be implemented 
.PP
: not the right answer, actual quotas should be implemented
.RE
.PP

.PP
Definition at line 505 of file nfs_proto_tools.c.
.PP
References nfs4_bitmap4_to_list(), nfs4_list_to_bitmap4(), and nfs_param.
.PP
Referenced by nfs4_op_getattr(), nfs4_op_nverify(), nfs4_op_readdir(), and nfs4_op_verify().
.SS "void nfs4_list_to_bitmap4 (bitmap4 * b, uint_t * plen, uint32_t * pval)"
.PP
nfs4_list_to_bitmap4: convert a list of attributes to an attributes's bitmap.
.PP
Convert a list of attributes to an attributes's bitmap.
.PP
\fBParameters:\fP
.RS 4
\fIb\fP [OUT] computed bitmap 
.br
\fIplen\fP [IN] list's length 
.br
\fIpval\fP [IN] list's array
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function). 
.RE
.PP

.PP
Definition at line 2027 of file nfs_proto_tools.c.
.PP
Referenced by nfs4_FSALattr_To_Fattr(), and nfs4_PseudoToFattr().
.SS "int nfs4_MakeCred (compound_data_t * data)"
.PP
nfs4_MakeCred
.PP
This routine fills in the pcontext field in the compound data.
.PP
\fBParameters:\fP
.RS 4
\fIpfh\fP [INOUT] pointer to compound data to be used. NOT YET IMPLEMENTED
.RE
.PP
\fBReturns:\fP
.RS 4
NFS4_OK if successful, NFS4ERR_WRONGSEC otherwise. 
.RE
.PP

.PP
Definition at line 3402 of file nfs_proto_tools.c.
.PP
References nfs_param.
.PP
Referenced by nfs4_op_lookup_pseudo(), nfs4_op_readdir_pseudo(), and nfs4_SetCompoundExport().
.SS "seqid4 nfs4_NextSeqId (seqid4 seqid)"
.PP
nfs4_NextSeqId: compute the next nfsv4 sequence id.
.PP
Compute the next nfsv4 sequence id.
.PP
\fBParameters:\fP
.RS 4
\fIseqid\fP [IN] previous sequence number.
.RE
.PP
\fBReturns:\fP
.RS 4
the requested sequence number. 
.RE
.PP

.PP
Definition at line 1892 of file nfs_proto_tools.c.
.SS "int nfs4_SetCompoundExport (compound_data_t * data)"
.PP
nfs4_SetCompoundExport
.PP
This routine fills in the pexport field in the compound data.
.PP
\fBParameters:\fP
.RS 4
\fIpfh\fP [OUT] pointer to compound data to be used.
.RE
.PP
\fBReturns:\fP
.RS 4
NFS4_OK if successfull. Possible errors are NFS4ERR_BADHANDLE and NFS4ERR_WRONGSEC. 
.RE
.PP

.PP
Definition at line 1721 of file nfs_proto_tools.c.
.PP
References nfs4_MakeCred().
.PP
Referenced by nfs4_op_link(), nfs4_op_lookupp(), nfs4_op_putfh(), nfs4_op_rename(), and nfs4_op_restorefh().
.SS "void nfs4_stringid_split (char * buff, char * uidname, char * domainname)"
.PP
nfs4_stringid_split: Splits a domain stamped name in two different parts.
.PP
Splits a domain stamped name in two different parts.
.PP
\fBParameters:\fP
.RS 4
\fIbuff\fP [IN] the input string 
.br
\fIuidname\fP [OUT] the extracted uid name 
.br
\fIdomainname\fP [OUT] the extracted fomain name
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function) 
.RE
.PP

.PP
Definition at line 1790 of file nfs_proto_tools.c.
.SS "cache_entry_t* nfs_FhandleToCache (u_long rq_vers, fhandle2 * pfh2, nfs_fh3 * pfh3, nfs_fh4 * pfh4, nfsstat2 * pstatus2, nfsstat3 * pstatus3, nfsstat4 * pstatus4, fsal_attrib_list_t * pattr, fsal_op_context_t * pcontext, cache_inode_client_t * pclient, hash_table_t * ht, int * prc)"
.PP
nfs_FhandleToCache: Gets a cache entry using a file handle (v2 or v3) as input.
.PP
Gets a cache entry using a file handle (v2 or v3) as input.
.PP
\fBParameters:\fP
.RS 4
\fIrq_vers\fP [IN] version of the NFS protocol to be used 
.br
\fIpfh2\fP [IN] NFSv2 file handle or NULL 
.br
\fIpfh3\fP [IN] NFSv3 file handle or NULL 
.br
\fIpfh4\fP [IN] NFSv4 file handle or NULL 
.br
\fIpstatus2\fP [OUT] pointer to NFSv2 status or NULL 
.br
\fIpstatus3\fP [OUT] pointer to NFSv3 status or NULL 
.br
\fIpstatus4\fP [OUT] pointer to NFSv4 status or NULL 
.br
\fIpattr\fP [OUT] FSAL attributes related to this cache entry 
.br
\fIpcontext\fP [IN] client's FSAL credentials 
.br
\fIpclient\fP [IN] client's ressources to be used for accessing the Cache Inode 
.br
\fIht\fP [INOUT] Hash Table used to address the Cache Inode 
.br
\fIprc\fP [OUT] internal status for the request (NFS_REQ_DROP or NFS_REQ_OK)
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the related pentry if successful, NULL is returned in case of a failure. 
.RE
.PP

.PP
Definition at line 153 of file nfs_proto_tools.c.
.PP
Referenced by nfs3_Mknod(), nfs3_Readdirplus(), nfs4_op_open(), nfs4_op_putfh(), nfs_Create(), nfs_Fsstat(), nfs_Getattr(), nfs_Link(), nfs_Lookup(), nfs_Mkdir(), nfs_Read(), nfs_Readdir(), nfs_Readlink(), nfs_Remove(), nfs_Rename(), nfs_Rmdir(), nfs_Setattr(), nfs_Symlink(), and nfs_Write().
.SS "int nfs_RetryableError (cache_inode_status_t cache_status)"
.PP
nfs_RetryableError: Indicates if an error is retryable or not.
.PP
Indicates if an error is retryable or not.
.PP
\fBParameters:\fP
.RS 4
\fIcache_status\fP [IN] input Cache Inode Status value, to be tested.
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if retryable, FALSE otherwise.
.RE
.PP
.PP
\fBTodo\fP
.RS 4
: Not implemented for NOW BUGAZEOMEU 
.RE
.PP

.PP
Definition at line 369 of file nfs_proto_tools.c.
.PP
References nfs_param.
.PP
Referenced by nfs3_Access(), nfs3_Mknod(), nfs3_Readdirplus(), nfs_Create(), nfs_Fsstat(), nfs_Link(), nfs_Lookup(), nfs_Mkdir(), nfs_Read(), nfs_Readdir(), nfs_Readlink(), nfs_Remove(), nfs_Rename(), nfs_Rmdir(), nfs_Setattr(), nfs_Symlink(), and nfs_Write().
.SS "void nfs_SetFailedStatus (fsal_op_context_t * pcontext, exportlist_t * pexport, int version, cache_inode_status_t status, nfsstat2 * pstatus2, nfsstat3 * pstatus3, cache_entry_t * pentry0, post_op_attr * ppost_op_attr, cache_entry_t * pentry1, fsal_attrib_list_t * ppre_vattr1, wcc_data * pwcc_data1, cache_entry_t * pentry2, fsal_attrib_list_t * ppre_vattr2, wcc_data * pwcc_data2)"
.PP
Definition at line 451 of file nfs_proto_tools.c.
.PP
References nfs2_Errno(), nfs3_Errno(), nfs_SetPostOpAttr(), and nfs_SetWccData().
.PP
Referenced by nfs3_Access(), nfs3_Mknod(), nfs3_Readdirplus(), nfs_Create(), nfs_Fsstat(), nfs_Getattr(), nfs_Link(), nfs_Lookup(), nfs_Mkdir(), nfs_Read(), nfs_Readdir(), nfs_Readlink(), nfs_Remove(), nfs_Rename(), nfs_Rmdir(), nfs_Setattr(), nfs_Symlink(), and nfs_Write().
.SS "int nfs_SetPostOpAttr (fsal_op_context_t * pcontext, exportlist_t * pexport, cache_entry_t * pentry, fsal_attrib_list_t * pfsal_attr, post_op_attr * presult)"
.PP
nfs_SetPostOpAttr: Converts FSAL Attributes to NFSv3 PostOp Attributes structure.
.PP
Converts FSAL Attributes to NFSv3 PostOp Attributes structure.
.PP
\fBParameters:\fP
.RS 4
\fIpexport\fP [IN] the related export entry 
.br
\fIpfsal_attr\fP [IN] FSAL attributes 
.br
\fIpattr\fP [OUT] NFSv3 PostOp structure attributes.
.RE
.PP
\fBReturns:\fP
.RS 4
0 in all cases (making it a void function maybe a good idea) 
.RE
.PP

.PP
Definition at line 258 of file nfs_proto_tools.c.
.PP
References nfs3_FSALattr_To_Fattr().
.PP
Referenced by nfs3_Access(), nfs3_Fsinfo(), nfs3_Mknod(), nfs3_Pathconf(), nfs3_Readdirplus(), nfs_Create(), nfs_Fsstat(), nfs_Link(), nfs_Lookup(), nfs_Mkdir(), nfs_Read(), nfs_Readdir(), nfs_Readlink(), nfs_SetFailedStatus(), nfs_SetWccData(), and nfs_Symlink().
.SS "void nfs_SetPreOpAttr (fsal_attrib_list_t * pfsal_attr, pre_op_attr * pattr)"
.PP
nfs_SetPreOpAttr: Converts FSAL Attributes to NFSv3 PreOp Attributes structure.
.PP
Converts FSAL Attributes to NFSv3 PreOp Attributes structure.
.PP
\fBParameters:\fP
.RS 4
\fIpfsal_attr\fP [IN] FSAL attributes. 
.br
\fIpattr\fP [OUT] NFSv3 PreOp structure attributes.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function) 
.RE
.PP

.PP
Definition at line 297 of file nfs_proto_tools.c.
.PP
Referenced by nfs_SetWccData().
.SS "void nfs_SetWccData (fsal_op_context_t * pcontext, exportlist_t * pexport, cache_entry_t * pentry, fsal_attrib_list_t * pbefore_attr, fsal_attrib_list_t * pafter_attr, wcc_data * pwcc_data)"
.PP
nfs_SetWccData: Sets NFSv3 Weak Cache Coherency structure.
.PP
Sets NFSv3 Weak Cache Coherency structure.
.PP
\fBParameters:\fP
.RS 4
\fIpcontext\fP [IN] credentials 
.br
\fIpentry\fP [IN] related pentry 
.br
\fIpbefore_attr\fP [IN] the attributes before the operation. 
.br
\fIpafter_attr\fP [IN] the attributes after the operation 
.br
\fIpwcc_data\fP [OUT] the Weak Cache Coherency structure
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function). 
.RE
.PP

.PP
Definition at line 335 of file nfs_proto_tools.c.
.PP
References nfs_SetPostOpAttr(), and nfs_SetPreOpAttr().
.PP
Referenced by nfs3_Commit(), nfs3_Mknod(), nfs_Create(), nfs_Link(), nfs_Mkdir(), nfs_Remove(), nfs_Rename(), nfs_Rmdir(), nfs_Setattr(), nfs_SetFailedStatus(), nfs_Symlink(), and nfs_Write().
.SS "int str2utf8 (char * str, utf8string * utf8str)"
.PP
str2utf8: converts a string buffer into a UTF8 string descriptor.
.PP
Converts a string buffer into a UTF8 string descriptor.
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP [IN] input string 
.br
\fIutf8str\fP [OUT] computed UTF8 string
.RE
.PP
\fBReturns:\fP
.RS 4
-1 if failed, 0 if successful. 
.RE
.PP

.PP
Definition at line 1852 of file nfs_proto_tools.c.
.PP
Referenced by nfs4_op_readdir(), and nfs4_op_readlink().
.SS "int utf82str (char * str, utf8string * utf8str)"
.PP
utf82str: converts a UTF8 string buffer into a string descriptor.
.PP
Converts a UTF8 string buffer into a string descriptor.
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP [OUT] computed output string 
.br
\fIutf8str\fP [IN] input UTF8 string
.RE
.PP
\fBReturns:\fP
.RS 4
-1 if failed, 0 if successful. 
.RE
.PP

.PP
Definition at line 1821 of file nfs_proto_tools.c.
.PP
Referenced by nfs4_Compound(), and nfs4_op_create().
.SH "Variable Documentation"
.PP 
.SS "nfs_parameter_t \fBnfs_param\fP"
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for NFS and Mount protocols layer from the source code.
