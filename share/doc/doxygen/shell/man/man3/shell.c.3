.TH "shell.c" 3 "9 Apr 2008" "Version 0.1" "ganeshell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
shell.c \- Internal routines for the shell. 
.SH SYNOPSIS
.br
.PP
\fC#include 'shell.h'\fP
.br
\fC#include 'shell_utils.h'\fP
.br
\fC#include 'shell_vars.h'\fP
.br
\fC#include 'log_functions.h'\fP
.br
\fC#include 'commands.h'\fP
.br
\fC#include 'cmd_tools.h'\fP
.br
\fC#include 'BuddyMalloc.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include <unistd.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <stdio.h>\fP
.br
\fC#include <readline/readline.h>\fP
.br
\fC#include <readline/history.h>\fP
.br
\fC#include <sys/time.h>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMAX_OUTPUT_LEN\fP   (1024*1024)"
.br
.ti -1c
.RI "#define \fBTRACEBUFFSIZE\fP   1024"
.br
.ti -1c
.RI "#define \fBPROMPTSIZE\fP   64"
.br
.ti -1c
.RI "#define \fBP\fP(_mutex_)   pthread_mutex_lock( &_mutex_ )"
.br
.ti -1c
.RI "#define \fBV\fP(_mutex_)   pthread_mutex_unlock( &_mutex_ )"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBshell_BarrierInit\fP (int nb_threads)"
.br
.ti -1c
.RI "int \fBshell_Init\fP (int \fBverbose\fP, char *input_file, char *prompt, int shell_index)"
.br
.ti -1c
.RI "int \fBshell_Launch\fP ()"
.br
.ti -1c
.RI "int \fBshell_ParseLine\fP (char *in_out_line, char **out_arglist, int *p_argcount)"
.br
.ti -1c
.RI "int \fBshell_SolveArgs\fP (int argc, char **in_out_argv, int *out_allocated)"
.br
.ti -1c
.RI "void \fBshell_CleanArgs\fP (int argc, char **in_out_argv, int *in_allocated)"
.br
.ti -1c
.RI "int \fBshell_Execute\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "void \fBshell_PrintError\fP (\fBshell_state_t\fP *context, char *error_msg)"
.br
.ti -1c
.RI "void \fBshell_PrintTrace\fP (\fBshell_state_t\fP *context, char *msg)"
.br
.ti -1c
.RI "int \fBshell_SetLayer\fP (\fBshell_state_t\fP *context, char *layer_name)"
.br
.ti -1c
.RI "\fBlayer_def_t\fP * \fBshell_GetLayer\fP (\fBshell_state_t\fP *context)"
.br
.ti -1c
.RI "int \fBshell_SetStatus\fP (\fBshell_state_t\fP *context, int returned_status)"
.br
.ti -1c
.RI "int \fBshell_GetStatus\fP (\fBshell_state_t\fP *context)"
.br
.ti -1c
.RI "int \fBshell_SetVerbose\fP (\fBshell_state_t\fP *context, char *str_verbose)"
.br
.ti -1c
.RI "int \fBshell_GetVerbose\fP (\fBshell_state_t\fP *context)"
.br
.ti -1c
.RI "int \fBshell_SetDbgLvl\fP (\fBshell_state_t\fP *context, char *str_debug_level)"
.br
.ti -1c
.RI "int \fBshell_GetDbgLvl\fP (\fBshell_state_t\fP *context)"
.br
.ti -1c
.RI "int \fBshell_SetInput\fP (\fBshell_state_t\fP *context, char *file_name)"
.br
.ti -1c
.RI "FILE * \fBshell_GetInputStream\fP (\fBshell_state_t\fP *context)"
.br
.ti -1c
.RI "int \fBshell_SetPrompt\fP (\fBshell_state_t\fP *context, char *str_prompt)"
.br
.ti -1c
.RI "char * \fBshell_GetPrompt\fP (\fBshell_state_t\fP *context)"
.br
.ti -1c
.RI "int \fBshell_SetShellId\fP (\fBshell_state_t\fP *context, int shell_index)"
.br
.ti -1c
.RI "int \fBshell_SetLine\fP (\fBshell_state_t\fP *context, int lineno)"
.br
.ti -1c
.RI "int \fBshell_GetLine\fP (\fBshell_state_t\fP *context)"
.br
.ti -1c
.RI "int \fBshellcmd_help\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBshellcmd_if\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBshellcmd_interactive\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBshellcmd_set\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBshellcmd_unset\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBshellcmd_print\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBshellcmd_varlist\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBshellcmd_time\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBshellcmd_quit\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBshellcmd_barrier\fP (int argc, char **argv, FILE *output)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Internal routines for the shell. 

\fBAuthor:\fP
.RS 4
\fBAuthor\fP.RS 4
leibovic 
.RE
.PP
.RE
.PP
\fBDate:\fP
.RS 4
\fBDate\fP.RS 4
2006/02/24 08:33:44 
.RE
.PP
.RE
.PP
\fBVersion:\fP
.RS 4
\fBRevision\fP.RS 4
1.20 
.RE
.PP
.RE
.PP
\fBLog\fP.RS 4
\fBshell.c\fP,v 
.RE
.PP
Revision 1.20 2006/02/24 08:33:44 leibovic shellid is read only.
.PP
Revision 1.19 2006/02/23 07:42:53 leibovic Adding -n option to shell.
.PP
Revision 1.18 2006/02/08 12:50:00 leibovic changing NIV_EVNMT to NIV_EVENT.
.PP
Revision 1.17 2006/01/17 14:56:22 leibovic Adaptation de HPSS 6.2.
.PP
Revision 1.16 2005/11/28 17:03:00 deniel Added CeCILL headers
.PP
Revision 1.15 2005/09/27 09:30:16 leibovic Removing non-thread safe trace buffer.
.PP
Revision 1.14 2005/09/27 08:15:13 leibovic Adding traces and changhing readexport prototype.
.PP
Revision 1.13 2005/08/12 12:15:33 leibovic Erreur d'init.
.PP
Revision 1.12 2005/08/12 11:21:27 leibovic Now, set cat concatenate strings.
.PP
Revision 1.11 2005/08/05 07:59:21 leibovic Better help printing.
.PP
Revision 1.10 2005/07/29 13:34:28 leibovic Changing _FULL_DEBUG to _DEBUG_SHELL
.PP
Revision 1.9 2005/07/26 12:54:47 leibovic Multi-thread shell with synchronisation routines.
.PP
Revision 1.8 2005/07/25 12:50:45 leibovic Adding thr_create and thr_join commands.
.PP
Revision 1.7 2005/05/11 15:53:37 leibovic Adding time function.
.PP
Revision 1.6 2005/05/11 07:25:58 leibovic Escaped char support.
.PP
Revision 1.5 2005/05/10 14:02:27 leibovic Fixed bug in log management.
.PP
Revision 1.4 2005/05/10 11:38:07 leibovic Adding log initialization.
.PP
Revision 1.3 2005/05/10 11:07:21 leibovic Adapting to ganeshell v2.
.PP
Revision 1.2 2005/05/09 14:54:59 leibovic Adding if.
.PP
Revision 1.1 2005/05/09 12:23:55 leibovic Version 2 of ganeshell.
.PP
Definition in file \fBshell.c\fP.
.SH "Define Documentation"
.PP 
.SS "#define MAX_OUTPUT_LEN   (1024*1024)"
.PP
Definition at line 173 of file shell.c.
.PP
Referenced by shell_SolveArgs(), and shellcmd_set().
.SS "#define P(_mutex_)   pthread_mutex_lock( &_mutex_ )"
.PP
Definition at line 187 of file shell.c.
.PP
Referenced by shell_BarrierInit().
.SS "#define PROMPTSIZE   64"
.PP
Definition at line 177 of file shell.c.
.SS "#define TRACEBUFFSIZE   1024"
.PP
Definition at line 175 of file shell.c.
.PP
Referenced by shell_Execute(), shell_SetDbgLvl(), shell_SetInput(), shell_SetLayer(), shell_SetLine(), shell_SetPrompt(), shell_SetShellId(), shell_SetStatus(), shell_SetVerbose(), shell_SolveArgs(), shellcmd_barrier(), shellcmd_help(), shellcmd_interactive(), shellcmd_quit(), shellcmd_set(), shellcmd_unset(), and shellcmd_varlist().
.SS "#define V(_mutex_)   pthread_mutex_unlock( &_mutex_ )"
.PP
Definition at line 188 of file shell.c.
.PP
Referenced by shell_BarrierInit().
.SH "Function Documentation"
.PP 
.SS "int shell_BarrierInit (int nb_threads)"
.PP
Initialize the barrier for shell synchronization routines. The number of threads to wait for is given as parameter. 
.PP
Definition at line 209 of file shell.c.
.PP
References P, and V.
.PP
Referenced by main().
.SS "void shell_CleanArgs (int argc, char ** in_out_argv, int * in_allocated)"
.PP
shell_CleanArgs: Free allocated arguments.
.PP
\fBParameters:\fP
.RS 4
\fIargc\fP The number of command line tokens. 
.br
\fIin_out_argv\fP The list of command line tokens (modified). 
.br
\fIin_allocated\fP Indicates which tokens must be freed. 
.RE
.PP

.PP
Definition at line 1090 of file shell.c.
.PP
Referenced by shell_Launch(), and shell_SolveArgs().
.SS "int shell_Execute (int argc, char ** argv, FILE * output)"
.PP
shell_Execute: Commands dispatcher.
.PP
\fBParameters:\fP
.RS 4
\fIargc\fP The number of arguments of this command. 
.br
\fIargv\fP The arguments for this command. 
.br
\fIoutput\fP The output stream of this command.
.RE
.PP
\fBReturns:\fP
.RS 4
The returned status of this command. 
.RE
.PP

.PP
Definition at line 1123 of file shell.c.
.PP
References command_def__::command_func, layer_def__::command_list, command_def__::command_name, layer_def_t, layer_def__::setlog_func, shell_GetDbgLvl(), shell_GetLayer(), shell_GetVerbose(), shell_PrintError(), shell_PrintTrace(), shell_state_t, and TRACEBUFFSIZE.
.PP
Referenced by shell_Launch(), shell_SolveArgs(), shellcmd_if(), and shellcmd_time().
.SS "int shell_GetDbgLvl (\fBshell_state_t\fP * context)"
.PP
shell_GetDbgLvl Get the special variable $DEBUG_LEVEL and $DBG_LVL (internal use). 
.PP
Definition at line 1558 of file shell.c.
.PP
References shell_state__::debug_level, and shell_state_t.
.SS "FILE* shell_GetInputStream (\fBshell_state_t\fP * context)"
.PP
shell_GetInputStream Get the input stream for reading commands (internal use). 
.PP
Definition at line 1688 of file shell.c.
.PP
References shell_state__::input_stream, and shell_state_t.
.SS "\fBlayer_def_t\fP* shell_GetLayer (\fBshell_state_t\fP * context)"
.PP
shell_GetLayer: Retrieves the current active layer (internal use). 
.PP
Definition at line 1366 of file shell.c.
.PP
References shell_state__::layer, layer_def_t, and shell_state_t.
.PP
Referenced by shell_Execute(), and shellcmd_help().
.SS "int shell_GetLine (\fBshell_state_t\fP * context)"
.PP
shell_GetLine Get the special variable $LINE 
.PP
Definition at line 1790 of file shell.c.
.PP
References shell_state__::line, and shell_state_t.
.PP
Referenced by shell_Launch(), shell_PrintError(), and shell_PrintTrace().
.SS "char* shell_GetPrompt (\fBshell_state_t\fP * context)"
.PP
shell_GetPrompt Get the special variable $PROMPT 
.PP
Definition at line 1724 of file shell.c.
.PP
References get_var_value(), and shell_state_t.
.SS "int shell_GetStatus (\fBshell_state_t\fP * context)"
.PP
shell_GetStatus Get the special variables $? or $STATUS (internal use). 
.PP
Definition at line 1416 of file shell.c.
.PP
References shell_state_t, and shell_state__::status.
.SS "int shell_GetVerbose (\fBshell_state_t\fP * context)"
.PP
shell_GetVerbose Get the special variable $VERBOSE (internal use). 
.PP
Definition at line 1490 of file shell.c.
.PP
References shell_state_t, and shell_state__::verbose.
.PP
Referenced by shell_Execute(), shell_PrintTrace(), and shellcmd_varlist().
.SS "int shell_Init (int verbose, char * input_file, char * prompt, int shell_index)"
.PP
Initialize the shell. The command line for the shell is given as parameter. 
.PP
\fBParameters:\fP
.RS 4
\fIinput_file\fP the file to read from (NULL if stdin). 
.RE
.PP

.PP
Definition at line 358 of file shell.c.
.PP
References NULL, shell_SetDbgLvl(), shell_SetInput(), shell_SetPrompt(), shell_SetShellId(), shell_SetVerbose(), shell_state_t, and verbose.
.PP
Referenced by LaunchShell(), and main().
.SS "int shell_Launch ()"
.PP
Run the interpreter. 
.PP
Definition at line 473 of file shell.c.
.PP
References shell_state__::input_stream, shell_state__::interactive, MAX_LINE_LEN, shell_CleanArgs(), shell_Execute(), shell_GetLine(), shell_ParseLine(), shell_SetLine(), shell_SetStatus(), shell_SolveArgs(), and shell_state_t.
.PP
Referenced by LaunchShell(), and main().
.SS "int shell_ParseLine (char * in_out_line, char ** out_arglist, int * p_argcount)"
.PP
shell_ParseLine: Extract an arglist from a command line.
.PP
\fBParameters:\fP
.RS 4
\fIin_out_line\fP The command line (modified). 
.br
\fIout_arglist\fP The list of command line tokens. 
.br
\fIp_argcount\fP The number of command line tokens.
.RE
.PP
\fBReturns:\fP
.RS 4
0 if no errors. 
.RE
.PP

.PP
Definition at line 695 of file shell.c.
.PP
Referenced by shell_Launch(), and shell_SolveArgs().
.SS "void shell_PrintError (\fBshell_state_t\fP * context, char * error_msg)"
.PP
shell_PrintError: Prints an error. 
.PP
Definition at line 1257 of file shell.c.
.PP
References get_var_value(), shell_GetLine(), and shell_state_t.
.PP
Referenced by shell_Execute(), shell_SetDbgLvl(), shell_SetInput(), shell_SetLayer(), shell_SetLine(), shell_SetPrompt(), shell_SetShellId(), shell_SetStatus(), shell_SetVerbose(), shell_SolveArgs(), shellcmd_barrier(), shellcmd_help(), shellcmd_interactive(), shellcmd_quit(), shellcmd_set(), shellcmd_unset(), and shellcmd_varlist().
.SS "void shell_PrintTrace (\fBshell_state_t\fP * context, char * msg)"
.PP
shell_PrintTrace: Prints a verbose trace. 
.PP
Definition at line 1275 of file shell.c.
.PP
References get_var_value(), shell_GetLine(), shell_GetVerbose(), and shell_state_t.
.PP
Referenced by shell_Execute(), shell_SetInput(), and shell_SetLayer().
.SS "int shell_SetDbgLvl (\fBshell_state_t\fP * context, char * str_debug_level)"
.PP
shell_SetDbgLvl Set the special variables $DEBUG_LEVEL and $DBG_LVL 
.PP
Definition at line 1500 of file shell.c.
.PP
References shell_state__::debug_level, set_var_value(), shell_PrintError(), shell_state_t, and TRACEBUFFSIZE.
.PP
Referenced by shell_Init(), and shellcmd_set().
.SS "int shell_SetInput (\fBshell_state_t\fP * context, char * file_name)"
.PP
shell_SetInput Set the input for reading commands and set the value of $INPUT and $INTERACTIVE.
.PP
\fBParameters:\fP
.RS 4
\fIfile_name:\fP a script file or NULL for reading from stdin. 
.RE
.PP

.PP
Definition at line 1573 of file shell.c.
.PP
References shell_state__::input_stream, shell_state__::interactive, set_var_value(), shell_PrintError(), shell_PrintTrace(), shell_SetLine(), shell_state_t, and TRACEBUFFSIZE.
.PP
Referenced by shell_Init(), shellcmd_interactive(), and shellcmd_set().
.SS "int shell_SetLayer (\fBshell_state_t\fP * context, char * layer_name)"
.PP
shell_SetLayer: Set the current active layer. 
.PP
\fBReturns:\fP
.RS 4
0 if OK. else, an error code. 
.RE
.PP

.PP
Definition at line 1306 of file shell.c.
.PP
References shell_state__::layer, layer_def_t, layer_def__::layer_name, set_var_value(), shell_PrintError(), shell_PrintTrace(), shell_state_t, and TRACEBUFFSIZE.
.PP
Referenced by shellcmd_set().
.SS "int shell_SetLine (\fBshell_state_t\fP * context, int lineno)"
.PP
shell_SetLine Set the special variable $LINE 
.PP
Definition at line 1761 of file shell.c.
.PP
References shell_state__::line, set_var_value(), shell_PrintError(), shell_state_t, and TRACEBUFFSIZE.
.PP
Referenced by shell_Launch(), and shell_SetInput().
.SS "int shell_SetPrompt (\fBshell_state_t\fP * context, char * str_prompt)"
.PP
shell_SetPrompt Set the special variable $PROMPT 
.PP
Definition at line 1703 of file shell.c.
.PP
References set_var_value(), shell_PrintError(), shell_state_t, and TRACEBUFFSIZE.
.PP
Referenced by shell_Init(), and shellcmd_set().
.SS "int shell_SetShellId (\fBshell_state_t\fP * context, int shell_index)"
.PP
shell_SetShellId Set the special variable $SHELLID 
.PP
Definition at line 1735 of file shell.c.
.PP
References set_var_value(), shell_PrintError(), shell_state_t, and TRACEBUFFSIZE.
.PP
Referenced by shell_Init().
.SS "int shell_SetStatus (\fBshell_state_t\fP * context, int returned_status)"
.PP
shell_SetStatus Set the special variables $? and $STATUS. 
.PP
Definition at line 1378 of file shell.c.
.PP
References set_var_value(), shell_PrintError(), shell_state_t, shell_state__::status, and TRACEBUFFSIZE.
.PP
Referenced by shell_Launch(), shell_SolveArgs(), and shellcmd_set().
.SS "int shell_SetVerbose (\fBshell_state_t\fP * context, char * str_verbose)"
.PP
shell_SetVerbose Set the special variable $VERBOSE. 
.PP
Definition at line 1426 of file shell.c.
.PP
References set_var_value(), shell_PrintError(), shell_state_t, TRACEBUFFSIZE, and shell_state__::verbose.
.PP
Referenced by shell_Init(), and shellcmd_set().
.SS "int shell_SolveArgs (int argc, char ** in_out_argv, int * out_allocated)"
.PP
shell_SolveArgs: Interprets arguments if they are vars or commands.
.PP
\fBParameters:\fP
.RS 4
\fIargc\fP The number of command line tokens. 
.br
\fIin_out_argv\fP The list of command line tokens (modified). 
.br
\fIout_allocated\fP Indicates which tokens must be freed.
.RE
.PP
\fBReturns:\fP
.RS 4
0 if no errors. 
.RE
.PP

.PP
Definition at line 804 of file shell.c.
.PP
References get_var_value(), MAX_OUTPUT_LEN, shell_CleanArgs(), shell_Execute(), shell_ParseLine(), shell_PrintError(), shell_SetStatus(), shell_state_t, and TRACEBUFFSIZE.
.PP
Referenced by shell_Launch().
.SS "int shellcmd_barrier (int argc, char ** argv, FILE * output)"
.PP
Definition at line 2306 of file shell.c.
.PP
References shell_PrintError(), and TRACEBUFFSIZE.
.SS "int shellcmd_help (int argc, char ** argv, FILE * output)"
.PP
Definition at line 1802 of file shell.c.
.PP
References command_def__::command_help, layer_def__::command_list, command_def__::command_name, layer_def_t, layer_def__::layer_name, shell_GetLayer(), shell_PrintError(), and TRACEBUFFSIZE.
.SS "int shellcmd_if (int argc, char ** argv, FILE * output)"
.PP
Definition at line 1879 of file shell.c.
.PP
References shell_Execute().
.SS "int shellcmd_interactive (int argc, char ** argv, FILE * output)"
.PP
Definition at line 1973 of file shell.c.
.PP
References NULL, shell_PrintError(), shell_SetInput(), and TRACEBUFFSIZE.
.SS "int shellcmd_print (int argc, char ** argv, FILE * output)"
.PP
Definition at line 2179 of file shell.c.
.SS "int shellcmd_quit (int argc, char ** argv, FILE * output)"
.PP
Definition at line 2278 of file shell.c.
.PP
References shell_PrintError(), and TRACEBUFFSIZE.
.SS "int shellcmd_set (int argc, char ** argv, FILE * output)"
.PP
Definition at line 2003 of file shell.c.
.PP
References concat(), is_authorized_varname(), MAX_OUTPUT_LEN, my_atoi(), set_var_value(), shell_PrintError(), shell_SetDbgLvl(), shell_SetInput(), shell_SetLayer(), shell_SetPrompt(), shell_SetStatus(), shell_SetVerbose(), and TRACEBUFFSIZE.
.SS "int shellcmd_time (int argc, char ** argv, FILE * output)"
.PP
Definition at line 2231 of file shell.c.
.PP
References NULL, print_timeval, shell_Execute(), and time_diff().
.SS "int shellcmd_unset (int argc, char ** argv, FILE * output)"
.PP
Definition at line 2115 of file shell.c.
.PP
References free_var(), shell_PrintError(), and TRACEBUFFSIZE.
.SS "int shellcmd_varlist (int argc, char ** argv, FILE * output)"
.PP
Definition at line 2201 of file shell.c.
.PP
References print_varlist(), shell_GetVerbose(), shell_PrintError(), and TRACEBUFFSIZE.
.SH "Author"
.PP 
Generated automatically by Doxygen for ganeshell from the source code.
