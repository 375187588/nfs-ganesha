.TH "shell_vars.c" 3 "15 Sep 2010" "Version 0.1" "ganeshell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
shell_vars.c \- 
.PP
variables management for the shell.  

.SH SYNOPSIS
.br
.PP
\fC#include <HashTable.h>\fP
.br
\fC#include <strings.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include 'shell_vars.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBshell_variable__\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBIS_LETTER\fP(_c_)   (((_c_) >= 'a') && ((_c_) <= 'z'))"
.br
.ti -1c
.RI "#define \fBIS_LETTER_CAP\fP(_c_)   (((_c_) >= 'A') && ((_c_) <= 'Z'))"
.br
.ti -1c
.RI "#define \fBIS_NUMERIC\fP(_c_)   (((_c_) >= '0') && ((_c_) <= '9'))"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBshell_variable__\fP \fBshell_variable_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBSetVarTable\fP (\fBshell_variable_t\fP *var_table)"
.br
.ti -1c
.RI "void \fBprint_varlist\fP (FILE *output, int is_dlen)"
.br
.ti -1c
.RI "int \fBis_authorized_varname\fP (char *str)"
.br
.ti -1c
.RI "char * \fBget_var_value\fP (char *varname)"
.br
.ti -1c
.RI "int \fBset_var_value\fP (char *varname, char *var_value)"
.br
.ti -1c
.RI "int \fBfree_var\fP (char *varname)"
.br
.in -1c
.SH "Detailed Description"
.PP 
variables management for the shell. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
leibovic 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2006/01/24 13:49:33 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.8 
.RE
.PP
\fBLog\fP.RS 4
\fBshell_vars.c\fP,v 
.RE
.PP
Revision 1.8 2006/01/24 13:49:33 leibovic Adding missing includes.
.PP
Revision 1.6 2005/07/26 12:54:47 leibovic Multi-thread shell with synchronisation routines.
.PP
Revision 1.5 2005/05/10 14:02:45 leibovic Removing adherence to BuddyMalloc.
.PP
Revision 1.4 2005/05/09 12:23:55 leibovic Version 2 of ganeshell.
.PP
Revision 1.3 2005/05/03 08:06:23 leibovic Adding meminfo command.
.PP
Revision 1.2 2005/05/03 07:37:58 leibovic Using Mem_Alloc and Mem_Free.
.PP
Revision 1.1 2004/12/14 09:56:00 leibovic Variables management. 
.PP
Definition in file \fBshell_vars.c\fP.
.SH "Define Documentation"
.PP 
.SS "#define IS_LETTER(_c_)   (((_c_) >= 'a') && ((_c_) <= 'z'))"
.PP
Definition at line 217 of file shell_vars.c.
.SS "#define IS_LETTER_CAP(_c_)   (((_c_) >= 'A') && ((_c_) <= 'Z'))"
.PP
Definition at line 218 of file shell_vars.c.
.SS "#define IS_NUMERIC(_c_)   (((_c_) >= '0') && ((_c_) <= '9'))"
.PP
Definition at line 219 of file shell_vars.c.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBshell_variable__\fP  \fBshell_variable_t\fP"
.SH "Function Documentation"
.PP 
.SS "int free_var (char * varname)"free the resources used by a variable. 
.PP
Definition at line 288 of file shell_vars.c.
.SS "char* get_var_value (char * varname)"returns the value for a variable, NULL if the variable doesn't exist. 
.PP
Definition at line 254 of file shell_vars.c.
.SS "int is_authorized_varname (char * str)"indicates whether a name is authorized for a variable. A variable name must be in [a-zA-Z0-9._:]* 
.PP
Definition at line 224 of file shell_vars.c.
.SS "void print_varlist (FILE * output, int is_dlen)"print var list. 
.PP
Definition at line 121 of file shell_vars.c.
.SS "int set_var_value (char * varname, char * var_value)"set the value for a variable, and create it if necessary. 
.PP
Definition at line 270 of file shell_vars.c.
.SS "void SetVarTable (\fBshell_variable_t\fP * var_table)"
.PP
Definition at line 111 of file shell_vars.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for ganeshell from the source code.
