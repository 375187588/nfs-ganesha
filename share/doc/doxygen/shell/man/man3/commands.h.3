.TH "commands.h" 3 "31 Mar 2009" "Version 0.1" "ganeshell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
commands.h \- Header file for processing user's command line.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include 'shell_types.h'\fP
.br
\fC#include <stdio.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBfsal_layer_SetLogLevel\fP (int log_lvl)"
.br
.ti -1c
.RI "int \fBfn_fsal_init_fs\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_pwd\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_cd\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_stat\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_ls\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_callstat\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_su\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_unlink\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_mkdir\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_rename\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_ln\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_hardlink\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_create\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_setattr\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_access\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_truncate\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_open\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_open_byname\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_open_byfileid\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_read\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_write\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_close\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_close_byfileid\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_cat\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_rcp\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_cross\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_handlecmp\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_lsxattrs\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_fsal_getxattr\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "void \fBCache_inode_layer_SetLogLevel\fP (int log_lvl)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_cache_init\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_pwd\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_cd\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_stat\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_gc\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_ls\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_link\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_mkdir\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_rename\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_create\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_ln\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_open_by_name\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_close\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_setattr\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_unlink\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_callstat\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_data_cache\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_recover_cache\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_refresh_cache\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_flush_cache\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_release_cache\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_read\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_write\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_su\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_Cache_inode_access\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "void \fBnfs_layer_SetLogLevel\fP (int log_lvl)"
.br
.ti -1c
.RI "int \fBfn_nfs_init\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_MNT1_command\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_MNT3_command\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_NFS2_command\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_NFS3_command\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_cd\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_ls\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_mount\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_umount\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_pwd\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_create\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_mkdir\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_unlink\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_setattr\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_rename\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_hardlink\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_ln\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_stat\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_su\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_id\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "void \fBnfs_remote_layer_SetLogLevel\fP (int log_lvl)"
.br
.ti -1c
.RI "int \fBfn_rpc_init\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_MNT1_remote_command\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_MNT3_remote_command\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_NFS2_remote_command\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_NFS3_remote_command\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_cd\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_ls\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_mount\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_umount\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_pwd\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_create\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_mkdir\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_unlink\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_setattr\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_rename\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_hardlink\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_ln\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_stat\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_su\fP (int argc, char **argv, FILE *output)"
.br
.ti -1c
.RI "int \fBfn_nfs_remote_id\fP (int argc, char **argv, FILE *output)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBlayer_def_t\fP \fBlayer_list\fP []"
.br
.in -1c
.SH "Detailed Description"
.PP 
Header file for processing user's command line. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
leibovic 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2006/01/24 15:04:22 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.52 
.RE
.PP

.PP
Definition in file \fBcommands.h\fP.
.SH "Function Documentation"
.PP 
.SS "void Cache_inode_layer_SetLogLevel (int log_lvl)"
.PP
Definition at line 337 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_access (int argc, char ** argv, FILE * output)"
.PP
perform an access command. syntax: access [F][R][W][X] <file> example: access toto FRX 
.PP
Definition at line 2772 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_cache_init (int argc, char ** argv, FILE * output)"
.PP
inits the filesystem.
.PP
proceed an init_fs command. 
.PP
Definition at line 797 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_callstat (int argc, char ** argv, FILE * output)"
.PP
display statistics about FSAL calls. 
.PP
Definition at line 1577 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_cd (int argc, char ** argv, FILE * output)"
.PP
proceed a cd command.
.PP
change current path 
.PP
Definition at line 911 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_close (int argc, char ** argv, FILE * output)"
.PP
Close a previously opened file
.PP
Close an opened entry 
.PP
Definition at line 4577 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_create (int argc, char ** argv, FILE * output)"
.PP
proceed an create command. 
.PP
Definition at line 2104 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_data_cache (int argc, char ** argv, FILE * output)"
.PP
cache en entry (REGULAR_FILE) in the data cache 
.PP
Definition at line 2944 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_flush_cache (int argc, char ** argv, FILE * output)"
.PP
flush en entry (REGULAR_FILE) in the data cache 
.PP
Definition at line 3425 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_gc (int argc, char ** argv, FILE * output)"
.PP
proceed to a call to the garbagge collector. 
.PP
Definition at line 1073 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_link (int argc, char ** argv, FILE * output)"
.PP
proceed a hard link (hard link) command.
.PP
proceed an create command. 
.PP
Definition at line 1809 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_ln (int argc, char ** argv, FILE * output)"
.PP
proceed an ln (symlink) command. 
.PP
Definition at line 1954 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_ls (int argc, char ** argv, FILE * output)"
.PP
proceed an ls command. 
.PP
Definition at line 1157 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_mkdir (int argc, char ** argv, FILE * output)"
.PP
proceed a mkdir command.
.PP
proceed an mkdir command. 
.PP
Definition at line 1636 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_open_by_name (int argc, char ** argv, FILE * output)"
.PP
proceed an open by name (open_by_name) command.
.PP
change current path 
.PP
Definition at line 4505 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_pwd (int argc, char ** argv, FILE * output)"
.PP
proceed an pwd command.
.PP
prints current path 
.PP
Definition at line 881 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_read (int argc, char ** argv, FILE * output)"
.PP
Reads the content of a cached regular file 
.PP
Definition at line 3545 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_recover_cache (int argc, char ** argv, FILE * output)"
.PP
recover the data cache 
.PP
Definition at line 3200 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_refresh_cache (int argc, char ** argv, FILE * output)"
.PP
refresh en entry (REGULAR_FILE) in the data cache 
.PP
Definition at line 3304 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_release_cache (int argc, char ** argv, FILE * output)"
.PP
cache en entry (REGULAR_FILE) in the data cache 
.PP
Definition at line 3089 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_rename (int argc, char ** argv, FILE * output)"
.PP
proceed a rename command. 
.PP
Definition at line 2275 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_setattr (int argc, char ** argv, FILE * output)"
.PP
setattr
.PP
syntax of command line: setattr file_path attribute_name attribute_value 
.PP
Definition at line 2588 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_stat (int argc, char ** argv, FILE * output)"
.PP
proceed a stat command. 
.PP
Definition at line 974 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_su (int argc, char ** argv, FILE * output)"
.PP
Change current user
.PP
change thread contexte. 
.PP
Definition at line 4411 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_unlink (int argc, char ** argv, FILE * output)"
.PP
proceed an unlink command. 
.PP
Definition at line 2448 of file commands_Cache_inode.c.
.SS "int fn_Cache_inode_write (int argc, char ** argv, FILE * output)"
.PP
Reads the content of a cached regular file 
.PP
Definition at line 3968 of file commands_Cache_inode.c.
.SS "int fn_fsal_access (int argc, char ** argv, FILE * output)"
.PP
test access rights.
.PP
perform an access command. syntax: access [-A] [F][R][W][X] <file> example: access toto FRX 
.PP
Definition at line 3133 of file commands_FSAL.c.
.SS "int fn_fsal_callstat (int argc, char ** argv, FILE * output)"
.PP
display statistics about FSAL calls. 
.PP
Definition at line 1821 of file commands_FSAL.c.
.SS "int fn_fsal_cat (int argc, char ** argv, FILE * output)"
.PP
display a file.
.PP
Command that prints a file to screen. cat [-f] <path> 
.PP
Definition at line 5112 of file commands_FSAL.c.
.SS "int fn_fsal_cd (int argc, char ** argv, FILE * output)"
.PP
proceed a cd command.
.PP
change current path 
.PP
Definition at line 932 of file commands_FSAL.c.
.SS "int fn_fsal_close (int argc, char ** argv, FILE * output)"
.PP
close a file.
.PP
Command that closes a file. close 
.PP
Definition at line 4983 of file commands_FSAL.c.
.SS "int fn_fsal_close_byfileid (int argc, char ** argv, FILE * output)"
.PP
close a file.
.PP
Command that closes a file. close 
.PP
Definition at line 5047 of file commands_FSAL.c.
.SS "int fn_fsal_create (int argc, char ** argv, FILE * output)"
.PP
create a regular file.
.PP
proceed an create command. 
.PP
Definition at line 2765 of file commands_FSAL.c.
.SS "int fn_fsal_cross (int argc, char ** argv, FILE * output)"
.PP
cross a junction.
.PP
change current path 
.PP
Definition at line 5481 of file commands_FSAL.c.
.SS "int fn_fsal_getxattr (int argc, char ** argv, FILE * output)"
.PP
display an extended attribute. 
.PP
Definition at line 1293 of file commands_FSAL.c.
.SS "int fn_fsal_handlecmp (int argc, char ** argv, FILE * output)"
.PP
compare 2 handles. 
.PP
Definition at line 5573 of file commands_FSAL.c.
.SS "int fn_fsal_hardlink (int argc, char ** argv, FILE * output)"
.PP
create a hardlink.
.PP
proceed a hardlink command. 
.PP
Definition at line 2606 of file commands_FSAL.c.
.SS "int fn_fsal_init_fs (int argc, char ** argv, FILE * output)"
.PP
inits the filesystem.
.PP
proceed an init_fs command. 
.PP
Definition at line 654 of file commands_FSAL.c.
.SS "int fn_fsal_ln (int argc, char ** argv, FILE * output)"
.PP
create a symlink.
.PP
proceed an ln command. 
.PP
Definition at line 2439 of file commands_FSAL.c.
.SS "int fn_fsal_ls (int argc, char ** argv, FILE * output)"
.PP
proceed an ls command. 
.PP
Definition at line 1533 of file commands_FSAL.c.
.SS "int fn_fsal_lsxattrs (int argc, char ** argv, FILE * output)"
.PP
list extended attributes. 
.PP
Definition at line 1159 of file commands_FSAL.c.
.SS "int fn_fsal_mkdir (int argc, char ** argv, FILE * output)"
.PP
create a directory.
.PP
proceed an mkdir command. 
.PP
Definition at line 2096 of file commands_FSAL.c.
.SS "int fn_fsal_open (int argc, char ** argv, FILE * output)"
.PP
open a file.
.PP
Command that opens a file using specific flags. open <path> [ rwat ] 
.PP
Definition at line 3702 of file commands_FSAL.c.
.SS "int fn_fsal_open_byfileid (int argc, char ** argv, FILE * output)"
.PP
open a file (using FSAL_open_by_name).
.PP
Command that opens a file using specific flags. open <path> [ rwat ] 
.PP
Definition at line 3893 of file commands_FSAL.c.
.SS "int fn_fsal_open_byname (int argc, char ** argv, FILE * output)"
.PP
open a file (using FSAL_open_by_name).
.PP
Command that opens a file using specific flags, but using FSAL_open_by_name. open <path> [ rwat ] 
.PP
Definition at line 3508 of file commands_FSAL.c.
.SS "int fn_fsal_pwd (int argc, char ** argv, FILE * output)"
.PP
proceed an pwd command.
.PP
prints current path 
.PP
Definition at line 726 of file commands_FSAL.c.
.SS "int fn_fsal_rcp (int argc, char ** argv, FILE * output)"
.PP
copy a file to/from local path.
.PP
Command that copy a file from/to the local filesystem. rcp [-h] -r|-w <fsal_path> <local_path> 
.PP
Definition at line 5278 of file commands_FSAL.c.
.SS "int fn_fsal_read (int argc, char ** argv, FILE * output)"
.PP
read from file.
.PP
Command that reads data from an opened file. 
.PP
Definition at line 4090 of file commands_FSAL.c.
.SS "int fn_fsal_rename (int argc, char ** argv, FILE * output)"
.PP
create a directory.
.PP
proceed a rename command. 
.PP
Definition at line 2264 of file commands_FSAL.c.
.SS "int fn_fsal_setattr (int argc, char ** argv, FILE * output)"
.PP
change file attributes. 
.PP
Definition at line 2947 of file commands_FSAL.c.
.SS "int fn_fsal_stat (int argc, char ** argv, FILE * output)"
.PP
proceed a stat command. 
.PP
Definition at line 1032 of file commands_FSAL.c.
.SS "int fn_fsal_su (int argc, char ** argv, FILE * output)"
.PP
change current user.
.PP
change thread contexte. 
.PP
Definition at line 1865 of file commands_FSAL.c.
.SS "int fn_fsal_truncate (int argc, char ** argv, FILE * output)"
.PP
truncate file.
.PP
proceed a truncate command. 
.PP
Definition at line 3378 of file commands_FSAL.c.
.SS "int fn_fsal_unlink (int argc, char ** argv, FILE * output)"
.PP
unlink an fs object.
.PP
proceed an unlink command. 
.PP
Definition at line 1971 of file commands_FSAL.c.
.SS "int fn_fsal_write (int argc, char ** argv, FILE * output)"
.PP
write to file.
.PP
Command that writes data to an opened file.
.PP
Usage: write [-h][-v] [ -s <seek_type>,<offset> ] [-N <nb_times>] -A <ascii_string> write [-h][-v] [ -s <seek_type>,<offset> ] [-N <nb_times>] -X <hexa_data> Where: <seek_type> can be: SET, CUR, END <offset> is a signed number of bytes. <nb_times> is the number of times we write the expression into the file.
.PP
<ascii_string> is a string to be written to file. Note that the null terminating character of is also written to file. or <hexa_data> is a data represented in hexadecimal format, that is to be written to file.
.PP
Examples:
.PP
For writing 10 times the null terminated string 'hello world' at the end of the file: write -s END,0 -N 10 -A 'hello world'
.PP
For overwriting the beginning of the file with the pattern 0xA1267AEF31254ADE repeated twice: write -s SET,0 -N 2 -X 'A1267AEF31254ADE' 
.PP
Definition at line 4534 of file commands_FSAL.c.
.SS "int fn_MNT1_command (int argc, char ** argv, FILE * output)"
.PP
process MNT1 protocol's command. 
.PP
Definition at line 628 of file commands_NFS.c.
.SS "int fn_MNT1_remote_command (int argc, char ** argv, FILE * output)"
.PP
process MNT1 protocol's command. 
.PP
Definition at line 681 of file commands_NFS_remote.c.
.SS "int fn_MNT3_command (int argc, char ** argv, FILE * output)"
.PP
process MNT3 protocol's command. 
.PP
Definition at line 732 of file commands_NFS.c.
.SS "int fn_MNT3_remote_command (int argc, char ** argv, FILE * output)"
.PP
process MNT3 protocol's command. 
.PP
Definition at line 763 of file commands_NFS_remote.c.
.SS "int fn_NFS2_command (int argc, char ** argv, FILE * output)"
.PP
process NFS2 protocol's command. 
.PP
Definition at line 833 of file commands_NFS.c.
.SS "int fn_NFS2_remote_command (int argc, char ** argv, FILE * output)"
.PP
process NFS2 protocol's command. 
.PP
Definition at line 845 of file commands_NFS_remote.c.
.SS "int fn_NFS3_command (int argc, char ** argv, FILE * output)"
.PP
process NFS3 protocol's command. 
.PP
Definition at line 952 of file commands_NFS.c.
.SS "int fn_NFS3_remote_command (int argc, char ** argv, FILE * output)"
.PP
process NFS3 protocol's command. 
.PP
Definition at line 928 of file commands_NFS_remote.c.
.SS "int fn_nfs_cd (int argc, char ** argv, FILE * output)"
.PP
process a cd command using NFS protocol.
.PP
change current path 
.PP
Definition at line 2682 of file commands_NFS.c.
.SS "int fn_nfs_create (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
create a file 
.PP
Definition at line 2768 of file commands_NFS.c.
.SS "int fn_nfs_hardlink (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
proceed a hardlink command. 
.PP
Definition at line 3418 of file commands_NFS.c.
.SS "int fn_nfs_id (int argc, char ** argv, FILE * output)"
.PP
Definition at line 3958 of file commands_NFS.c.
.SS "int fn_nfs_init (int argc, char ** argv, FILE * output)"
.PP
process NFS layer initialization.
.PP
Init nfs layer 
.PP
Definition at line 541 of file commands_NFS.c.
.SS "int fn_nfs_ln (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
proceed an ln command. 
.PP
Definition at line 3551 of file commands_NFS.c.
.SS "int fn_nfs_ls (int argc, char ** argv, FILE * output)"
.PP
process an ls command using NFS protocol.
.PP
proceed an ls command using NFS protocol NFS 
.PP
Definition at line 2343 of file commands_NFS.c.
.SS "int fn_nfs_mkdir (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
create a directory 
.PP
Definition at line 2895 of file commands_NFS.c.
.SS "int fn_nfs_mount (int argc, char ** argv, FILE * output)"
.PP
process a mount command using MOUNT protocol.
.PP
mount a path to browse it. 
.PP
Definition at line 2105 of file commands_NFS.c.
.SS "int fn_nfs_pwd (int argc, char ** argv, FILE * output)"
.PP
process an ls command using NFS protocol.
.PP
prints current path 
.PP
Definition at line 2309 of file commands_NFS.c.
.SS "int fn_nfs_remote_cd (int argc, char ** argv, FILE * output)"
.PP
process a cd command using NFS protocol.
.PP
change current path 
.PP
Definition at line 2472 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_create (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
create a file 
.PP
Definition at line 2548 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_hardlink (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
proceed a hardlink command. 
.PP
Definition at line 3132 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_id (int argc, char ** argv, FILE * output)"
.PP
Definition at line 3621 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_ln (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
proceed an ln command. 
.PP
Definition at line 3254 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_ls (int argc, char ** argv, FILE * output)"
.PP
process an ls command using NFS protocol.
.PP
proceed an ls command using NFS protocol NFS 
.PP
Definition at line 2144 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_mkdir (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
create a directory 
.PP
Definition at line 2657 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_mount (int argc, char ** argv, FILE * output)"
.PP
process an mount command using MOUNT protocol.
.PP
mount a path to browse it. 
.PP
Definition at line 2000 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_pwd (int argc, char ** argv, FILE * output)"
.PP
process an ls command using NFS protocol.
.PP
prints current path 
.PP
Definition at line 2122 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_rename (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
proceed a rename command. 
.PP
Definition at line 3006 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_setattr (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
setattr 
.PP
Definition at line 2891 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_stat (int argc, char ** argv, FILE * output)"
.PP
process a stat command using NFS protocol.
.PP
proceed an ls command using NFS protocol NFS 
.PP
Definition at line 3384 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_su (int argc, char ** argv, FILE * output)"
.PP
change thread credentials. 
.PP
Definition at line 3534 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_umount (int argc, char ** argv, FILE * output)"
.PP
process a umount command using MOUNT protocol.
.PP
umount a mounted path 
.PP
Definition at line 2046 of file commands_NFS_remote.c.
.SS "int fn_nfs_remote_unlink (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
unlink a file 
.PP
Definition at line 2769 of file commands_NFS_remote.c.
.SS "int fn_nfs_rename (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
proceed a rename command. 
.PP
Definition at line 3281 of file commands_NFS.c.
.SS "int fn_nfs_setattr (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
setattr 
.PP
Definition at line 3153 of file commands_NFS.c.
.SS "int fn_nfs_stat (int argc, char ** argv, FILE * output)"
.PP
process a stat command using NFS protocol.
.PP
proceed an ls command using NFS protocol NFS 
.PP
Definition at line 3692 of file commands_NFS.c.
.SS "int fn_nfs_su (int argc, char ** argv, FILE * output)"
.PP
change thread credentials. 
.PP
Definition at line 3854 of file commands_NFS.c.
.SS "int fn_nfs_umount (int argc, char ** argv, FILE * output)"
.PP
process an umount command using MOUNT protocol.
.PP
umount a mounted path. 
.PP
Definition at line 2216 of file commands_NFS.c.
.SS "int fn_nfs_unlink (int argc, char ** argv, FILE * output)"
.PP
process an create command using NFS protocol.
.PP
unlink a file 
.PP
Definition at line 3021 of file commands_NFS.c.
.SS "int fn_rpc_init (int argc, char ** argv, FILE * output)"
.PP
process RPC clients initialization.
.PP
fn_rpc_init 
.PP
Definition at line 594 of file commands_NFS_remote.c.
.SS "void fsal_layer_SetLogLevel (int log_lvl)"
.PP
Definition at line 487 of file commands_FSAL.c.
.SS "void nfs_layer_SetLogLevel (int log_lvl)"
.PP
Definition at line 458 of file commands_NFS.c.
.SS "void nfs_remote_layer_SetLogLevel (int log_lvl)"
.PP
Definition at line 672 of file commands_NFS_remote.c.
.SH "Variable Documentation"
.PP 
.SS "\fBlayer_def_t\fP \fBlayer_list\fP[]"
.PP
Layer list. 
.PP
Definition at line 186 of file shell.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for ganeshell from the source code.
