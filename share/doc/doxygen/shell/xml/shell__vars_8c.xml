<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="shell__vars_8c" kind="file">
    <compoundname>shell_vars.c</compoundname>
    <includes local="no">HashTable.h</includes>
    <includes local="no">strings.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="shell__vars_8h" local="yes">shell_vars.h</includes>
    <includes local="yes">stuff_alloc.h</includes>
    <incdepgraph>
      <node id="306">
        <label>stdlib.h</label>
      </node>
      <node id="307">
        <label>string.h</label>
      </node>
      <node id="304">
        <label>HashTable.h</label>
      </node>
      <node id="305">
        <label>strings.h</label>
      </node>
      <node id="310">
        <label>stuff_alloc.h</label>
      </node>
      <node id="309">
        <label>stdio.h</label>
      </node>
      <node id="303">
        <label>shell_vars.c</label>
        <link refid="shell_vars.c"/>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
      </node>
      <node id="308">
        <label>shell_vars.h</label>
        <link refid="shell__vars_8h"/>
        <childnode refid="309" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structshell__variable____" prot="public">shell_variable__</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="shell__vars_8c_1a468798f6d51390ba49a1677d81f9ad32" prot="public" static="no">
        <name>IS_LETTER</name>
        <param><defname>_c_</defname></param>
        <initializer>(((_c_) &gt;= &apos;a&apos;) &amp;&amp; ((_c_) &lt;= &apos;z&apos;))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="217" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shell__vars_8c_1a49ec4bff859e1395d2e50dda982afea7" prot="public" static="no">
        <name>IS_LETTER_CAP</name>
        <param><defname>_c_</defname></param>
        <initializer>(((_c_) &gt;= &apos;A&apos;) &amp;&amp; ((_c_) &lt;= &apos;Z&apos;))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="218" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shell__vars_8c_1a3e34027c60cdb95d55d1923393b6ea30" prot="public" static="no">
        <name>IS_NUMERIC</name>
        <param><defname>_c_</defname></param>
        <initializer>(((_c_) &gt;= &apos;0&apos;) &amp;&amp; ((_c_) &lt;= &apos;9&apos;))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="219" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="219" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="shell__vars_8c_1a40d761086d51ee95186910c61cc99fd6" prot="public" static="no">
        <type>struct <ref refid="structshell__variable____" kindref="compound">shell_variable__</ref></type>
        <definition>typedef struct shell_variable__  shell_variable_t</definition>
        <argsstring></argsstring>
        <name>shell_variable_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="76"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="shell__vars_8c_1a8f57932ffa3e6ede0cfdd67b1c08d6ff" prot="public" static="yes" mutable="no">
        <type>pthread_key_t</type>
        <definition>pthread_key_t thread_key</definition>
        <argsstring></argsstring>
        <name>thread_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="79" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="shell__vars_8c_1a903e94b9925b177f24b6de44e87cb2ac" prot="public" static="yes" mutable="no">
        <type>pthread_once_t</type>
        <definition>pthread_once_t once_key</definition>
        <argsstring></argsstring>
        <name>once_key</name>
        <initializer> PTHREAD_ONCE_INIT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="80" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="shell__vars_8c_1af1e49363f35a85580c49e2acd4bd62bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_keys</definition>
        <argsstring>(void)</argsstring>
        <name>init_keys</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="85" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="84" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="shell__vars_8c_1a8e5ea5a038bbaf82d9b3363dff5d2679" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref> *</type>
        <definition>static shell_variable_t* GetVarTable</definition>
        <argsstring>()</argsstring>
        <name>GetVarTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>manages pthread_keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="97" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="96" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="shell__vars_8c_1a310e28d26e2146fdad72669a2d02be0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetVarTable</definition>
        <argsstring>(shell_variable_t *var_table)</argsstring>
        <name>SetVarTable</name>
        <param>
          <type><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref> *</type>
          <declname>var_table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="112" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="shell__vars_8c_1a108be7d3668f688da7ac24d2e95f89c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_varlist</definition>
        <argsstring>(FILE *output, int is_dlen)</argsstring>
        <name>print_varlist</name>
        <param>
          <type>FILE *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_dlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>print var list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="122" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="121" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="shell__vars_8c_1a380ea6e29b6332018fa7be930cf3d2d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref> *</type>
        <definition>static shell_variable_t* find_var</definition>
        <argsstring>(char *str)</argsstring>
        <name>find_var</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="136" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="135" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="shell__vars_8c_1a31b650e98a1e1a71b970300ac1bda30b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref> *</type>
        <definition>static shell_variable_t* create_var</definition>
        <argsstring>(char *str)</argsstring>
        <name>create_var</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="148" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="147" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="shell__vars_8c_1a670d65cdb7e6206b8428bd227f70e93e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void set_var</definition>
        <argsstring>(shell_variable_t *var, char *value)</argsstring>
        <name>set_var</name>
        <param>
          <type><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref> *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="170" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="169" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="shell__vars_8c_1aba24a643cd03c7d18765329c88e39adb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void del_var</definition>
        <argsstring>(shell_variable_t *var)</argsstring>
        <name>del_var</name>
        <param>
          <type><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref> *</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="191" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="190" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="shell__vars_8c_1af857dc4843a1ef1f36d21b6060578470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int is_authorized_varname</definition>
        <argsstring>(char *str)</argsstring>
        <name>is_authorized_varname</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>indicates whether a name is authorized for a variable. A variable name must be in [a-zA-Z0-9._:]* </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="225" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="224" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="shell__vars_8c_1a29bc337d24deebcc1d223335830f03a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* get_var_value</definition>
        <argsstring>(char *varname)</argsstring>
        <name>get_var_value</name>
        <param>
          <type>char *</type>
          <declname>varname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the value for a variable, NULL if the variable doesn&apos;t exist. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="255" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="254" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="shell__vars_8c_1a42c616a19301305c64bfd5abc4b45add" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int set_var_value</definition>
        <argsstring>(char *varname, char *var_value)</argsstring>
        <name>set_var_value</name>
        <param>
          <type>char *</type>
          <declname>varname</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>var_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the value for a variable, and create it if necessary. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="271" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="270" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="shell__vars_8c_1a228c7f788656a8815ca10a5e942d3705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int free_var</definition>
        <argsstring>(char *varname)</argsstring>
        <name>free_var</name>
        <param>
          <type>char *</type>
          <declname>varname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>free the resources used by a variable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/shell/shell_vars.c" line="289" bodyfile="/export/GANESHA/src/shell/shell_vars.c" bodystart="288" bodyend="301"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>variables management for the shell. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para></para></simplesect>
<simplesect kind="rcs"><title>Author</title><para>leibovic </para></simplesect>
<simplesect kind="date"><para></para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2006/01/24 13:49:33 </para></simplesect>
<simplesect kind="version"><para></para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>1.8 </para></simplesect>
<simplesect kind="rcs"><title>Log</title><para><ref refid="shell__vars_8c" kindref="compound">shell_vars.c</ref>,v </para></simplesect>
Revision 1.8 2006/01/24 13:49:33 leibovic Adding missing includes.</para><para>Revision 1.6 2005/07/26 12:54:47 leibovic Multi-thread shell with synchronisation routines.</para><para>Revision 1.5 2005/05/10 14:02:45 leibovic Removing adherence to BuddyMalloc.</para><para>Revision 1.4 2005/05/09 12:23:55 leibovic Version 2 of ganeshell.</para><para>Revision 1.3 2005/05/03 08:06:23 leibovic Adding meminfo command.</para><para>Revision 1.2 2005/05/03 07:37:58 leibovic Using Mem_Alloc and Mem_Free.</para><para>Revision 1.1 2004/12/14 09:56:00 leibovic Variables management. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>vim:expandtab:shiftwidth=8:tabstop=8:</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>CEA/DAM/DIF<sp/><sp/>(2008)</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>contributeur<sp/>:<sp/>Philippe<sp/>DENIEL<sp/><sp/><sp/>philippe.deniel@cea.fr</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thomas<sp/>LEIBOVICI<sp/><sp/>thomas.leibovici@cea.fr</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>---------------------------------------</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;HashTable.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;strings.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shell__vars_8h" kindref="compound" tooltip="variables management for the shell.">shell_vars.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stuff_alloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>variable<sp/>struct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="structshell__variable____" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__variable____" kindref="compound">shell_variable__</ref></highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71" refid="structshell__variable_____1a4762c0a19f41db96e04d416d1cb58c21" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structshell__variable_____1a4762c0a19f41db96e04d416d1cb58c21" kindref="member">var_name</ref>[<ref refid="shell__vars_8h_1ab88da9f4af960323f7db2e63b7491975" kindref="member">MAX_VAR_LEN</ref>];</highlight></codeline>
<codeline lineno="72" refid="structshell__variable_____1a529321e06f79480c4b0c485ef71442da" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structshell__variable_____1a529321e06f79480c4b0c485ef71442da" kindref="member">var_value</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>mallocated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="structshell__variable_____1a6f5d028f344b6409880a78b60c6bdc1c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structshell__variable_____1a6f5d028f344b6409880a78b60c6bdc1c" kindref="member">datalen</ref>;</highlight></codeline>
<codeline lineno="74" refid="structshell__variable_____1adf6c563db01cac7c20c4d761a6beaf11" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__variable____" kindref="compound">shell_variable__</ref><sp/>*<ref refid="structshell__variable_____1adf6c563db01cac7c20c4d761a6beaf11" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="75" refid="structshell__variable_____1a9879e881df74561b574d56c45814d3f3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__variable____" kindref="compound">shell_variable__</ref><sp/>*<ref refid="structshell__variable_____1a9879e881df74561b574d56c45814d3f3" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}<sp/><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>threads<sp/>keys<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pthread_key_t<sp/>thread_key;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pthread_once_t<sp/>once_key<sp/>=<sp/>PTHREAD_ONCE_INIT;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>init<sp/>pthtread_key<sp/>for<sp/>current<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_keys(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pthread_key_create(&amp;thread_key,<sp/><ref refid="Getopt_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>%d<sp/>creating<sp/>pthread<sp/>key<sp/>for<sp/>thread<sp/>%p<sp/>:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno,<sp/>(caddr_t)<sp/>pthread_self(),<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>init_keys<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*GetVarTable()</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>first,<sp/>we<sp/>init<sp/>the<sp/>keys<sp/>if<sp/>this<sp/>is<sp/>the<sp/>first<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pthread_once(&amp;once_key,<sp/>init_keys)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>%d<sp/>calling<sp/>pthread_once<sp/>for<sp/>thread<sp/>%p<sp/>:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno,<sp/>(caddr_t)<sp/>pthread_self(),<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="Getopt_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*)<sp/>pthread_getspecific(thread_key);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>GetVarTable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="shell__vars_8c_1a310e28d26e2146fdad72669a2d02be0c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="shell__vars_8c_1a310e28d26e2146fdad72669a2d02be0c" kindref="member">SetVarTable</ref>(<ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*<sp/>var_table)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>the<sp/>specific<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>pthread_setspecific(thread_key,<sp/>var_table);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="shell__vars_8h_1a108be7d3668f688da7ac24d2e95f89c6" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="shell__vars_8c_1a108be7d3668f688da7ac24d2e95f89c6" kindref="member">print_varlist</ref>(FILE<sp/>*<sp/>output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_dlen)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*current<sp/>=<sp/>GetVarTable();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(current)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(is_dlen)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t%s<sp/>(%d<sp/>Bytes)\n&quot;</highlight><highlight class="normal">,<sp/>current-&gt;<ref refid="structshell__variable_____1a4762c0a19f41db96e04d416d1cb58c21" kindref="member">var_name</ref>,<sp/>current-&gt;<ref refid="structshell__variable_____1a6f5d028f344b6409880a78b60c6bdc1c" kindref="member">datalen</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t%s\n&quot;</highlight><highlight class="normal">,<sp/>current-&gt;<ref refid="structshell__variable_____1a4762c0a19f41db96e04d416d1cb58c21" kindref="member">var_name</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="structshell__variable_____1adf6c563db01cac7c20c4d761a6beaf11" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*find_var(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*current<sp/>=<sp/>GetVarTable();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(current)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!strncmp(current-&gt;<ref refid="structshell__variable_____1a4762c0a19f41db96e04d416d1cb58c21" kindref="member">var_name</ref>,<sp/>str,<sp/><ref refid="shell__vars_8h_1ab88da9f4af960323f7db2e63b7491975" kindref="member">MAX_VAR_LEN</ref>))</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="structshell__variable_____1adf6c563db01cac7c20c4d761a6beaf11" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="Getopt_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*create_var(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*var_table<sp/>=<sp/>GetVarTable();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>remembers<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*new_item<sp/>=<sp/>(<ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*)<sp/>Mem_Alloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref>));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>strncpy(new_item-&gt;<ref refid="structshell__variable_____1a4762c0a19f41db96e04d416d1cb58c21" kindref="member">var_name</ref>,<sp/>str,<sp/><ref refid="shell__vars_8h_1ab88da9f4af960323f7db2e63b7491975" kindref="member">MAX_VAR_LEN</ref>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>new_item-&gt;<ref refid="structshell__variable_____1a529321e06f79480c4b0c485ef71442da" kindref="member">var_value</ref><sp/>=<sp/><ref refid="Getopt_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>new_item-&gt;<ref refid="structshell__variable_____1a6f5d028f344b6409880a78b60c6bdc1c" kindref="member">datalen</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>inserting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(var_table)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>var_table-&gt;<ref refid="structshell__variable_____1a9879e881df74561b574d56c45814d3f3" kindref="member">prev</ref><sp/>=<sp/>new_item;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>new_item-&gt;<ref refid="structshell__variable_____1adf6c563db01cac7c20c4d761a6beaf11" kindref="member">next</ref><sp/>=<sp/>var_table;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>new_item-&gt;<ref refid="structshell__variable_____1a9879e881df74561b574d56c45814d3f3" kindref="member">prev</ref><sp/>=<sp/><ref refid="Getopt_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><ref refid="shell__vars_8c_1a310e28d26e2146fdad72669a2d02be0c" kindref="member">SetVarTable</ref>(new_item);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_item;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_var(<ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*<sp/>var,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlen;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>clears<sp/>old<sp/>value,<sp/>if<sp/>any<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(var-&gt;<ref refid="structshell__variable_____1a529321e06f79480c4b0c485ef71442da" kindref="member">var_value</ref>)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(var-&gt;<ref refid="structshell__variable_____1a529321e06f79480c4b0c485ef71442da" kindref="member">var_value</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var-&gt;<ref refid="structshell__variable_____1a529321e06f79480c4b0c485ef71442da" kindref="member">var_value</ref><sp/>=<sp/><ref refid="Getopt_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var-&gt;<ref refid="structshell__variable_____1a6f5d028f344b6409880a78b60c6bdc1c" kindref="member">datalen</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>alloc<sp/>and<sp/>set<sp/>new<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>dlen<sp/>=<sp/>strlen(value)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>var-&gt;<ref refid="structshell__variable_____1a6f5d028f344b6409880a78b60c6bdc1c" kindref="member">datalen</ref><sp/>=<sp/>dlen;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>var-&gt;<ref refid="structshell__variable_____1a529321e06f79480c4b0c485ef71442da" kindref="member">var_value</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Mem_Alloc(dlen);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>strncpy(var-&gt;<ref refid="structshell__variable_____1a529321e06f79480c4b0c485ef71442da" kindref="member">var_value</ref>,<sp/>value,<sp/>dlen);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>del_var(<ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*<sp/>var)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>remove<sp/>from<sp/>the<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(var-&gt;<ref refid="structshell__variable_____1a9879e881df74561b574d56c45814d3f3" kindref="member">prev</ref>)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var-&gt;<ref refid="structshell__variable_____1a9879e881df74561b574d56c45814d3f3" kindref="member">prev</ref>-&gt;<ref refid="structshell__variable_____1adf6c563db01cac7c20c4d761a6beaf11" kindref="member">next</ref><sp/>=<sp/>var-&gt;<ref refid="structshell__variable_____1adf6c563db01cac7c20c4d761a6beaf11" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shell__vars_8c_1a310e28d26e2146fdad72669a2d02be0c" kindref="member">SetVarTable</ref>(var-&gt;<ref refid="structshell__variable_____1adf6c563db01cac7c20c4d761a6beaf11" kindref="member">next</ref>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(var-&gt;<ref refid="structshell__variable_____1adf6c563db01cac7c20c4d761a6beaf11" kindref="member">next</ref>)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var-&gt;<ref refid="structshell__variable_____1adf6c563db01cac7c20c4d761a6beaf11" kindref="member">next</ref>-&gt;<ref refid="structshell__variable_____1a9879e881df74561b574d56c45814d3f3" kindref="member">prev</ref><sp/>=<sp/>var-&gt;<ref refid="structshell__variable_____1a9879e881df74561b574d56c45814d3f3" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(var-&gt;<ref refid="structshell__variable_____1a529321e06f79480c4b0c485ef71442da" kindref="member">var_value</ref>)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem_Free(var-&gt;<ref refid="structshell__variable_____1a529321e06f79480c4b0c485ef71442da" kindref="member">var_value</ref>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>Mem_Free((caddr_t)<sp/>var);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="shell__vars_8c_1a468798f6d51390ba49a1677d81f9ad32" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_LETTER(_c_)<sp/>(((_c_)<sp/>&gt;=<sp/>&apos;a&apos;)<sp/>&amp;&amp;<sp/>((_c_)<sp/>&lt;=<sp/>&apos;z&apos;))</highlight></codeline>
<codeline lineno="218" refid="shell__vars_8c_1a49ec4bff859e1395d2e50dda982afea7" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IS_LETTER_CAP(_c_)<sp/>(((_c_)<sp/>&gt;=<sp/>&apos;A&apos;)<sp/>&amp;&amp;<sp/>((_c_)<sp/>&lt;=<sp/>&apos;Z&apos;))</highlight></codeline>
<codeline lineno="219" refid="shell__vars_8c_1a3e34027c60cdb95d55d1923393b6ea30" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IS_NUMERIC(_c_)<sp/>(((_c_)<sp/>&gt;=<sp/>&apos;0&apos;)<sp/>&amp;&amp;<sp/>((_c_)<sp/>&lt;=<sp/>&apos;9&apos;))</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="224" refid="shell__vars_8h_1af857dc4843a1ef1f36d21b6060578470" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="shell__vars_8c_1af857dc4843a1ef1f36d21b6060578470" kindref="member">is_authorized_varname</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>special<sp/>var<sp/>$?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!strcmp(str,<sp/></highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(str[len])</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>str[len];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="shell__vars_8c_1a468798f6d51390ba49a1677d81f9ad32" kindref="member">IS_LETTER</ref>(c)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="shell__vars_8c_1a49ec4bff859e1395d2e50dda982afea7" kindref="member">IS_LETTER_CAP</ref>(c)<sp/>&amp;&amp;<sp/>!<ref refid="shell__vars_8c_1a3e34027c60cdb95d55d1923393b6ea30" kindref="member">IS_NUMERIC</ref>(c)<sp/>&amp;&amp;<sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len++;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(len<sp/>&gt;<sp/><ref refid="shell__vars_8h_1ab88da9f4af960323f7db2e63b7491975" kindref="member">MAX_VAR_LEN</ref>)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="shell__vars_8h_1a29bc337d24deebcc1d223335830f03a4" refkind="member"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="shell__vars_8c_1a29bc337d24deebcc1d223335830f03a4" kindref="member">get_var_value</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*varname)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*var;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(var<sp/>=<sp/>find_var(varname))</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>var-&gt;<ref refid="structshell__variable_____1a529321e06f79480c4b0c485ef71442da" kindref="member">var_value</ref>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="Getopt_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="shell__vars_8h_1a42c616a19301305c64bfd5abc4b45add" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="shell__vars_8c_1a42c616a19301305c64bfd5abc4b45add" kindref="member">set_var_value</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*varname,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structshell__variable_____1a529321e06f79480c4b0c485ef71442da" kindref="member">var_value</ref>)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*var;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>the<sp/>value<sp/>doesn&apos;t<sp/>exist,<sp/>create<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(var<sp/>=<sp/>find_var(varname)))</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>=<sp/>create_var(varname);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!var)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>set_var(var,<sp/>var_value);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="shell__vars_8h_1a228c7f788656a8815ca10a5e942d3705" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="shell__vars_8c_1a228c7f788656a8815ca10a5e942d3705" kindref="member">free_var</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*varname)</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><ref refid="structshell__variable____" kindref="compound">shell_variable_t</ref><sp/>*var;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>the<sp/>value<sp/>doesn&apos;t<sp/>exist,<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(var<sp/>=<sp/>find_var(varname)))</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>del_var(var);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/export/GANESHA/src/shell/shell_vars.c"/>
  </compounddef>
</doxygen>
