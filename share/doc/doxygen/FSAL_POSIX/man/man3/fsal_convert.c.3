.TH "fsal_convert.c" 3 "9 Apr 2008" "Version 0.1" "File System Abstraction Layer (POSIX) library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
fsal_convert.c \- HPSS-FSAL type translation functions. 
.SH SYNOPSIS
.br
.PP
\fC#include 'fsal_convert.h'\fP
.br
\fC#include 'fsal_internal.h'\fP
.br
\fC#include <sys/types.h>\fP
.br
\fC#include <sys/stat.h>\fP
.br
\fC#include <errno.h>\fP
.br
\fC#include <string.h>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMAX_2\fP(x, y)   ( (x) > (y) ? (x) : (y) )"
.br
.ti -1c
.RI "#define \fBMAX_3\fP(x, y, z)   ( (x) > (y) ? MAX_2((x),(z)) : MAX_2((y),(z)) )"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBposix2fsal_error\fP (int posix_errorcode)"
.br
.ti -1c
.RI "int \fBfsal2posix_testperm\fP (fsal_accessflags_t testperm)"
.br
.ti -1c
.RI "int \fBfsal2posix_openflags\fP (fsal_openflags_t fsal_flags, char *p_posix_flags)"
.br
.ti -1c
.RI "mode_t \fBfsal2unix_mode\fP (fsal_accessmode_t fsal_mode)"
.br
.ti -1c
.RI "fsal_accessmode_t \fBunix2fsal_mode\fP (mode_t unix_mode)"
.br
.ti -1c
.RI "fsal_nodetype_t \fBposix2fsal_type\fP (mode_t posix_type_in)"
.br
.ti -1c
.RI "fsal_time_t \fBposix2fsal_time\fP (time_t tsec)"
.br
.ti -1c
.RI "fsal_fsid_t \fBposix2fsal_fsid\fP (dev_t posix_devid)"
.br
.ti -1c
.RI "fsal_dev_t \fBposix2fsal_devt\fP (dev_t posix_devid)"
.br
.ti -1c
.RI "fsal_status_t \fBposix2fsal_attributes\fP (struct stat *p_buffstat, fsal_attrib_list_t *p_fsalattr_out)"
.br
.ti -1c
.RI "fsal_status_t \fBposixdb2fsal_error\fP (fsal_posixdb_status_t statusdb)"
.br
.in -1c
.SH "Detailed Description"
.PP 
HPSS-FSAL type translation functions. 

\fBAuthor:\fP
.RS 4
\fBAuthor\fP.RS 4
leibovic 
.RE
.PP
.RE
.PP
\fBDate:\fP
.RS 4
\fBDate\fP.RS 4
2006/01/17 15:53:39 
.RE
.PP
.RE
.PP
\fBVersion:\fP
.RS 4
\fBRevision\fP.RS 4
1.31 
.RE
.PP
.RE
.PP

.PP
Definition in file \fBfsal_convert.c\fP.
.SH "Function Documentation"
.PP 
.SS "int fsal2posix_openflags (fsal_openflags_t fsal_flags, char * p_posix_flags)"
.PP
pen_by_n fsal2posix_openflags: Convert FSAL open flags to Posix open flags.
.PP
\fBParameters:\fP
.RS 4
\fIfsal_flags\fP (input): The FSAL open flags to be translated. 
.br
\fIp_hpss_flags\fP (output): Pointer to the POSIX open flags.
.RE
.PP
\fBReturns:\fP
.RS 4
- ERR_FSAL_NO_ERROR (no error).
.IP "\(bu" 2
ERR_FSAL_FAULT (p_hpss_flags is a NULL pointer).
.IP "\(bu" 2
ERR_FSAL_INVAL (invalid or incompatible input flags). 
.PP
.RE
.PP

.PP
Definition at line 205 of file fsal_convert.c.
.PP
Referenced by FSAL_open().
.SS "int fsal2posix_testperm (fsal_accessflags_t testperm)"
.PP
fsal2posix_testperm: Convert FSAL permission flags to Posix permission flags.
.PP
\fBParameters:\fP
.RS 4
\fItestperm\fP (input): The FSAL permission flags to be tested.
.RE
.PP
\fBReturns:\fP
.RS 4
The POSIX permission flags to be tested. 
.RE
.PP

.PP
Definition at line 177 of file fsal_convert.c.
.SS "mode_t fsal2unix_mode (fsal_accessmode_t fsal_mode)"
.PP
fsal2unix_mode: Convert FSAL mode to posix mode.
.PP
\fBParameters:\fP
.RS 4
\fIfsal_mode\fP (input): The FSAL mode to be translated.
.RE
.PP
\fBReturns:\fP
.RS 4
The posix mode associated to fsal_mode. 
.RE
.PP

.PP
Definition at line 263 of file fsal_convert.c.
.PP
Referenced by FSAL_create(), FSAL_mkdir(), FSAL_mknode(), and FSAL_setattrs().
.SS "int posix2fsal_error (int posix_errorcode)"
.PP
posix2fsal_error : Convert POSIX error codes to FSAL error codes.
.PP
\fBParameters:\fP
.RS 4
\fIposix_errorcode\fP (input): The error code returned from POSIX.
.RE
.PP
\fBReturns:\fP
.RS 4
The FSAL error code associated to posix_errorcode.
.RE
.PP
.PP
\fBTodo\fP
.RS 4
: The EBADF error also happens when file is opened for reading, and we try writting in it. In this case, we return ERR_FSAL_NOT_OPENED, but it doesn't seems to be a correct error translation. 
.RE
.PP
.PP
\fBWarning:\fP
.RS 4
AIX returns EEXIST where BSD uses ENOTEMPTY; We want ENOTEMPTY to be interpreted anyway on AIX plateforms. Thus, we explicitely write its value (87). 
.RE
.PP

.PP
Definition at line 41 of file fsal_convert.c.
.PP
Referenced by FSAL_close(), FSAL_closedir(), FSAL_create(), FSAL_dynamic_fsinfo(), FSAL_link(), FSAL_lookup(), FSAL_mkdir(), FSAL_mknode(), FSAL_open(), FSAL_opendir(), FSAL_rcp(), FSAL_read(), FSAL_readdir(), FSAL_readlink(), FSAL_rename(), FSAL_setattrs(), FSAL_symlink(), FSAL_truncate(), FSAL_unlink(), and FSAL_write().
.SS "fsal_nodetype_t posix2fsal_type (mode_t posix_type_in)"
.PP
posix2fsal_type: Convert posix object type to FSAL node type.
.PP
\fBParameters:\fP
.RS 4
\fIposix_type_in\fP (input): The POSIX object type.
.RE
.PP
\fBReturns:\fP
.RS 4
- The FSAL node type associated to posix_type_in.
.IP "\(bu" 2
-1 if the input type is unknown. 
.PP
.RE
.PP

.PP
Definition at line 331 of file fsal_convert.c.
.PP
Referenced by fsal_internal_posix2posixdb_fileinfo(), and FSAL_lookup().
.SS "fsal_status_t posixdb2fsal_error (fsal_posixdb_status_t statusdb)"
.PP
Concert fsal_posixdb_status_t to fsal_status_t 
.PP
Definition at line 518 of file fsal_convert.c.
.PP
Referenced by fsal_internal_getInfoFromChildrenList(), fsal_internal_getInfoFromName(), fsal_internal_getPathFromHandle(), FSAL_readdir(), FSAL_rename(), and FSAL_unlink().
.SS "fsal_accessmode_t unix2fsal_mode (mode_t unix_mode)"
.PP
unix2fsal_mode: Convert posix mode to FSAL mode.
.PP
\fBParameters:\fP
.RS 4
\fIunix_mode\fP (input): The posix mode to be translated.
.RE
.PP
\fBReturns:\fP
.RS 4
The FSAL mode associated to unix_mode. 
.RE
.PP

.PP
Definition at line 296 of file fsal_convert.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for File System Abstraction Layer (POSIX) library from the source code.
