<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="LRU__List_8c" kind="file">
    <compoundname>LRU_List.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="yes">BuddyMalloc.h</includes>
    <includes local="yes">LRU_List.h</includes>
    <includes local="yes">stuff_alloc.h</includes>
    <includes local="yes">log_macros.h</includes>
    <incdepgraph>
      <node id="3">
        <label>LRU_List.h</label>
      </node>
      <node id="5">
        <label>log_macros.h</label>
      </node>
      <node id="1">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>BuddyMalloc.h</label>
      </node>
      <node id="0">
        <label>LRU_List.c</label>
        <link refid="LRU_List.c"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stuff_alloc.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__LRUExportedFunctions_1ga5c11aa9a651e67795871ff66d540c86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LRU_list_t *</type>
        <definition>LRU_list_t* LRU_Init</definition>
        <argsstring>(LRU_parameter_t lru_param, LRU_status_t *pstatus)</argsstring>
        <name>LRU_Init</name>
        <param>
          <type>LRU_parameter_t</type>
          <declname>lru_param</declname>
        </param>
        <param>
          <type>LRU_status_t *</type>
          <declname>pstatus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LRU_Init: Init the LRU list.</para><para>Init the Hash Table .</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lru_param</parametername>
</parameternamelist>
<parameterdescription>
<para>A structure of type lru_parameter_t which contains the values used to init the LRU. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pstatus</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an integer to contain the status for the operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if init failed, the pointeur to the hashtable otherwise.</para></simplesect>
<simplesect kind="see"><para>PreAllocEntry </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/LRU/LRU_List.c" line="127" bodyfile="/export/GANESHA/src/LRU/LRU_List.c" bodystart="126" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="group__LRUExportedFunctions_1ga1ae86980b1af3955da609b1be7e2a059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int LRU_invalidate</definition>
        <argsstring>(LRU_list_t *plru, LRU_entry_t *pentry)</argsstring>
        <name>LRU_invalidate</name>
        <param>
          <type>LRU_list_t *</type>
          <declname>plru</declname>
        </param>
        <param>
          <type>LRU_entry_t *</type>
          <declname>pentry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LRU_invalidate: Tag an entry as invalid.</para><para>Tag an entry as invalid, this kind of entry will be put off the LRU (and sent back to the pool) when a garbagge collection will be performed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plru</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list to be managed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pentry</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the entry to be tagged.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LRU_LIST_SUCCESS if successfull, other values show an error.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__LRUExportedFunctions_1gaeaff4bce3efdf4087b96ba83912388bd" kindref="member">LRU_gc_invalid</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/LRU/LRU_List.c" line="182" bodyfile="/export/GANESHA/src/LRU/LRU_List.c" bodystart="181" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="group__LRUExportedFunctions_1gac3cdaf55a44b7b59956d18e4f842e313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LRU_entry_t *</type>
        <definition>LRU_entry_t* LRU_new_entry</definition>
        <argsstring>(LRU_list_t *plru, LRU_status_t *pstatus)</argsstring>
        <name>LRU_new_entry</name>
        <param>
          <type>LRU_list_t *</type>
          <declname>plru</declname>
        </param>
        <param>
          <type>LRU_status_t *</type>
          <declname>pstatus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LRU_new_entry : acquire a new entry from the pool.</para><para>acquire a new entry from the pool. If pool is empty, a new chunck is added to complete the operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plru</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list to be managed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pstatus</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an integer to contain the status for the operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if init failed, the pointeur to the hashtable otherwise.</para></simplesect>
<simplesect kind="see"><para>PreAllocEntry </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/LRU/LRU_List.c" line="206" bodyfile="/export/GANESHA/src/LRU/LRU_List.c" bodystart="205" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="group__LRUExportedFunctions_1gaeaff4bce3efdf4087b96ba83912388bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int LRU_gc_invalid</definition>
        <argsstring>(LRU_list_t *plru, void *cleanparam)</argsstring>
        <name>LRU_gc_invalid</name>
        <param>
          <type>LRU_list_t *</type>
          <declname>plru</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cleanparam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LRU_gc_invalid : garbagge collection for invalid entries.</para><para>Read the whole LRU list and put the invalid entries back to the pool.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plru</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list to be managed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer to contain the status for the operation.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__LRUExportedFunctions_1ga1ae86980b1af3955da609b1be7e2a059" kindref="member">LRU_invalidate</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/LRU/LRU_List.c" line="263" bodyfile="/export/GANESHA/src/LRU/LRU_List.c" bodystart="262" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="group__LRUExportedFunctions_1ga7dd2fad27347334adf7270b46fdd2d19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int LRU_invalidate_by_function</definition>
        <argsstring>(LRU_list_t *plru, int(*testfunc)(LRU_entry_t *, void *addparam), void *addparam)</argsstring>
        <name>LRU_invalidate_by_function</name>
        <param>
          <type>LRU_list_t *</type>
          <declname>plru</declname>
        </param>
        <param>
          <type>int(*)(LRU_entry_t *, void *addparam)</type>
          <declname>testfunc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>addparam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LRU_invalidate_by_function: Browse the lru to test if entries should ne invalidated.</para><para>Browse the lru to test if entries should ne invalidated. This function is used for garbagge collection</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plru</parametername>
</parameternamelist>
<parameterdescription>
<para>[INOUT] LRU list to be managed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>testfunc</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] function used to identify an entry to be tagged invalid. This function returns TRUE if entry will be tagged invalid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addparam</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] parameter for the input function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LRU_LIST_SUCCESS if ok, other values shows an error</para></simplesect>
<simplesect kind="see"><para><ref refid="group__LRUExportedFunctions_1ga1ae86980b1af3955da609b1be7e2a059" kindref="member">LRU_invalidate</ref> </para><simplesectsep/><para><ref refid="group__LRUExportedFunctions_1gaeaff4bce3efdf4087b96ba83912388bd" kindref="member">LRU_gc_invalid</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/LRU/LRU_List.c" line="338" bodyfile="/export/GANESHA/src/LRU/LRU_List.c" bodystart="335" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="group__LRUExportedFunctions_1gaafa384e13ee10b82ae4700b40141a332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int LRU_apply_function</definition>
        <argsstring>(LRU_list_t *plru, int(*myfunc)(LRU_entry_t *, void *addparam), void *addparam)</argsstring>
        <name>LRU_apply_function</name>
        <param>
          <type>LRU_list_t *</type>
          <declname>plru</declname>
        </param>
        <param>
          <type>int(*)(LRU_entry_t *, void *addparam)</type>
          <declname>myfunc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>addparam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LRU_apply_function: apply the same function to every LRU entry, but do not change their states.</para><para>apply the same function to every LRU entry, but do not change their states.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plru</parametername>
</parameternamelist>
<parameterdescription>
<para>[INOUT] LRU list to be managed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>myfunc</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] function used to be runned on every entry. If this function return FALSE, the loop stops. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addparam</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] parameter for the input function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LRU_LIST_SUCCESS if ok, other values shows an error</para></simplesect>
<simplesect kind="see"><para><ref refid="group__LRUExportedFunctions_1ga1ae86980b1af3955da609b1be7e2a059" kindref="member">LRU_invalidate</ref> </para><simplesectsep/><para><ref refid="group__LRUExportedFunctions_1gaeaff4bce3efdf4087b96ba83912388bd" kindref="member">LRU_gc_invalid</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/LRU/LRU_List.c" line="394" bodyfile="/export/GANESHA/src/LRU/LRU_List.c" bodystart="392" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="group__LRUExportedFunctions_1gaab0cf057112f447b98e47151ff834220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LRU_Print</definition>
        <argsstring>(LRU_list_t *plru)</argsstring>
        <name>LRU_Print</name>
        <param>
          <type>LRU_list_t *</type>
          <declname>plru</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HashTable_Log: Print information about the LRU (mostly for debugging purpose).</para><para>Print information about the LRU (mostly for debugging purpose).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plru</parametername>
</parameternamelist>
<parameterdescription>
<para>the LRU to be used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none (returns void). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/LRU/LRU_List.c" line="440" bodyfile="/export/GANESHA/src/LRU/LRU_List.c" bodystart="439" bodyend="450"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Management of the thread safe LRU lists. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para></para></simplesect>
<simplesect kind="rcs"><title>Author</title><para>deniel </para></simplesect>
<simplesect kind="date"><para></para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2006/01/31 09:51:13 </para></simplesect>
<simplesect kind="version"><para></para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>1.20 </para></simplesect>
<ref refid="LRU__List_8c" kindref="compound">LRU_List.c</ref> :Management of the thread safe LRU lists.</para><para><simplesect kind="rcs"><title>Header</title><para>/cea/home/cvs/cvs/SHERPA/BaseCvs/GANESHA/src/LRU/LRU_List.c,v 1.20 2006/01/31 09:51:13 deniel Exp </para></simplesect>
</para><para><simplesect kind="rcs"><title>Log</title><para><ref refid="LRU__List_8c" kindref="compound">LRU_List.c</ref>,v </para></simplesect>
Revision 1.20 2006/01/31 09:51:13 deniel Fixed LRU prev bug</para><para>Revision 1.19 2006/01/24 08:57:34 leibovic Fixing LRU allocation bug.</para><para>Revision 1.17 2005/11/10 07:53:24 deniel Corrected some memory leaks</para><para>Revision 1.16 2005/08/12 07:11:14 deniel Corrected cache_inode_readdir semantics</para><para>Revision 1.15 2005/07/28 08:25:10 deniel Adding different ifdef statemement for additional debugging</para><para>Revision 1.14 2005/05/11 15:30:43 deniel Added paramter extended options to LRU for invalid entries gc</para><para>Revision 1.13 2005/05/10 11:44:02 deniel Datacache and metadatacache are noewqw bounded</para><para>Revision 1.12 2005/02/18 09:35:51 deniel Garbagge collection is ok for file (directory gc is not yet implemented)</para><para>Revision 1.11 2004/11/23 16:45:00 deniel Plenty of bugs corrected</para><para>Revision 1.10 2004/11/22 07:49:30 deniel Adding LRU_invalidate_by_function</para><para>Revision 1.9 2004/10/19 08:41:08 deniel Lots of memory leaks fixed</para><para>Revision 1.8 2004/10/18 08:42:43 deniel Modifying prototypes for LRU_new_entry</para><para>Revision 1.7 2004/10/13 13:01:37 deniel Now using the stuff allocator</para><para>Revision 1.6 2004/10/04 12:51:49 deniel Bad prototypes changed</para><para>Revision 1.5 2004/09/23 08:19:25 deniel Doxygenisation des sources</para><para>Revision 1.4 2004/09/22 08:33:43 deniel Utilisation de preallocation dans LRU</para><para>Revision 1.3 2004/09/21 12:21:04 deniel Differentiation des differents tests configurables Premiere version clean</para><para>Revision 1.2 2004/09/20 15:36:18 deniel Premiere implementation, sans prealloc </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>vim:expandtab:shiftwidth=8:tabstop=8:</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>CEA/DAM/DIF<sp/><sp/>(2008)</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>contributeur<sp/>:<sp/>Philippe<sp/>DENIEL<sp/><sp/><sp/>philippe.deniel@cea.fr</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thomas<sp/>LEIBOVICI<sp/><sp/>thomas.leibovici@cea.fr</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>---------------------------------------</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;BuddyMalloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LRU_List.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stuff_alloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;log_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------<sp/>This<sp/>group<sp/>contains<sp/>all<sp/>the<sp/>functions<sp/>used<sp/>to<sp/>manipulate<sp/>the<sp/>LRU<sp/>from<sp/>outside<sp/>this<sp/>module<sp/>-----<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="group__LRUExportedFunctions_1ga5c11aa9a651e67795871ff66d540c86e" refkind="member"><highlight class="normal">LRU_list_t<sp/>*<ref refid="group__LRUExportedFunctions_1ga5c11aa9a651e67795871ff66d540c86e" kindref="member">LRU_Init</ref>(LRU_parameter_t<sp/>lru_param,<sp/>LRU_status_t<sp/>*<sp/>pstatus)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>LRU_list_t<sp/>*plru<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((plru<sp/>=<sp/>(LRU_list_t<sp/>*)<sp/>Mem_Alloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(LRU_list_t)))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pstatus<sp/>=<sp/>LRU_LIST_MALLOC_ERROR;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>plru-&gt;nb_entry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>plru-&gt;nb_invalid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>plru-&gt;nb_call_gc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>plru-&gt;MRU<sp/>=<sp/>plru-&gt;LRU<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>plru-&gt;parameter<sp/>=<sp/>lru_param;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>BuddySetDebugLabel(</highlight><highlight class="stringliteral">&quot;LRU_entry_t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_NO_BLOCK_PREALLOC</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pre<sp/>allocate<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>STUFF_PREALLOC(plru-&gt;entry_prealloc,<sp/>lru_param.nb_entry_prealloc,<sp/>LRU_entry_t,<sp/>next);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru-&gt;entry_prealloc<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pstatus<sp/>=<sp/>LRU_LIST_MALLOC_ERROR;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>BuddySetDebugLabel(</highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>*pstatus<sp/>=<sp/>LRU_LIST_SUCCESS;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>plru;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LRU_Init<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="group__LRUExportedFunctions_1ga1ae86980b1af3955da609b1be7e2a059" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__LRUExportedFunctions_1ga1ae86980b1af3955da609b1be7e2a059" kindref="member">LRU_invalidate</ref>(LRU_list_t<sp/>*<sp/>plru,<sp/>LRU_entry_t<sp/>*<sp/>pentry)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pentry-&gt;valid_state<sp/>!=<sp/>LRU_ENTRY_INVALID)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pentry-&gt;valid_state<sp/>=<sp/>LRU_ENTRY_INVALID;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>plru-&gt;nb_invalid<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_SUCCESS;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LRU_invalidate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="group__LRUExportedFunctions_1gac3cdaf55a44b7b59956d18e4f842e313" refkind="member"><highlight class="normal">LRU_entry_t<sp/>*<ref refid="group__LRUExportedFunctions_1gac3cdaf55a44b7b59956d18e4f842e313" kindref="member">LRU_new_entry</ref>(LRU_list_t<sp/>*<sp/>plru,<sp/>LRU_status_t<sp/>*<sp/>pstatus)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>LRU_entry_t<sp/>*new_entry<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>LogDebug(COMPONENT_LRU,<sp/></highlight><highlight class="stringliteral">&quot;==&gt;<sp/>LRU_new_entry:<sp/>nb_entry<sp/>=<sp/>%d<sp/>nb_entry_prealloc<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>plru-&gt;nb_entry,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plru-&gt;parameter.nb_entry_prealloc);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>BuddySetDebugLabel(</highlight><highlight class="stringliteral">&quot;LRU_entry_t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>GET_PREALLOC(new_entry,<sp/>plru-&gt;entry_prealloc,<sp/>plru-&gt;parameter.nb_entry_prealloc,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LRU_entry_t,<sp/>next);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_entry<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pstatus<sp/>=<sp/>LRU_LIST_MALLOC_ERROR;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>BuddySetDebugLabel(</highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>new_entry-&gt;valid_state<sp/>=<sp/>LRU_ENTRY_VALID;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>new_entry-&gt;next<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Entry<sp/>is<sp/>added<sp/>as<sp/>the<sp/>MRU<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru-&gt;MRU<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_entry-&gt;prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>plru-&gt;LRU<sp/>=<sp/>new_entry;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_entry-&gt;prev<sp/>=<sp/>plru-&gt;MRU;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>plru-&gt;MRU-&gt;next<sp/>=<sp/>new_entry;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>plru-&gt;nb_entry<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>plru-&gt;nb_call_gc<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>plru-&gt;MRU<sp/>=<sp/>new_entry;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>*pstatus<sp/>=<sp/>LRU_LIST_SUCCESS;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_entry;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LRU_new_entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="group__LRUExportedFunctions_1gaeaff4bce3efdf4087b96ba83912388bd" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__LRUExportedFunctions_1gaeaff4bce3efdf4087b96ba83912388bd" kindref="member">LRU_gc_invalid</ref>(LRU_list_t<sp/>*<sp/>plru,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cleanparam)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>LRU_entry_t<sp/>*pentry<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>LRU_entry_t<sp/>*pentrynext<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_EMPTY_LIST;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru-&gt;nb_invalid<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_SUCCESS;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nothing<sp/>to<sp/>be<sp/>done<sp/>in<sp/>this<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru-&gt;MRU<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_EMPTY_LIST;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru-&gt;MRU-&gt;prev<sp/>==<sp/>NULL)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>One<sp/>entry<sp/>only,<sp/>returns<sp/>success<sp/>(the<sp/>MRU<sp/>cannot<sp/>be<sp/>invalid)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_SUCCESS;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>nothing<sp/>if<sp/>not<sp/>enough<sp/>calls<sp/>were<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru-&gt;nb_call_gc<sp/>&lt;<sp/>plru-&gt;parameter.nb_call_gc_invalid)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_SUCCESS;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>From<sp/>the<sp/>LRU<sp/>to<sp/>the<sp/>entry<sp/>BEFORE<sp/>the<sp/>MRU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>LRU_LIST_SUCCESS;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(pentry<sp/>=<sp/>plru-&gt;LRU;<sp/>pentry<sp/>!=<sp/>plru-&gt;MRU;<sp/>pentry<sp/>=<sp/>pentrynext)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pentrynext<sp/>=<sp/>pentry-&gt;next;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pentry-&gt;valid_state<sp/>==<sp/>LRU_ENTRY_INVALID)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru-&gt;parameter.clean_entry(pentry,<sp/>cleanparam)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogDebug(COMPONENT_LRU,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>cleaning<sp/>pentry<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>pentry);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>LRU_LIST_BAD_RELEASE_ENTRY;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pentry-&gt;prev<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pentry-&gt;prev-&gt;next<sp/>=<sp/>pentry-&gt;next;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plru-&gt;LRU<sp/>=<sp/>pentry-&gt;next;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pentry-&gt;next<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pentry-&gt;next-&gt;prev<sp/>=<sp/>pentry-&gt;prev;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogDebug(COMPONENT_LRU,<sp/></highlight><highlight class="stringliteral">&quot;SHOULD<sp/>Never<sp/>appear<sp/><sp/>!!!!<sp/>line<sp/>%d<sp/>file<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>__LINE__,<sp/>__FILE__);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plru-&gt;nb_entry<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plru-&gt;nb_invalid<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Put<sp/>it<sp/>back<sp/>to<sp/>pre-allocated<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_PREALLOC(pentry,<sp/>plru-&gt;entry_prealloc,<sp/>next);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LRU_gc_invalid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="group__LRUExportedFunctions_1ga7dd2fad27347334adf7270b46fdd2d19" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__LRUExportedFunctions_1ga7dd2fad27347334adf7270b46fdd2d19" kindref="member">LRU_invalidate_by_function</ref>(LRU_list_t<sp/>*<sp/>plru,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*testfunc)<sp/>(LRU_entry_t<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addparam),</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addparam)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>LRU_entry_t<sp/>*pentry<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>LRU_entry_t<sp/>*pentry_next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_EMPTY_LIST;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru-&gt;nb_entry<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_SUCCESS;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nothing<sp/>to<sp/>be<sp/>done<sp/>in<sp/>this<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru-&gt;MRU<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_EMPTY_LIST;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru-&gt;MRU-&gt;prev<sp/>==<sp/>NULL)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>One<sp/>entry<sp/>only,<sp/>returns<sp/>success<sp/>(the<sp/>MRU<sp/>cannot<sp/>be<sp/>set<sp/>invalid)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_SUCCESS;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>From<sp/>the<sp/>LRU<sp/>to<sp/>the<sp/>entry<sp/>BEFORE<sp/>the<sp/>MRU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>LRU_LIST_SUCCESS;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(pentry<sp/>=<sp/>plru-&gt;LRU;<sp/>pentry<sp/>!=<sp/>plru-&gt;MRU;<sp/>pentry<sp/>=<sp/>pentry_next)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pentry_next<sp/>=<sp/>pentry-&gt;next;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pentry-&gt;valid_state<sp/>!=<sp/>LRU_ENTRY_INVALID)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>test<sp/>function<sp/>on<sp/>the<sp/>entry<sp/>to<sp/>know<sp/>if<sp/>it<sp/>should<sp/>be<sp/>set<sp/>invalid<sp/>or<sp/>not<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(testfunc(pentry,<sp/>addparam)<sp/>==<sp/>LRU_LIST_SET_INVALID)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((rc<sp/>=<sp/><ref refid="group__LRUExportedFunctions_1ga1ae86980b1af3955da609b1be7e2a059" kindref="member">LRU_invalidate</ref>(plru,<sp/>pentry))<sp/>!=<sp/>LRU_LIST_SUCCESS)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>loop,<sp/>error<sp/>will<sp/>be<sp/>returned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LRU_invalidate_by_function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="group__LRUExportedFunctions_1gaafa384e13ee10b82ae4700b40141a332" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__LRUExportedFunctions_1gaafa384e13ee10b82ae4700b40141a332" kindref="member">LRU_apply_function</ref>(LRU_list_t<sp/>*<sp/>plru,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*myfunc)<sp/>(LRU_entry_t<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addparam),</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addparam)</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>LRU_entry_t<sp/>*pentry<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_EMPTY_LIST;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru-&gt;nb_entry<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_SUCCESS;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nothing<sp/>to<sp/>be<sp/>done<sp/>in<sp/>this<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru-&gt;MRU<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_EMPTY_LIST;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plru-&gt;MRU-&gt;prev<sp/>==<sp/>NULL)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>One<sp/>entry<sp/>only,<sp/>returns<sp/>success<sp/>(the<sp/>MRU<sp/>cannot<sp/>be<sp/>set<sp/>invalid)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LRU_LIST_SUCCESS;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>From<sp/>the<sp/>LRU<sp/>to<sp/>the<sp/>entry<sp/>BEFORE<sp/>the<sp/>MRU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>LRU_LIST_SUCCESS;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(pentry<sp/>=<sp/>plru-&gt;MRU-&gt;prev;<sp/>pentry<sp/>!=<sp/>NULL;<sp/>pentry<sp/>=<sp/>pentry-&gt;prev)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pentry-&gt;valid_state<sp/>!=<sp/>LRU_ENTRY_INVALID)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>test<sp/>function<sp/>on<sp/>the<sp/>entry<sp/>to<sp/>know<sp/>if<sp/>it<sp/>should<sp/>be<sp/>set<sp/>invalid<sp/>or<sp/>not<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(myfunc(pentry,<sp/>addparam)<sp/>==<sp/>FALSE)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LRU_apply_function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="group__LRUExportedFunctions_1gaab0cf057112f447b98e47151ff834220" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LRUExportedFunctions_1gaab0cf057112f447b98e47151ff834220" kindref="member">LRU_Print</ref>(LRU_list_t<sp/>*<sp/>plru)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>LRU_entry_t<sp/>*pentry<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dispdata[LRU_DISPLAY_STRLEN];</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(pentry<sp/>=<sp/>plru-&gt;LRU;<sp/>pentry<sp/>!=<sp/>NULL;<sp/>pentry<sp/>=<sp/>pentry-&gt;next)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>plru-&gt;parameter.entry_to_str(pentry-&gt;buffdata,<sp/>dispdata);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LogFullDebug(COMPONENT_LRU,<sp/></highlight><highlight class="stringliteral">&quot;Entry<sp/>value<sp/>=<sp/>%s,<sp/>valid_state<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>dispdata,<sp/>pentry-&gt;valid_state);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>LogFullDebug(COMPONENT_LRU,<sp/></highlight><highlight class="stringliteral">&quot;-----------------------------------------\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LRU_Print<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/export/GANESHA/src/LRU/LRU_List.c"/>
  </compounddef>
</doxygen>
