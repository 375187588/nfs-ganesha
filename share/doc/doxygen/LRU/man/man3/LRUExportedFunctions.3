.TH "LRUExportedFunctions" 3 "15 Sep 2010" "Version 0.1" "LRu List Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LRUExportedFunctions \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "LRU_list_t * \fBLRU_Init\fP (LRU_parameter_t lru_param, LRU_status_t *pstatus)"
.br
.ti -1c
.RI "int \fBLRU_invalidate\fP (LRU_list_t *plru, LRU_entry_t *pentry)"
.br
.ti -1c
.RI "LRU_entry_t * \fBLRU_new_entry\fP (LRU_list_t *plru, LRU_status_t *pstatus)"
.br
.ti -1c
.RI "int \fBLRU_gc_invalid\fP (LRU_list_t *plru, void *cleanparam)"
.br
.ti -1c
.RI "int \fBLRU_invalidate_by_function\fP (LRU_list_t *plru, int(*testfunc)(LRU_entry_t *, void *addparam), void *addparam)"
.br
.ti -1c
.RI "int \fBLRU_apply_function\fP (LRU_list_t *plru, int(*myfunc)(LRU_entry_t *, void *addparam), void *addparam)"
.br
.ti -1c
.RI "void \fBLRU_Print\fP (LRU_list_t *plru)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int LRU_apply_function (LRU_list_t * plru, int(*)(LRU_entry_t *, void *addparam) myfunc, void * addparam)"LRU_apply_function: apply the same function to every LRU entry, but do not change their states.
.PP
apply the same function to every LRU entry, but do not change their states.
.PP
\fBParameters:\fP
.RS 4
\fIplru\fP [INOUT] LRU list to be managed. 
.br
\fImyfunc\fP [IN] function used to be runned on every entry. If this function return FALSE, the loop stops. 
.br
\fIaddparam\fP [IN] parameter for the input function.
.RE
.PP
\fBReturns:\fP
.RS 4
LRU_LIST_SUCCESS if ok, other values shows an error
.RE
.PP
\fBSee also:\fP
.RS 4
\fBLRU_invalidate\fP 
.PP
\fBLRU_gc_invalid\fP 
.RE
.PP

.PP
Definition at line 392 of file LRU_List.c.
.SS "int LRU_gc_invalid (LRU_list_t * plru, void * cleanparam)"LRU_gc_invalid : garbagge collection for invalid entries.
.PP
Read the whole LRU list and put the invalid entries back to the pool.
.PP
\fBParameters:\fP
.RS 4
\fIplru\fP Pointer to the list to be managed. 
.RE
.PP
\fBReturns:\fP
.RS 4
An integer to contain the status for the operation.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBLRU_invalidate\fP 
.RE
.PP

.PP
Definition at line 262 of file LRU_List.c.
.SS "LRU_list_t* LRU_Init (LRU_parameter_t lru_param, LRU_status_t * pstatus)"LRU_Init: Init the LRU list.
.PP
Init the Hash Table .
.PP
\fBParameters:\fP
.RS 4
\fIlru_param\fP A structure of type lru_parameter_t which contains the values used to init the LRU. 
.br
\fIpstatus\fP Pointer to an integer to contain the status for the operation.
.RE
.PP
\fBReturns:\fP
.RS 4
NULL if init failed, the pointeur to the hashtable otherwise.
.RE
.PP
\fBSee also:\fP
.RS 4
PreAllocEntry 
.RE
.PP

.PP
Definition at line 126 of file LRU_List.c.
.SS "int LRU_invalidate (LRU_list_t * plru, LRU_entry_t * pentry)"LRU_invalidate: Tag an entry as invalid.
.PP
Tag an entry as invalid, this kind of entry will be put off the LRU (and sent back to the pool) when a garbagge collection will be performed.
.PP
\fBParameters:\fP
.RS 4
\fIplru\fP Pointer to the list to be managed. 
.br
\fIpentry\fP Pointer to the entry to be tagged.
.RE
.PP
\fBReturns:\fP
.RS 4
LRU_LIST_SUCCESS if successfull, other values show an error.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBLRU_gc_invalid\fP 
.RE
.PP

.PP
Definition at line 181 of file LRU_List.c.
.SS "int LRU_invalidate_by_function (LRU_list_t * plru, int(*)(LRU_entry_t *, void *addparam) testfunc, void * addparam)"LRU_invalidate_by_function: Browse the lru to test if entries should ne invalidated.
.PP
Browse the lru to test if entries should ne invalidated. This function is used for garbagge collection
.PP
\fBParameters:\fP
.RS 4
\fIplru\fP [INOUT] LRU list to be managed. 
.br
\fItestfunc\fP [IN] function used to identify an entry to be tagged invalid. This function returns TRUE if entry will be tagged invalid 
.br
\fIaddparam\fP [IN] parameter for the input function.
.RE
.PP
\fBReturns:\fP
.RS 4
LRU_LIST_SUCCESS if ok, other values shows an error
.RE
.PP
\fBSee also:\fP
.RS 4
\fBLRU_invalidate\fP 
.PP
\fBLRU_gc_invalid\fP 
.RE
.PP

.PP
Definition at line 335 of file LRU_List.c.
.SS "LRU_entry_t* LRU_new_entry (LRU_list_t * plru, LRU_status_t * pstatus)"LRU_new_entry : acquire a new entry from the pool.
.PP
acquire a new entry from the pool. If pool is empty, a new chunck is added to complete the operation.
.PP
\fBParameters:\fP
.RS 4
\fIplru\fP Pointer to the list to be managed. 
.br
\fIpstatus\fP Pointer to an integer to contain the status for the operation.
.RE
.PP
\fBReturns:\fP
.RS 4
NULL if init failed, the pointeur to the hashtable otherwise.
.RE
.PP
\fBSee also:\fP
.RS 4
PreAllocEntry 
.RE
.PP

.PP
Definition at line 205 of file LRU_List.c.
.SS "void LRU_Print (LRU_list_t * plru)"HashTable_Log: Print information about the LRU (mostly for debugging purpose).
.PP
Print information about the LRU (mostly for debugging purpose).
.PP
\fBParameters:\fP
.RS 4
\fIplru\fP the LRU to be used.
.RE
.PP
\fBReturns:\fP
.RS 4
none (returns void). 
.RE
.PP

.PP
Definition at line 439 of file LRU_List.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for LRu List Library from the source code.
