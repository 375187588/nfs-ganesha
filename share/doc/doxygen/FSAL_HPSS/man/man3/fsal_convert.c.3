.TH "fsal_convert.c" 3 "31 Mar 2009" "Version 0.2" "File System Abstraction Layer (HPSS) library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
fsal_convert.c \- HPSS-FSAL type translation functions.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include 'fsal_convert.h'\fP
.br
\fC#include 'fsal_internal.h'\fP
.br
\fC#include <sys/types.h>\fP
.br
\fC#include <errno.h>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMAX_2\fP(x, y)   ( (x) > (y) ? (x) : (y) )"
.br
.ti -1c
.RI "#define \fBMAX_3\fP(x, y, z)   ( (x) > (y) ? MAX_2((x),(z)) : MAX_2((y),(z)) )"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBhpss2fsal_error\fP (int hpss_errorcode)"
.br
.ti -1c
.RI "int \fBfsal2hpss_testperm\fP (fsal_accessflags_t testperm)"
.br
.ti -1c
.RI "int \fBfsal2hpss_openflags\fP (fsal_openflags_t fsal_flags, int *p_hpss_flags)"
.br
.ti -1c
.RI "mode_t \fBfsal2unix_mode\fP (fsal_accessmode_t fsal_mode)"
.br
.ti -1c
.RI "fsal_accessmode_t \fBunix2fsal_mode\fP (mode_t unix_mode)"
.br
.ti -1c
.RI "fsal_nodetype_t \fBhpss2fsal_type\fP (unsigned32 hpss_type_in)"
.br
.ti -1c
.RI "fsal_time_t \fBhpss2fsal_time\fP (timestamp_sec_t tsec)"
.br
.ti -1c
.RI "fsal_u64_t \fBhpss2fsal_64\fP (u_signed64 hpss_size_in)"
.br
.ti -1c
.RI "u_signed64 \fBfsal2hpss_64\fP (fsal_u64_t fsal_size_in)"
.br
.ti -1c
.RI "fsal_fsid_t \fBhpss2fsal_fsid\fP (u_signed64 hpss_fsid_in)"
.br
.ti -1c
.RI "fsal_accessmode_t \fBhpss2fsal_mode\fP (unsigned32 uid_bit, unsigned32 gid_bit, unsigned32 sticky_bit, unsigned32 user_perms, unsigned32 group_perms, unsigned32 other_perms)"
.br
.ti -1c
.RI "void \fBfsal2hpss_mode\fP (fsal_accessmode_t fsal_mode, unsigned32 *uid_bit, unsigned32 *gid_bit, unsigned32 *sticky_bit, unsigned32 *user_perms, unsigned32 *group_perms, unsigned32 *other_perms)"
.br
.ti -1c
.RI "fsal_status_t \fBhpss2fsal_attributes\fP (ns_ObjHandle_t *p_hpss_handle_in, hpss_Attrs_t *p_hpss_attr_in, fsal_attrib_list_t *p_fsalattr_out)"
.br
.ti -1c
.RI "fsal_status_t \fBhpssHandle2fsalAttributes\fP (ns_ObjHandle_t *p_hpsshandle_in, fsal_attrib_list_t *p_fsalattr_out)"
.br
.ti -1c
.RI "fsal_status_t \fBfsal2hpss_attribset\fP (fsal_handle_t *p_fsal_handle, fsal_attrib_list_t *p_attrib_set, hpss_fileattrbits_t *p_hpss_attrmask, hpss_Attrs_t *p_hpss_attrs)"
.br
.in -1c
.SH "Detailed Description"
.PP 
HPSS-FSAL type translation functions. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
leibovic 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2006/02/08 12:46:59 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.32 
.RE
.PP

.PP
Definition in file \fBfsal_convert.c\fP.
.SH "Function Documentation"
.PP 
.SS "u_signed64 fsal2hpss_64 (fsal_u64_t fsal_size_in)"
.PP
fsal2hpss_64: Convert fsal_u64_t type to HPSS u_signed64 type.
.PP
\fBParameters:\fP
.RS 4
\fIfsal_size_in\fP (input): The FSAL 64 bits number.
.RE
.PP
\fBReturns:\fP
.RS 4
- The HPSS 64 bits number. 
.RE
.PP

.PP
Definition at line 443 of file fsal_convert.c.
.PP
Referenced by fsal2hpss_attribset(), and FSAL_truncate().
.SS "fsal_status_t fsal2hpss_attribset (fsal_handle_t * p_fsal_handle, fsal_attrib_list_t * p_attrib_set, hpss_fileattrbits_t * p_hpss_attrmask, hpss_Attrs_t * p_hpss_attrs)"
.PP
fsal2hpss_attribset: Converts an fsal attrib list to a hpss attrib list and values to be used in Setattr.
.PP
\fBParameters:\fP
.RS 4
\fIp_fsal_handle\fP (input): Pointer to the FSAL object handle. 
.br
\fIp_attrib_set\fP (input): Pointer to the FSAL attributes to be set. 
.br
\fIp_hpss_attrmask\fP (output): Pointer to the HPSS attribute list associated to the FSAL asked_attributes. 
.br
\fIp_hpss_attrs\fP (output): Pointer to the HPSS attribute values associated to input attributes.
.RE
.PP
\fBReturns:\fP
.RS 4
Major error codes:
.IP "\(bu" 2
ERR_FSAL_NO_ERROR: no error.
.IP "\(bu" 2
ERR_FSAL_FAULT: NULL pointer passed as parameter.
.IP "\(bu" 2
ERR_FSAL_ATTRNOTSUPP: Some of the asked attributes are not supported.
.IP "\(bu" 2
ERR_FSAL_INVAL: Some of the asked attributes are read-only.
.IP "\(bu" 2
ERR_FSAL_SERVERFAULT: Unexpected error. 
.PP
.RE
.PP

.PP
\fBTodo\fP
.RS 4
: Define some constants for settable and supported attributes. 
.RE
.PP
.PP
\fBTodo\fP
.RS 4
ACL management 
.RE
.PP

.PP
Definition at line 919 of file fsal_convert.c.
.PP
References fsal2hpss_64(), and fsal2hpss_mode().
.PP
Referenced by FSAL_setattrs().
.SS "void fsal2hpss_mode (fsal_accessmode_t fsal_mode, unsigned32 * uid_bit, unsigned32 * gid_bit, unsigned32 * sticky_bit, unsigned32 * user_perms, unsigned32 * group_perms, unsigned32 * other_perms)"
.PP
fsal2hpss_mode: converts FSAL mode to HPSS mode.
.PP
\fBParameters:\fP
.RS 4
\fIfsal_mode\fP (input): The fsal mode to be translated. 
.br
\fIuid_bit\fP (output): The uid_bit field to be set in HPSS object attributes. 
.br
\fIgid_bit\fP (output): The gid_bit field to be set in HPSS object attributes. 
.br
\fIsticky_bit\fP (output): The sticky_bit field to be set in HPSS object attributes. 
.br
\fIuser_perms\fP (output): The user_perms field to be set in HPSS object attributes. 
.br
\fIgroup_perms\fP (output): The group_perms field to be set in HPSS object attributes. 
.br
\fIother_perms\fP (output): The other_perms field to be set in HPSS object attributes.
.RE
.PP
\fBReturns:\fP
.RS 4
Nothing. 
.RE
.PP

.PP
Definition at line 556 of file fsal_convert.c.
.PP
Referenced by fsal2hpss_attribset().
.SS "int fsal2hpss_openflags (fsal_openflags_t fsal_flags, int * p_hpss_flags)"
.PP
fsal2hpss_openflags: Convert FSAL open flags to (HPSS) Posix open flags.
.PP
\fBParameters:\fP
.RS 4
\fIfsal_flags\fP (input): The FSAL open flags to be translated. 
.br
\fIp_hpss_flags\fP (output): Pointer to the HPSS open flags.
.RE
.PP
\fBReturns:\fP
.RS 4
- ERR_FSAL_NO_ERROR (no error).
.IP "\(bu" 2
ERR_FSAL_FAULT (p_hpss_flags is a NULL pointer).
.IP "\(bu" 2
ERR_FSAL_INVAL (invalid or incompatible input flags). 
.PP
.RE
.PP

.PP
Definition at line 245 of file fsal_convert.c.
.PP
Referenced by FSAL_open().
.SS "int fsal2hpss_testperm (fsal_accessflags_t testperm)"
.PP
fsal2hpss_testperm: Convert FSAL permission flags to (HPSS) Posix permission flags.
.PP
\fBParameters:\fP
.RS 4
\fItestperm\fP (input): The FSAL permission flags to be tested.
.RE
.PP
\fBReturns:\fP
.RS 4
The HPSS permission flags to be tested. 
.RE
.PP

.PP
Definition at line 218 of file fsal_convert.c.
.PP
Referenced by FSAL_access().
.SS "mode_t fsal2unix_mode (fsal_accessmode_t fsal_mode)"
.PP
fsal2unix_mode: Convert FSAL mode to posix mode.
.PP
\fBParameters:\fP
.RS 4
\fIfsal_mode\fP (input): The FSAL mode to be translated.
.RE
.PP
\fBReturns:\fP
.RS 4
The posix mode associated to fsal_mode. 
.RE
.PP

.PP
Definition at line 304 of file fsal_convert.c.
.PP
Referenced by FSAL_create(), and FSAL_mkdir().
.SS "fsal_u64_t hpss2fsal_64 (u_signed64 hpss_size_in)"
.PP
hpss2fsal_64: Convert HPSS u_signed64 type to fsal_u64_t type.
.PP
\fBParameters:\fP
.RS 4
\fIhpss_size_in\fP (input): The HPSS 64 bits number.
.RE
.PP
\fBReturns:\fP
.RS 4
- The FSAL 64 bits number. 
.RE
.PP

.PP
Definition at line 424 of file fsal_convert.c.
.PP
Referenced by hpss2fsal_attributes().
.SS "fsal_status_t hpss2fsal_attributes (ns_ObjHandle_t * p_hpss_handle_in, hpss_Attrs_t * p_hpss_attr_in, fsal_attrib_list_t * p_fsalattr_out)"
.PP
hpss2fsal_attributes: Fills an FSAL attributes structure with the info provided by the hpss handle and the hpss attributes of an object.
.PP
\fBParameters:\fP
.RS 4
\fIp_hpss_handle_in\fP (input): Pointer to the HPSS NS object handle. 
.br
\fIp_hpss_attr_in\fP (input): Pointer to the HPSS attributes. 
.br
\fIp_fsalattr_out\fP (input/output): Pointer to the FSAL attributes. As input, it defines the attributes that the caller wants to retrieve (by positioning flags into this structure) and the output is built considering this input (it fills the structure according to the flags it contains). 
.br
\fIp_cred\fP (input) HPSS Credential.
.RE
.PP
\fBReturns:\fP
.RS 4
Major error codes:
.IP "\(bu" 2
ERR_FSAL_NO_ERROR: no error.
.IP "\(bu" 2
ERR_FSAL_FAULT: NULL pointer passed as input parameter.
.IP "\(bu" 2
ERR_FSAL_ATTRNOTSUPP: One of the asked attributes is not supported.
.IP "\(bu" 2
ERR_FSAL_SERVERFAULT: Unexpected error. 
.PP
.RE
.PP

.PP
\fBTodo\fP
.RS 4
: This doesn't convert ACLs for the moment. 
.RE
.PP

.PP
Definition at line 631 of file fsal_convert.c.
.PP
References hpss2fsal_64(), hpss2fsal_fsid(), hpss2fsal_mode(), hpss2fsal_time(), and hpss2fsal_type().
.PP
Referenced by FSAL_create(), FSAL_getattrs(), FSAL_lookup(), FSAL_lookupJunction(), FSAL_mkdir(), FSAL_open(), FSAL_readdir(), FSAL_setattrs(), and FSAL_symlink().
.SS "int hpss2fsal_error (int hpss_errorcode)"
.PP
hpss2fsal_error : Convert HPSS error codes to FSAL error codes.
.PP
\fBParameters:\fP
.RS 4
\fIhpss_errorcode\fP (input): The error code returned from HPSS.
.RE
.PP
\fBReturns:\fP
.RS 4
The FSAL error code associated to hpss_errorcode. 
.RE
.PP

.PP
\fBTodo\fP
.RS 4
: The EBADF error also happens when file is opened for reading, and we try writting in it. In this case, we return ERR_FSAL_NOT_OPENED, but it doesn't seems to be a correct error translation. 
.RE
.PP
.PP
\fBWarning:\fP
.RS 4
AIX returns EEXIST where BSD uses ENOTEMPTY; We want ENOTEMPTY to be interpreted anyway on AIX plateforms. Thus, we explicitely write its value (87). 
.RE
.PP

.PP
Definition at line 38 of file fsal_convert.c.
.PP
Referenced by FSAL_access(), FSAL_close(), FSAL_create(), FSAL_dynamic_fsinfo(), FSAL_getattrs(), FSAL_link(), FSAL_lookup(), FSAL_lookupJunction(), FSAL_mkdir(), FSAL_open(), FSAL_rcp(), FSAL_read(), FSAL_readdir(), FSAL_readlink(), FSAL_rename(), FSAL_setattrs(), FSAL_symlink(), FSAL_truncate(), FSAL_unlink(), and FSAL_write().
.SS "fsal_fsid_t hpss2fsal_fsid (u_signed64 hpss_fsid_in)"
.PP
hpss2fsal_fsid: Convert HPSS fsid type to FSAL fsid type.
.PP
\fBParameters:\fP
.RS 4
\fIhpss_fsid_in\fP (input): The HPSS fsid to be translated.
.RE
.PP
\fBReturns:\fP
.RS 4
- The FSAL fsid associated to hpss_fsid_in. 
.RE
.PP

.PP
Definition at line 463 of file fsal_convert.c.
.PP
Referenced by hpss2fsal_attributes().
.SS "fsal_accessmode_t hpss2fsal_mode (unsigned32 uid_bit, unsigned32 gid_bit, unsigned32 sticky_bit, unsigned32 user_perms, unsigned32 group_perms, unsigned32 other_perms)"
.PP
hpss2fsal_mode: Convert HPSS mode to FSAL mode.
.PP
\fBParameters:\fP
.RS 4
\fIuid_bit\fP (input): The uid_bit field from HPSS object attributes. 
.br
\fIgid_bit\fP (input): The gid_bit field from HPSS object attributes. 
.br
\fIsticky_bit\fP (input): The sticky_bit field from HPSS object attributes. 
.br
\fIuser_perms\fP (input): The user_perms field from HPSS object attributes. 
.br
\fIgroup_perms\fP (input): The group_perms field from HPSS object attributes. 
.br
\fIother_perms\fP (input): The other_perms field from HPSS object attributes.
.RE
.PP
\fBReturns:\fP
.RS 4
The FSAL mode associated to input parameters. 
.RE
.PP

.PP
Definition at line 496 of file fsal_convert.c.
.PP
Referenced by hpss2fsal_attributes().
.SS "fsal_time_t hpss2fsal_time (timestamp_sec_t tsec)"
.PP
hpss2fsal_time: Convert HPSS time structure (timestamp_sec_t) to FSAL time type (fsal_time_t). 
.PP
Definition at line 402 of file fsal_convert.c.
.PP
Referenced by hpss2fsal_attributes().
.SS "fsal_nodetype_t hpss2fsal_type (unsigned32 hpss_type_in)"
.PP
hpss2fsal_type: Convert HPSS NS object type to FSAL node type.
.PP
\fBParameters:\fP
.RS 4
\fIhpss_type_in\fP (input): The HPSS NS object type from NSObjHandle.Type.
.RE
.PP
\fBReturns:\fP
.RS 4
- The FSAL node type associated to hpss_type_in.
.IP "\(bu" 2
-1 if the input type is unknown. 
.PP
.RE
.PP

.PP
Definition at line 370 of file fsal_convert.c.
.PP
Referenced by FSAL_ExpandHandle(), FSAL_lookup(), FSAL_lookupJunction(), FSAL_readdir(), hpss2fsal_attributes(), and hpssHandle2fsalAttributes().
.SS "fsal_status_t hpssHandle2fsalAttributes (ns_ObjHandle_t * p_hpsshandle_in, fsal_attrib_list_t * p_fsalattr_out)"
.PP
hpssHandle2fsalAttributes: Fills an FSAL attributes structure with the info provided (only) by the hpss handle of an object.
.PP
\fBParameters:\fP
.RS 4
\fIp_hpsshandle_in\fP (input): Pointer to the HPSS NS object handle. 
.br
\fIp_fsalattr_out\fP (input/output): Pointer to the FSAL attributes. As input, it defines the attributes that the caller wants to retrieve (by positioning flags into this structure) and the output is built considering this input (it fills the structure according to the flags it contains).
.RE
.PP
\fBReturns:\fP
.RS 4
Major error codes:
.IP "\(bu" 2
ERR_FSAL_NO_ERROR: no error.
.IP "\(bu" 2
ERR_FSAL_FAULT: NULL pointer passed as input parameter.
.IP "\(bu" 2
ERR_FSAL_ATTRNOTSUPP: One of the asked attributes is not supported.
.IP "\(bu" 2
ERR_FSAL_SERVERFAULT: Unexpected error. 
.PP
.RE
.PP

.PP
Definition at line 848 of file fsal_convert.c.
.PP
References hpss2fsal_type().
.PP
Referenced by FSAL_readdir().
.SS "fsal_accessmode_t unix2fsal_mode (mode_t unix_mode)"
.PP
unix2fsal_mode: Convert posix mode to FSAL mode.
.PP
\fBParameters:\fP
.RS 4
\fIunix_mode\fP (input): The posix mode to be translated.
.RE
.PP
\fBReturns:\fP
.RS 4
The FSAL mode associated to unix_mode. 
.RE
.PP

.PP
Definition at line 336 of file fsal_convert.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for File System Abstraction Layer (HPSS) library from the source code.
