.TH "nfs_filehandle_mgmt.c" 3 "15 Sep 2010" "Version 0.1" "Support routines layer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nfs_filehandle_mgmt.c \- 
.PP
Some tools for managing the file handles.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <sys/types.h>\fP
.br
\fC#include <ctype.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <dirent.h>\fP
.br
\fC#include <netdb.h>\fP
.br
\fC#include <netinet/in.h>\fP
.br
\fC#include <arpa/inet.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <pthread.h>\fP
.br
\fC#include <fcntl.h>\fP
.br
\fC#include <sys/file.h>\fP
.br
\fC#include <pwd.h>\fP
.br
\fC#include <grp.h>\fP
.br
\fC#include <rpc/types.h>\fP
.br
\fC#include <rpc/rpc.h>\fP
.br
\fC#include <rpc/auth.h>\fP
.br
\fC#include <rpc/pmap_clnt.h>\fP
.br
\fC#include 'log_macros.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include 'nfs_core.h'\fP
.br
\fC#include 'nfs23.h'\fP
.br
\fC#include 'nfs4.h'\fP
.br
\fC#include 'fsal.h'\fP
.br
\fC#include 'nfs_tools.h'\fP
.br
\fC#include 'nfs_exports.h'\fP
.br
\fC#include 'nfs_file_handle.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBnfs4_FhandleToFSAL\fP (nfs_fh4 *pfh4, fsal_handle_t *pfsalhandle, fsal_op_context_t *pcontext)"
.br
.ti -1c
.RI "int \fBnfs3_FhandleToFSAL\fP (nfs_fh3 *pfh3, fsal_handle_t *pfsalhandle, fsal_op_context_t *pcontext)"
.br
.ti -1c
.RI "int \fBnfs2_FhandleToFSAL\fP (fhandle2 *pfh2, fsal_handle_t *pfsalhandle, fsal_op_context_t *pcontext)"
.br
.ti -1c
.RI "int \fBnfs4_FSALToFhandle\fP (nfs_fh4 *pfh4, fsal_handle_t *pfsalhandle, compound_data_t *data)"
.br
.ti -1c
.RI "int \fBnfs3_FSALToFhandle\fP (nfs_fh3 *pfh3, fsal_handle_t *pfsalhandle, exportlist_t *pexport)"
.br
.ti -1c
.RI "int \fBnfs2_FSALToFhandle\fP (fhandle2 *pfh2, fsal_handle_t *pfsalhandle, exportlist_t *pexport)"
.br
.ti -1c
.RI "short \fBnfs4_FhandleToExportId\fP (nfs_fh4 *pfh4)"
.br
.ti -1c
.RI "short \fBnfs3_FhandleToExportId\fP (nfs_fh3 *pfh3)"
.br
.ti -1c
.RI "short \fBnfs2_FhandleToExportId\fP (fhandle2 *pfh2)"
.br
.ti -1c
.RI "int \fBnfs3_Is_Fh_Xattr\fP (nfs_fh3 *pfh)"
.br
.ti -1c
.RI "int \fBnfs4_Is_Fh_Empty\fP (nfs_fh4 *pfh)"
.br
.ti -1c
.RI "int \fBnfs4_Is_Fh_Xattr\fP (nfs_fh4 *pfh)"
.br
.ti -1c
.RI "int \fBnfs4_Is_Fh_Pseudo\fP (nfs_fh4 *pfh)"
.br
.ti -1c
.RI "int \fBnfs4_Is_Fh_Expired\fP (nfs_fh4 *pfh)"
.br
.ti -1c
.RI "int \fBnfs4_Is_Fh_Invalid\fP (nfs_fh4 *pfh)"
.br
.ti -1c
.RI "int \fBnfs4_Is_Fh_Referral\fP (nfs_fh4 *pfh)"
.br
.ti -1c
.RI "void \fBprint_fhandle2\fP (log_components_t component, fhandle2 fh)"
.br
.ti -1c
.RI "void \fBsprint_fhandle2\fP (char *str, fhandle2 fh)"
.br
.ti -1c
.RI "void \fBprint_fhandle3\fP (log_components_t component, nfs_fh3 fh)"
.br
.ti -1c
.RI "void \fBsprint_fhandle3\fP (char *str, nfs_fh3 fh)"
.br
.ti -1c
.RI "void \fBprint_fhandle4\fP (log_components_t component, nfs_fh4 fh)"
.br
.ti -1c
.RI "void \fBsprint_fhandle4\fP (char *str, nfs_fh4 fh)"
.br
.ti -1c
.RI "void \fBprint_buff\fP (log_components_t component, char *buff, int len)"
.br
.ti -1c
.RI "void \fBsprint_buff\fP (char *str, char *buff, int len)"
.br
.ti -1c
.RI "void \fBsprint_mem\fP (char *str, char *buff, int len)"
.br
.ti -1c
.RI "void \fBprint_compound_fh\fP (log_components_t component, compound_data_t *data)"
.br
.ti -1c
.RI "void \fBnfs4_sprint_fhandle\fP (nfs_fh4 *fh4p, char *outstr)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "time_t \fBServerBootTime\fP"
.br
.ti -1c
.RI "nfs_parameter_t \fBnfs_param\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Some tools for managing the file handles. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
deniel 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2006/01/24 11:43:05 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.12 
.RE
.PP
\fBnfs_filehandle_mgmt.c\fP : Some tools for managing the file handles.
.PP
\fBHeader\fP.RS 4
/cea/S/home/cvs/cvs/SHERPA/BaseCvs/GANESHA/src/support/nfs_filehandle_mgmt.c,v 1.12 2006/01/24 11:43:05 deniel Exp 
.RE
.PP
.PP
\fBLog\fP.RS 4
\fBnfs_filehandle_mgmt.c\fP,v 
.RE
.PP
Revision 1.12 2006/01/24 11:43:05 deniel Code cleaning in progress
.PP
Revision 1.11 2006/01/11 08:12:18 deniel Added bug track and warning for badly formed handles
.PP
Revision 1.9 2005/09/07 08:58:30 deniel NFSv2 FH was only 31 byte long instead of 32
.PP
Revision 1.8 2005/09/07 08:16:07 deniel The checksum is filled with zeros before being computed to avoid 'dead beef' values
.PP
Revision 1.7 2005/08/11 12:37:28 deniel Added statistics management
.PP
Revision 1.6 2005/08/09 12:35:37 leibovic setting file_handle to 0 in nfs3_FSALToFhandle, before writting into it.
.PP
Revision 1.5 2005/08/08 14:09:25 leibovic setting checksum to 0 before writting in it.
.PP
Revision 1.4 2005/08/04 08:34:32 deniel memset management was badly made
.PP
Revision 1.3 2005/08/03 13:23:43 deniel Possible incoherency in CVS or in Emacs
.PP
Revision 1.2 2005/08/03 13:13:59 deniel memset to zero before building the filehandles
.PP
Revision 1.1 2005/08/03 06:57:54 deniel Added a libsupport for miscellaneous service functions
.PP
Revision 1.4 2005/07/28 12:26:57 deniel NFSv3 PROTOCOL Ok
.PP
Revision 1.3 2005/07/26 07:39:15 deniel Integration of NFSv2/NFSv3 In progress
.PP
Revision 1.2 2005/07/21 09:18:42 deniel Structure of the file handles was redefined
.PP
Revision 1.1 2005/07/20 12:56:54 deniel Reorganisation of the source files 
.PP
Definition in file \fBnfs_filehandle_mgmt.c\fP.
.SH "Function Documentation"
.PP 
.SS "short nfs2_FhandleToExportId (fhandle2 * pfh2)"nfs2_FhandleToExportId
.PP
This routine extracts the export id from the file handle NFSv2
.PP
\fBParameters:\fP
.RS 4
\fIpfh2\fP [IN] file handle to manage.
.RE
.PP
\fBReturns:\fP
.RS 4
the export id. 
.RE
.PP

.PP
Definition at line 463 of file nfs_filehandle_mgmt.c.
.SS "int nfs2_FhandleToFSAL (fhandle2 * pfh2, fsal_handle_t * pfsalhandle, fsal_op_context_t * pcontext)"nfs2_FhandleToFSAL: converts a nfs2 file handle to a FSAL file handle.
.PP
Converts a nfs2 file handle to a FSAL file handle.
.PP
\fBParameters:\fP
.RS 4
\fIpfh2\fP [IN] pointer to the file handle to be converted 
.br
\fIpfsalhandle\fP [OUT] pointer to the extracted FSAL handle
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 otherwise 
.RE
.PP

.PP
Definition at line 225 of file nfs_filehandle_mgmt.c.
.SS "int nfs2_FSALToFhandle (fhandle2 * pfh2, fsal_handle_t * pfsalhandle, exportlist_t * pexport)"nfs2_FSALToFhandle: converts a FSAL file handle to a nfs2 file handle.
.PP
Converts a nfs2 file handle to a FSAL file handle.
.PP
\fBParameters:\fP
.RS 4
\fIpfh2\fP [OUT] pointer to the extracted file handle 
.br
\fIpfsalhandle\fP [IN] pointer to the FSAL handle to be converted 
.br
\fIpfsalhandle\fP [IN] pointer to the FSAL handle to be converted
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 otherwise 
.RE
.PP

.PP
Definition at line 372 of file nfs_filehandle_mgmt.c.
.SS "short nfs3_FhandleToExportId (nfs_fh3 * pfh3)"nfs3_FhandleToExportId
.PP
This routine extracts the export id from the file handle NFSv3
.PP
\fBParameters:\fP
.RS 4
\fIpfh3\fP [IN] file handle to manage.
.RE
.PP
\fBReturns:\fP
.RS 4
the export id. 
.RE
.PP

.PP
Definition at line 438 of file nfs_filehandle_mgmt.c.
.SS "int nfs3_FhandleToFSAL (nfs_fh3 * pfh3, fsal_handle_t * pfsalhandle, fsal_op_context_t * pcontext)"nfs3_FhandleToFSAL: converts a nfs3 file handle to a FSAL file handle.
.PP
Converts a nfs3 file handle to a FSAL file handle.
.PP
\fBParameters:\fP
.RS 4
\fIpfh3\fP [IN] pointer to the file handle to be converted 
.br
\fIpfsalhandle\fP [OUT] pointer to the extracted FSAL handle
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 otherwise 
.RE
.PP

.PP
Definition at line 186 of file nfs_filehandle_mgmt.c.
.SS "int nfs3_FSALToFhandle (nfs_fh3 * pfh3, fsal_handle_t * pfsalhandle, exportlist_t * pexport)"nfs3_FSALToFhandle: converts a FSAL file handle to a nfs3 file handle.
.PP
Converts a nfs3 file handle to a FSAL file handle.
.PP
\fBParameters:\fP
.RS 4
\fIpfh3\fP [OUT] pointer to the extracted file handle 
.br
\fIpfsalhandle\fP [IN] pointer to the FSAL handle to be converted 
.br
\fIpexport\fP [IN] pointer to the export list entry the FH belongs to
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 otherwise 
.RE
.PP

.PP
Definition at line 322 of file nfs_filehandle_mgmt.c.
.SS "int nfs3_Is_Fh_Xattr (nfs_fh3 * pfh)"nfs4_Is_Fh_Xattr
.PP
This routine is used to test is a fh refers to a Xattr related stuff
.PP
\fBParameters:\fP
.RS 4
\fIpfh\fP [IN] file handle to test.
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if in pseudo fh, FALSE otherwise 
.RE
.PP

.PP
Definition at line 486 of file nfs_filehandle_mgmt.c.
.SS "short nfs4_FhandleToExportId (nfs_fh4 * pfh4)"nfs4_FhandleToExportId
.PP
This routine extracts the export id from the file handle NFSv4
.PP
\fBParameters:\fP
.RS 4
\fIpfh4\fP [IN] file handle to manage.
.RE
.PP
\fBReturns:\fP
.RS 4
the export id. 
.RE
.PP

.PP
Definition at line 415 of file nfs_filehandle_mgmt.c.
.SS "int nfs4_FhandleToFSAL (nfs_fh4 * pfh4, fsal_handle_t * pfsalhandle, fsal_op_context_t * pcontext)"nfs4_FhandleToFSAL: converts a nfs4 file handle to a FSAL file handle.
.PP
Converts a nfs4 file handle to a FSAL file handle.
.PP
\fBParameters:\fP
.RS 4
\fIpfh4\fP [IN] pointer to the file handle to be converted 
.br
\fIpfsalhandle\fP [OUT] pointer to the extracted FSAL handle
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 otherwise 
.RE
.PP

.PP
Definition at line 142 of file nfs_filehandle_mgmt.c.
.SS "int nfs4_FSALToFhandle (nfs_fh4 * pfh4, fsal_handle_t * pfsalhandle, compound_data_t * data)"nfs4_FSALToFhandle: converts a FSAL file handle to a nfs4 file handle.
.PP
Converts a nfs4 file handle to a FSAL file handle.
.PP
\fBParameters:\fP
.RS 4
\fIpfh4\fP [OUT] pointer to the extracted file handle 
.br
\fIpfsalhandle\fP [IN] pointer to the FSAL handle to be converted 
.br
\fIdata\fP [IN] pointer to NFSv4 compound data structure.
.RE
.PP
\fBReturns:\fP
.RS 4
1 if successful, 0 otherwise 
.RE
.PP

.PP
Definition at line 260 of file nfs_filehandle_mgmt.c.
.SS "int nfs4_Is_Fh_Empty (nfs_fh4 * pfh)"nfs4_Is_Fh_Empty
.PP
This routine is used to test if a fh is empty (contains no data).
.PP
\fBParameters:\fP
.RS 4
\fIpfh\fP [IN] file handle to test.
.RE
.PP
\fBReturns:\fP
.RS 4
NFS4_OK if successfull, NFS4ERR_NOFILEHANDLE is fh is empty. 
.RE
.PP

.PP
Definition at line 509 of file nfs_filehandle_mgmt.c.
.SS "int nfs4_Is_Fh_Expired (nfs_fh4 * pfh)"nfs4_Is_Fh_Expired
.PP
This routine is used to test if a fh is expired
.PP
\fBParameters:\fP
.RS 4
\fIpfh\fP [IN] file handle to test.
.RE
.PP
\fBReturns:\fP
.RS 4
NFS4_OK if successfull. All the FH are persistent for now. 
.RE
.PP

.PP
Definition at line 577 of file nfs_filehandle_mgmt.c.
.SS "int nfs4_Is_Fh_Invalid (nfs_fh4 * pfh)"nfs4_Is_Fh_Invalid
.PP
This routine is used to test if a fh is invalid.
.PP
\fBParameters:\fP
.RS 4
\fIpfh\fP [IN] file handle to test.
.RE
.PP
\fBReturns:\fP
.RS 4
NFS4_OK if successfull. 
.RE
.PP

.PP
Definition at line 607 of file nfs_filehandle_mgmt.c.
.SS "int nfs4_Is_Fh_Pseudo (nfs_fh4 * pfh)"nfs4_Is_Fh_Pseudo
.PP
This routine is used to test if a fh refers to pseudo fs
.PP
\fBParameters:\fP
.RS 4
\fIpfh\fP [IN] file handle to test.
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if in pseudo fh, FALSE otherwise 
.RE
.PP

.PP
Definition at line 554 of file nfs_filehandle_mgmt.c.
.SS "int nfs4_Is_Fh_Referral (nfs_fh4 * pfh)"nfs4_Is_Fh_Referral
.PP
This routine is used to identify fh related to a pure referral
.PP
\fBParameters:\fP
.RS 4
\fIpfh\fP [IN] file handle to test.
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE is fh is a referral, FALSE otherwise 
.RE
.PP

.PP
Definition at line 632 of file nfs_filehandle_mgmt.c.
.SS "int nfs4_Is_Fh_Xattr (nfs_fh4 * pfh)"nfs4_Is_Fh_Xattr
.PP
This routine is used to test is a fh refers to a Xattr related stuff
.PP
\fBParameters:\fP
.RS 4
\fIpfh\fP [IN] file handle to test.
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if in pseudo fh, FALSE otherwise 
.RE
.PP

.PP
Definition at line 531 of file nfs_filehandle_mgmt.c.
.SS "void nfs4_sprint_fhandle (nfs_fh4 * fh4p, char * outstr)"nfs4_sprint_fhandle : converts a file handle v4 to a string.
.PP
Converts a file handle v4 to a string. This will be used mostly for debugging purpose.
.PP
\fBParameters:\fP
.RS 4
\fIfh4p\fP [OUT] pointer to the file handle to be converted to a string. 
.br
\fIdata\fP [INOUT] pointer to the char * resulting from the operation.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function). 
.RE
.PP

.PP
Definition at line 817 of file nfs_filehandle_mgmt.c.
.SS "void print_buff (log_components_t component, char * buff, int len)"print_buff
.PP
This routine prints the content of a buffer.
.PP
\fBParameters:\fP
.RS 4
\fIbuff\fP [IN] buffer to print. 
.br
\fIlen\fP [IN] length of the buffer.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function). 
.RE
.PP

.PP
Definition at line 749 of file nfs_filehandle_mgmt.c.
.SS "void print_compound_fh (log_components_t component, compound_data_t * data)"print_compound_fh
.PP
This routine prints all the file handle within a compoud request's data structure.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP [IN] compound's data to manage.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function). 
.RE
.PP

.PP
Definition at line 787 of file nfs_filehandle_mgmt.c.
.SS "void print_fhandle2 (log_components_t component, fhandle2 fh)"print_fhandle2
.PP
This routine prints a NFSv2 file handle (for debugging purpose)
.PP
\fBParameters:\fP
.RS 4
\fIfh\fP [IN] file handle to print.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function). 
.RE
.PP

.PP
Definition at line 661 of file nfs_filehandle_mgmt.c.
.SS "void print_fhandle3 (log_components_t component, nfs_fh3 fh)"print_fhandle3
.PP
This routine prints a NFSv3 file handle (for debugging purpose)
.PP
\fBParameters:\fP
.RS 4
\fIfh\fP [IN] file handle to print.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function). 
.RE
.PP

.PP
Definition at line 690 of file nfs_filehandle_mgmt.c.
.SS "void print_fhandle4 (log_components_t component, nfs_fh4 fh)"print_fhandle4
.PP
This routine prints a NFSv4 file handle (for debugging purpose)
.PP
\fBParameters:\fP
.RS 4
\fIfh\fP [IN] file handle to print.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function). 
.RE
.PP

.PP
Definition at line 719 of file nfs_filehandle_mgmt.c.
.SS "void sprint_buff (char * str, char * buff, int len)"
.PP
Definition at line 760 of file nfs_filehandle_mgmt.c.
.SS "void sprint_fhandle2 (char * str, fhandle2 fh)"
.PP
Definition at line 672 of file nfs_filehandle_mgmt.c.
.SS "void sprint_fhandle3 (char * str, nfs_fh3 fh)"
.PP
Definition at line 701 of file nfs_filehandle_mgmt.c.
.SS "void sprint_fhandle4 (char * str, nfs_fh4 fh)"
.PP
Definition at line 730 of file nfs_filehandle_mgmt.c.
.SS "void sprint_mem (char * str, char * buff, int len)"
.PP
Definition at line 768 of file nfs_filehandle_mgmt.c.
.SH "Variable Documentation"
.PP 
.SS "nfs_parameter_t \fBnfs_param\fP"
.SS "time_t \fBServerBootTime\fP"
.SH "Author"
.PP 
Generated automatically by Doxygen for Support routines layer from the source code.
