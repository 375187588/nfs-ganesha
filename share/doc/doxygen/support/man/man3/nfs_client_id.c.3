.TH "nfs_client_id.c" 3 "15 Sep 2010" "Version 0.1" "Support routines layer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nfs_client_id.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'HashData.h'\fP
.br
\fC#include 'HashTable.h'\fP
.br
\fC#include 'log_macros.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include 'nfs_core.h'\fP
.br
\fC#include 'nfs_exports.h'\fP
.br
\fC#include 'config_parsing.h'\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <pthread.h>\fP
.br
\fC#include 'nfs4.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "size_t \fBstrnlen\fP (const char *s, size_t maxlen)"
.br
.ti -1c
.RI "unsigned long \fBclient_id_value_hash_func\fP (hash_parameter_t *p_hparam, hash_buffer_t *buffclef)"
.br
.ti -1c
.RI "unsigned long \fBclient_id_value_hash_func_reverse\fP (hash_parameter_t *p_hparam, hash_buffer_t *buffclef)"
.br
.ti -1c
.RI "unsigned long \fBclient_id_rbt_hash_func\fP (hash_parameter_t *p_hparam, hash_buffer_t *buffclef)"
.br
.ti -1c
.RI "unsigned long \fBclient_id_rbt_hash_func_reverse\fP (hash_parameter_t *p_hparam, hash_buffer_t *buffclef)"
.br
.ti -1c
.RI "int \fBcompare_client_id\fP (hash_buffer_t *buff1, hash_buffer_t *buff2)"
.br
.ti -1c
.RI "int \fBcompare_client_id_reverse\fP (hash_buffer_t *buff1, hash_buffer_t *buff2)"
.br
.ti -1c
.RI "int \fBdisplay_client_id\fP (hash_buffer_t *pbuff, char *str)"
.br
.ti -1c
.RI "int \fBdisplay_client_id_reverse\fP (hash_buffer_t *pbuff, char *str)"
.br
.ti -1c
.RI "int \fBdisplay_client_id_val\fP (hash_buffer_t *pbuff, char *str)"
.br
.ti -1c
.RI "int \fBnfs_client_id_add\fP (clientid4 clientid, nfs_client_id_t client_record, nfs_client_id_t *nfs_client_id_pool)"
.br
.ti -1c
.RI "int \fBnfs_client_id_set\fP (clientid4 clientid, nfs_client_id_t client_record, nfs_client_id_t *nfs_client_id_pool)"
.br
.ti -1c
.RI "int \fBnfs_client_id_get\fP (clientid4 clientid, nfs_client_id_t *client_id_res)"
.br
.ti -1c
.RI "int \fBnfs_client_id_Get_Pointer\fP (clientid4 clientid, nfs_client_id_t **ppclient_id_res)"
.br
.ti -1c
.RI "int \fBnfs_client_id_get_reverse\fP (char *key, nfs_client_id_t *client_id_res)"
.br
.ti -1c
.RI "int \fBnfs_client_id_remove\fP (clientid4 clientid, nfs_client_id_t *nfs_client_id_pool)"
.br
.ti -1c
.RI "int \fBnfs_Init_client_id\fP (nfs_client_id_parameter_t param)"
.br
.ti -1c
.RI "int \fBnfs_Init_client_id_reverse\fP (nfs_client_id_parameter_t param)"
.br
.ti -1c
.RI "int \fBnfs_client_id_basic_compute\fP (char *name, clientid4 *pclientid)"
.br
.ti -1c
.RI "int \fBnfs_client_id_compute\fP (char *name, clientid4 *pclientid)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "hash_table_t * \fBht_client_id\fP"
.br
.ti -1c
.RI "hash_table_t * \fBht_client_id_reverse\fP"
.br
.ti -1c
.RI "nfs_parameter_t \fBnfs_param\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "unsigned long client_id_rbt_hash_func (hash_parameter_t * p_hparam, hash_buffer_t * buffclef)"client_id_rbt_hash_func: computes the rbt value for the entry in Client Id cache.
.PP
Computes the rbt value for the entry in Client Id cache. In fact, it just use the address value itself (which is an unsigned integer) as the rbt value. This function is called internal in the HasTable_* function
.PP
\fBParameters:\fP
.RS 4
\fIhparam\fP [IN] hash table parameter. 
.br
\fIbuffcleff[in]\fP pointer to the hash key buffer
.RE
.PP
\fBReturns:\fP
.RS 4
the computed rbt value.
.RE
.PP
\fBSee also:\fP
.RS 4
HashTable_Init 
.RE
.PP

.PP
Definition at line 138 of file nfs_client_id.c.
.SS "unsigned long client_id_rbt_hash_func_reverse (hash_parameter_t * p_hparam, hash_buffer_t * buffclef)"
.PP
Definition at line 153 of file nfs_client_id.c.
.SS "unsigned long client_id_value_hash_func (hash_parameter_t * p_hparam, hash_buffer_t * buffclef)"client_id_rbt_hash_func: computes the hash value for the entry in Client Id cache.
.PP
Computes the hash value for the entry in Client Id cache. In fact, it just use addresse as value (identity function) modulo the size of the hash. This function is called internal in the HasTable_* function
.PP
\fBParameters:\fP
.RS 4
\fIhparam\fP [IN] hash table parameter. 
.br
\fIbuffcleff\fP [IN] pointer to the hash key buffer
.RE
.PP
\fBReturns:\fP
.RS 4
the computed hash value.
.RE
.PP
\fBSee also:\fP
.RS 4
HashTable_Init 
.RE
.PP

.PP
Definition at line 78 of file nfs_client_id.c.
.SS "unsigned long client_id_value_hash_func_reverse (hash_parameter_t * p_hparam, hash_buffer_t * buffclef)"client_id_reverse_hash_func: computes the hash value for the entry in Client Id cache.
.PP
Computes the hash value for the entry in Client Id cache. In fact, it just use addresse as value (identity function) modulo the size of the hash. This function is called internal in the HasTable_* function
.PP
\fBParameters:\fP
.RS 4
\fIhparam\fP [IN] hash table parameter. 
.br
\fIbuffcleff\fP [IN] pointer to the hash key buffer
.RE
.PP
\fBReturns:\fP
.RS 4
the computed hash value.
.RE
.PP
\fBSee also:\fP
.RS 4
HashTable_Init 
.RE
.PP

.PP
Definition at line 108 of file nfs_client_id.c.
.SS "int compare_client_id (hash_buffer_t * buff1, hash_buffer_t * buff2)"compare_client_id: compares the ip address stored in the key buffers.
.PP
compare the ip address stored in the key buffers. This function is to be used as 'compare_key' field in the hashtable storing the client ids.
.PP
\fBParameters:\fP
.RS 4
\fIbuff1\fP [IN] first key 
.br
\fIbuff2\fP [IN] second key
.RE
.PP
\fBReturns:\fP
.RS 4
0 if keys are identifical, 1 if they are different. 
.RE
.PP

.PP
Definition at line 177 of file nfs_client_id.c.
.SS "int compare_client_id_reverse (hash_buffer_t * buff1, hash_buffer_t * buff2)"
.PP
Definition at line 184 of file nfs_client_id.c.
.SS "int display_client_id (hash_buffer_t * pbuff, char * str)"display_client_id: displays the client_id stored in the buffer.
.PP
displays the client_id stored in the buffer. This function is to be used as 'key_to_str' field in the hashtable storing the client ids.
.PP
\fBParameters:\fP
.RS 4
\fIbuff1\fP [IN] buffer to display 
.br
\fIbuff2\fP [OUT] output string
.RE
.PP
\fBReturns:\fP
.RS 4
number of character written. 
.RE
.PP

.PP
Definition at line 204 of file nfs_client_id.c.
.SS "int display_client_id_reverse (hash_buffer_t * pbuff, char * str)"
.PP
Definition at line 213 of file nfs_client_id.c.
.SS "int display_client_id_val (hash_buffer_t * pbuff, char * str)"
.PP
Definition at line 218 of file nfs_client_id.c.
.SS "int nfs_client_id_add (clientid4 clientid, nfs_client_id_t client_record, nfs_client_id_t * nfs_client_id_pool)"nfs_client_id_add: adds an entry in the duplicate requests cache.
.PP
Adds an entry in the duplicate requests cache.
.PP
\fBParameters:\fP
.RS 4
\fIclientid\fP [IN] the client id used as key 
.br
\fIclient_record\fP [IN] the candidate record for the client 
.br
\fInfs_client_id_pool\fP [INOUT] values pool for hash table
.RE
.PP
\fBReturns:\fP
.RS 4
CLIENT_ID_SUCCESS if successfull
.br
. 
.PP
CLIENT_ID_INSERT_MALLOC_ERROR if an error occured during the insertion process 
.br
 
.PP
CLIENT_ID_NETDB_ERROR if an error occured during the netdb query (via gethostbyaddr). 
.RE
.PP

.PP
Definition at line 246 of file nfs_client_id.c.
.SS "int nfs_client_id_basic_compute (char * name, clientid4 * pclientid)"
.PP
Definition at line 619 of file nfs_client_id.c.
.SS "int nfs_client_id_compute (char * name, clientid4 * pclientid)"nfs_client_id_compute: computes the client id, based on the string.
.PP
Computes the client id, based on the string. 
.PP
Definition at line 647 of file nfs_client_id.c.
.SS "int nfs_client_id_get (clientid4 clientid, nfs_client_id_t * client_id_res)"nfs_client_id_get: Tries to get an entry for client_id cache.
.PP
Tries to get an entry for client_id cache.
.PP
\fBParameters:\fP
.RS 4
\fIclientid\fP [IN] the client id 
.br
\fIresclientid\fP [OUT] the found client id
.RE
.PP
\fBReturns:\fP
.RS 4
the result previously set if *pstatus == CLIENT_ID_SUCCESS 
.RE
.PP

.PP
Definition at line 408 of file nfs_client_id.c.
.SS "int nfs_client_id_Get_Pointer (clientid4 clientid, nfs_client_id_t ** ppclient_id_res)"
.PP
Definition at line 450 of file nfs_client_id.c.
.SS "int nfs_client_id_get_reverse (char * key, nfs_client_id_t * client_id_res)"
.PP
Definition at line 490 of file nfs_client_id.c.
.SS "int nfs_client_id_remove (clientid4 clientid, nfs_client_id_t * nfs_client_id_pool)"nfs_client_id_remove: Tries to remove an entry for client_id cache
.PP
Tries to remove an entry for client_id cache.
.PP
\fBParameters:\fP
.RS 4
\fIclientid\fP [IN] the clientid to be used as key 
.br
\fInfs_client_id_pool\fP [INOUT] values pool for hash table
.RE
.PP
\fBReturns:\fP
.RS 4
the result previously set if *pstatus == CLIENT_ID_SUCCESS 
.RE
.PP

.PP
Definition at line 530 of file nfs_client_id.c.
.SS "int nfs_client_id_set (clientid4 clientid, nfs_client_id_t client_record, nfs_client_id_t * nfs_client_id_pool)"nfs_client_id_sets: sets an entry that already exists.
.PP
Sets an entry that already exists
.PP
\fBParameters:\fP
.RS 4
\fIclientid\fP [IN] the client id used as key 
.br
\fIclient_record\fP [IN] the candidate record for the client 
.br
\fInfs_client_id_pool\fP [INOUT] values pool for hash table
.RE
.PP
\fBReturns:\fP
.RS 4
CLIENT_ID_SUCCESS if successfull
.br
. 
.PP
CLIENT_ID_INSERT_MALLOC_ERROR if an error occured during the insertion process 
.br
 
.PP
CLIENT_ID_NETDB_ERROR if an error occured during the netdb query (via gethostbyaddr). 
.RE
.PP

.PP
Definition at line 332 of file nfs_client_id.c.
.SS "int nfs_Init_client_id (nfs_client_id_parameter_t param)"nfs_Init_client_id: Init the hashtable for Client Id cache.
.PP
Perform all the required initialization for hashtable Client Id cache
.PP
\fBParameters:\fP
.RS 4
\fIparam\fP [IN] parameter used to init the duplicate request cache
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise 
.RE
.PP

.PP
Definition at line 586 of file nfs_client_id.c.
.SS "int nfs_Init_client_id_reverse (nfs_client_id_parameter_t param)"nfs_Init_client_id_reverse: Init the reverse hashtable for Client Id cache.
.PP
Perform all the required initialization for hashtable Client Id cache
.PP
\fBParameters:\fP
.RS 4
\fIparam\fP [IN] parameter used to init the duplicate request cache
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise 
.RE
.PP

.PP
Definition at line 608 of file nfs_client_id.c.
.SS "size_t strnlen (const char * s, size_t maxlen)"vim:expandtab:shiftwidth=8:tabstop=8:
.PP
Copyright CEA/DAM/DIF (2008) contributeur : Philippe DENIEL philippe.deniel@cea.fr Thomas LEIBOVICI thomas.leibovici@cea.fr
.PP
This program is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
.PP
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
.PP
You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
.PP
---------------------------------------
.PP
\fBnfs_client_id.c\fP : The management of the client id cache.
.PP
$Header$
.PP
$Log$ 
.SH "Variable Documentation"
.PP 
.SS "hash_table_t* \fBht_client_id\fP"
.PP
Definition at line 59 of file nfs_client_id.c.
.SS "hash_table_t* \fBht_client_id_reverse\fP"
.PP
Definition at line 60 of file nfs_client_id.c.
.SS "nfs_parameter_t \fBnfs_param\fP"
.SH "Author"
.PP 
Generated automatically by Doxygen for Support routines layer from the source code.
