.TH "nfs_ip_stats.c" 3 "31 Mar 2009" "Version 0.1" "Support routines layer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nfs_ip_stats.c \- The management of the IP stats per machines.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include 'HashData.h'\fP
.br
\fC#include 'HashTable.h'\fP
.br
\fC#include 'log_functions.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include 'nfs_core.h'\fP
.br
\fC#include 'nfs_exports.h'\fP
.br
\fC#include 'config_parsing.h'\fP
.br
\fC#include 'nfs_ip_stats.h'\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <string.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "unsigned long int \fBip_stats_value_hash_func\fP (hash_parameter_t *p_hparam, hash_buffer_t *buffclef)"
.br
.ti -1c
.RI "unsigned long int \fBip_stats_rbt_hash_func\fP (hash_parameter_t *p_hparam, hash_buffer_t *buffclef)"
.br
.ti -1c
.RI "int \fBcompare_ip_stats\fP (hash_buffer_t *buff1, hash_buffer_t *buff2)"
.br
.ti -1c
.RI "int \fBdisplay_ip_stats\fP (hash_buffer_t *pbuff, char *str)"
.br
.ti -1c
.RI "int \fBnfs_ip_stats_add\fP (hash_table_t *ht_ip_stats, unsigned int ipaddr, nfs_ip_stats_t *nfs_ip_stats_pool)"
.br
.ti -1c
.RI "int \fBnfs_ip_stats_incr\fP (hash_table_t *ht_ip_stats, unsigned int ipaddr, unsigned int nfs_prog, unsigned int mnt_prog, struct svc_req *ptr_req)"
.br
.ti -1c
.RI "int \fBnfs_ip_stats_get\fP (hash_table_t *ht_ip_stats, unsigned int ipaddr, nfs_ip_stats_t **pnfs_ip_stats)"
.br
.ti -1c
.RI "int \fBnfs_ip_stats_remove\fP (hash_table_t *ht_ip_stats, int ipaddr, nfs_ip_stats_t *nfs_ip_stats_pool)"
.br
.ti -1c
.RI "hash_table_t * \fBnfs_Init_ip_stats\fP (nfs_ip_stats_parameter_t param)"
.br
.ti -1c
.RI "void \fBnfs_ip_stats_dump\fP (hash_table_t **ht_ip_stats, unsigned int nb_worker, char *path_stat)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "nfs_parameter_t \fBnfs_param\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The management of the IP stats per machines. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
leibovic 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2006/01/24 13:49:12 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision\fP.RS 4
1.4 
.RE
.PP
\fBnfs_ip_stats.c\fP : The management of the IP stats per machines.
.PP
\fBHeader\fP.RS 4
/cea/S/home/cvs/cvs/SHERPA/BaseCvs/GANESHA/src/support/nfs_ip_stats.c,v 1.4 2006/01/24 13:49:12 leibovic Exp 
.RE
.PP
.PP
\fBLog\fP.RS 4
\fBnfs_ip_stats.c\fP,v 
.RE
.PP
Revision 1.4 2006/01/24 13:49:12 leibovic Adding missing includes.
.PP
Revision 1.3 2006/01/20 07:39:23 leibovic Back to the previous version.
.PP
Revision 1.1 2005/11/30 09:28:42 deniel IP/stats cache per thread (no bottleneck) is complete 
.PP
Definition in file \fBnfs_ip_stats.c\fP.
.SH "Function Documentation"
.PP 
.SS "int compare_ip_stats (hash_buffer_t * buff1, hash_buffer_t * buff2)"
.PP
compare_ip_stats: compares the ip address stored in the key buffers.
.PP
compare the ip address stored in the key buffers. This function is to be used as 'compare_key' field in the hashtable storing the nfs duplicated requests.
.PP
\fBParameters:\fP
.RS 4
\fIbuff1\fP [IN] first key 
.br
\fIbuff2\fP [IN] second key
.RE
.PP
\fBReturns:\fP
.RS 4
0 if keys are identifical, 1 if they are different. 
.RE
.PP

.PP
Definition at line 181 of file nfs_ip_stats.c.
.SS "int display_ip_stats (hash_buffer_t * pbuff, char * str)"
.PP
display_ip_stats: displays the ip_stats stored in the buffer.
.PP
displays the ip_stats stored in the buffer. This function is to be used as 'key_to_str' field in the hashtable storing the nfs duplicated requests.
.PP
\fBParameters:\fP
.RS 4
\fIbuff1\fP [IN] buffer to display 
.br
\fIbuff2\fP [OUT] output string
.RE
.PP
\fBReturns:\fP
.RS 4
number of character written. 
.RE
.PP

.PP
Definition at line 202 of file nfs_ip_stats.c.
.SS "unsigned long int ip_stats_rbt_hash_func (hash_parameter_t * p_hparam, hash_buffer_t * buffclef)"
.PP
ip_stats_rbt_hash_func: computes the rbt value for the entry in IP stats cache.
.PP
Computes the rbt value for the entry in IP stats cache. In fact, it just use the address value itself (which is an unsigned integer) as the rbt value. This function is called internal in the HasTable_* function
.PP
\fBParameters:\fP
.RS 4
\fIhparam\fP [IN] hash table parameter. 
.br
\fIbuffcleff[in]\fP pointer to the hash key buffer
.RE
.PP
\fBReturns:\fP
.RS 4
the computed rbt value.
.RE
.PP
\fBSee also:\fP
.RS 4
HashTable_Init 
.RE
.PP

.PP
Definition at line 162 of file nfs_ip_stats.c.
.SS "unsigned long int ip_stats_value_hash_func (hash_parameter_t * p_hparam, hash_buffer_t * buffclef)"
.PP
ip_stats_rbt_hash_func: computes the hash value for the entry in IP stats cache.
.PP
Computes the hash value for the entry in IP stats cache. In fact, it just use addresse as value (identity function) modulo the size of the hash. This function is called internal in the HasTable_* function
.PP
\fBParameters:\fP
.RS 4
\fIhparam\fP [IN] hash table parameter. 
.br
\fIbuffcleff[in]\fP pointer to the hash key buffer
.RE
.PP
\fBReturns:\fP
.RS 4
the computed hash value.
.RE
.PP
\fBSee also:\fP
.RS 4
HashTable_Init 
.RE
.PP

.PP
Definition at line 140 of file nfs_ip_stats.c.
.SS "hash_table_t* nfs_Init_ip_stats (nfs_ip_stats_parameter_t param)"
.PP
nfs_Init_ip_stats: Init the hashtable for IP stats cache.
.PP
Perform all the required initialization for hashtable IP stats cache
.PP
\fBParameters:\fP
.RS 4
\fIparam\fP [IN] parameter used to init the duplicate request cache
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise 
.RE
.PP

.PP
Definition at line 469 of file nfs_ip_stats.c.
.SS "int nfs_ip_stats_add (hash_table_t * ht_ip_stats, unsigned int ipaddr, nfs_ip_stats_t * nfs_ip_stats_pool)"
.PP
nfs_ip_stats_add: adds an entry in the duplicate requests cache.
.PP
Adds an entry in the duplicate requests cache.
.PP
\fBParameters:\fP
.RS 4
\fIipaddr\fP [IN] the ipaddr to be used as key 
.br
\fInfs_ip_stats_pool\fP [INOUT] values pool for hash table
.RE
.PP
\fBReturns:\fP
.RS 4
IP_STATS_SUCCESS if successfull
.br
. 
.PP
IP_STATS_INSERT_MALLOC_ERROR if an error occured during the insertion process 
.br
 
.PP
IP_STATS_NETDB_ERROR if an error occured during the netdb query (via gethostbyaddr). 
.RE
.PP

.PP
Definition at line 230 of file nfs_ip_stats.c.
.SS "void nfs_ip_stats_dump (hash_table_t ** ht_ip_stats, unsigned int nb_worker, char * path_stat)"
.PP
nfs_ip_stats_dump: Dumps the IP Stats for each client to a file per client
.PP
\fBParameters:\fP
.RS 4
\fIht_ip_stats\fP [IN] hash table to be dumped 
.br
\fIpath_stat\fP [IN] pattern used to build path used for dumping stats
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function). 
.RE
.PP

.PP
Definition at line 493 of file nfs_ip_stats.c.
.SS "int nfs_ip_stats_get (hash_table_t * ht_ip_stats, unsigned int ipaddr, nfs_ip_stats_t ** pnfs_ip_stats)"
.PP
nfs_ip_stats_get: gets the stats value.
.PP
gets the stats value.
.PP
\fBParameters:\fP
.RS 4
\fIipaddr\fP [IN] the ip address requested
.RE
.PP
\fBReturns:\fP
.RS 4
the computed number of call for this ipaddr. Negative value is a failure 
.RE
.PP

.PP
Definition at line 382 of file nfs_ip_stats.c.
.SS "int nfs_ip_stats_incr (hash_table_t * ht_ip_stats, unsigned int ipaddr, unsigned int nfs_prog, unsigned int mnt_prog, struct svc_req * ptr_req)"
.PP
nfs_ip_stats_incr: increments the stats value.
.PP
increments the stats value.
.PP
\fBParameters:\fP
.RS 4
\fIipaddr\fP [IN] the ip address requested
.RE
.PP
\fBReturns:\fP
.RS 4
the computed number of call for this ipaddr. Negative value is a failure 
.RE
.PP

.PP
Definition at line 303 of file nfs_ip_stats.c.
.SS "int nfs_ip_stats_remove (hash_table_t * ht_ip_stats, int ipaddr, nfs_ip_stats_t * nfs_ip_stats_pool)"
.PP
nfs_ip_stats_remove: Tries to remove an entry for ip_stats cache
.PP
Tries to remove an entry for ip_stats cache.
.PP
\fBParameters:\fP
.RS 4
\fIipaddr\fP [IN] the ip address to be uncached. 
.br
\fInfs_ip_stats_pool\fP [INOUT] values pool for hash table
.RE
.PP
\fBReturns:\fP
.RS 4
the result previously set if *pstatus == IP_STATS_SUCCESS 
.RE
.PP

.PP
Definition at line 425 of file nfs_ip_stats.c.
.SH "Variable Documentation"
.PP 
.SS "nfs_parameter_t \fBnfs_param\fP"
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for Support routines layer from the source code.
