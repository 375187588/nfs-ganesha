<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.3.9.1">
  <compounddef id="nfs__client__id_8c" kind="file">
    <compoundname>nfs_client_id.c</compoundname>
    <includes local="yes">HashData.h</includes>
    <includes local="yes">HashTable.h</includes>
    <includes local="yes">log_functions.h</includes>
    <includes local="yes">stuff_alloc.h</includes>
    <includes local="yes">nfs_core.h</includes>
    <includes local="yes">nfs_exports.h</includes>
    <includes local="yes">config_parsing.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">nfs4.h</includes>
    <includes local="yes">SHA1.h</includes>
    <incdepgraph>
      <node id="68">
        <label>config_parsing.h</label>
      </node>
      <node id="72">
        <label>SHA1.h</label>
      </node>
      <node id="69">
        <label>stdlib.h</label>
      </node>
      <node id="64">
        <label>log_functions.h</label>
      </node>
      <node id="71">
        <label>nfs4.h</label>
      </node>
      <node id="61">
        <label>nfs_client_id.c</label>
        <link refid="nfs_client_id.c"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>string.h</label>
      </node>
      <node id="63">
        <label>HashTable.h</label>
      </node>
      <node id="67">
        <label>nfs_exports.h</label>
      </node>
      <node id="66">
        <label>nfs_core.h</label>
      </node>
      <node id="65">
        <label>stuff_alloc.h</label>
      </node>
      <node id="62">
        <label>HashData.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="nfs__client__id_8c_1a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t strnlen</definition>
        <argsstring>(const char *s, size_t maxlen)</argsstring>
        <name>strnlen</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>vim:expandtab:shiftwidth=8:tabstop=8:</para><para>Copyright CEA/DAM/DIF (2008) contributeur : Philippe DENIEL <ulink url="mailto:philippe.deniel@cea.fr">philippe.deniel@cea.fr</ulink> Thomas LEIBOVICI <ulink url="mailto:thomas.leibovici@cea.fr">thomas.leibovici@cea.fr</ulink></para><para>Ce logiciel est un serveur implementant le protocole NFS.</para><para>Ce logiciel est régi par la licence CeCILL soumise au droit français et respectant les principes de diffusion des logiciels libres. Vous pouvez utiliser, modifier et/ou redistribuer ce programme sous les conditions de la licence CeCILL telle que diffusée par le CEA, le CNRS et l&apos;INRIA sur le site &quot;http://www.cecill.info&quot;.</para><para>En contrepartie de l&apos;accessibilité au code source et des droits de copie, de modification et de redistribution accordés par cette licence, il n&apos;est offert aux utilisateurs qu&apos;une garantie limitée. Pour les mêmes raisons, seule une responsabilité restreinte pèse sur l&apos;auteur du programme, le titulaire des droits patrimoniaux et les concédants successifs.</para><para>A cet égard l&apos;attention de l&apos;utilisateur est attirée sur les risques associés au chargement, à l&apos;utilisation, à la modification et/ou au développement et à la reproduction du logiciel par l&apos;utilisateur étant donné sa spécificité de logiciel libre, qui peut le rendre complexe à manipuler et qui le réserve donc à des développeurs et des professionnels avertis possédant des connaissances informatiques approfondies. Les utilisateurs sont donc invités à charger et tester l&apos;adéquation du logiciel à leurs besoins dans des conditions permettant d&apos;assurer la sécurité de leurs systèmes et ou de leurs données et, plus généralement, à l&apos;utiliser et l&apos;exploiter dans les mêmes conditions de sécurité.</para><para>Le fait que vous puissiez accéder à cet en-tête signifie que vous avez pris connaissance de la licence CeCILL, et que vous en avez accepté les termes.</para><para>---------------------</para><para>Copyright CEA/DAM/DIF (2005) Contributor: Philippe DENIEL <ulink url="mailto:philippe.deniel@cea.fr">philippe.deniel@cea.fr</ulink> Thomas LEIBOVICI <ulink url="mailto:thomas.leibovici@cea.fr">thomas.leibovici@cea.fr</ulink></para><para>This software is a server that implements the NFS protocol.</para><para>This software is governed by the CeCILL license under French law and abiding by the rules of distribution of free software. You can use, modify and/ or redistribute the software under the terms of the CeCILL license as circulated by CEA, CNRS and INRIA at the following URL &quot;http://www.cecill.info&quot;.</para><para>As a counterpart to the access to the source code and rights to copy, modify and redistribute granted by the license, users are provided only with a limited warranty and the software&apos;s author, the holder of the economic rights, and the successive licensors have only limited liability.</para><para>In this respect, the user&apos;s attention is drawn to the risks associated with loading, using, modifying and/or developing or reproducing the software by the user in light of its specific status of free software, that may mean that it is complicated to manipulate, and that also therefore means that it is reserved for developers and experienced professionals having in-depth computer knowledge. Users are therefore encouraged to load and test the software&apos;s suitability as regards their requirements in conditions enabling the security of their systems and/or data to be ensured and, more generally, to use and operate it in the same conditions as regards security.</para><para>The fact that you are presently reading this means that you have had knowledge of the CeCILL license and that you accept its terms. ---------------------------------------</para><para><ref refid="nfs__client__id_8c" kindref="compound">nfs_client_id.c</ref> : The management of the client id cache.</para><para>$Header$</para><para>$Log$ </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="99"/>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long client_id_value_hash_func</definition>
        <argsstring>(hash_parameter_t *p_hparam, hash_buffer_t *buffclef)</argsstring>
        <name>client_id_value_hash_func</name>
        <param>
          <type>hash_parameter_t *</type>
          <declname>p_hparam</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffclef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>client_id_rbt_hash_func: computes the hash value for the entry in Client Id cache.</para><para>Computes the hash value for the entry in Client Id cache. In fact, it just use addresse as value (identity function) modulo the size of the hash. This function is called internal in the HasTable_* function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hparam</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] hash table parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffcleff</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] pointer to the hash key buffer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the computed hash value.</para></simplesect>
<simplesect kind="see"><para>HashTable_Init </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="124" bodystart="123" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long client_id_value_hash_func_reverse</definition>
        <argsstring>(hash_parameter_t *p_hparam, hash_buffer_t *buffclef)</argsstring>
        <name>client_id_value_hash_func_reverse</name>
        <param>
          <type>hash_parameter_t *</type>
          <declname>p_hparam</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffclef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>client_id_reverse_hash_func: computes the hash value for the entry in Client Id cache.</para><para>Computes the hash value for the entry in Client Id cache. In fact, it just use addresse as value (identity function) modulo the size of the hash. This function is called internal in the HasTable_* function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hparam</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] hash table parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffcleff</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] pointer to the hash key buffer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the computed hash value.</para></simplesect>
<simplesect kind="see"><para>HashTable_Init </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="154" bodystart="153" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long client_id_rbt_hash_func</definition>
        <argsstring>(hash_parameter_t *p_hparam, hash_buffer_t *buffclef)</argsstring>
        <name>client_id_rbt_hash_func</name>
        <param>
          <type>hash_parameter_t *</type>
          <declname>p_hparam</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffclef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>client_id_rbt_hash_func: computes the rbt value for the entry in Client Id cache.</para><para>Computes the rbt value for the entry in Client Id cache. In fact, it just use the address value itself (which is an unsigned integer) as the rbt value. This function is called internal in the HasTable_* function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hparam</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] hash table parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffcleff[in]</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the hash key buffer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the computed rbt value.</para></simplesect>
<simplesect kind="see"><para>HashTable_Init </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="182" bodystart="181" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long client_id_rbt_hash_func_reverse</definition>
        <argsstring>(hash_parameter_t *p_hparam, hash_buffer_t *buffclef)</argsstring>
        <name>client_id_rbt_hash_func_reverse</name>
        <param>
          <type>hash_parameter_t *</type>
          <declname>p_hparam</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffclef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="196" bodystart="195" bodyend="204"/>
        <references refid="test__clientid__full_8c_1a0" compoundref="test__clientid__full_8c" startline="46" endline="142">nfs_client_id_compute</references>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare_client_id</definition>
        <argsstring>(hash_buffer_t *buff1, hash_buffer_t *buff2)</argsstring>
        <name>compare_client_id</name>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buff1</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buff2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compare_client_id: compares the ip address stored in the key buffers.</para><para>compare the ip address stored in the key buffers. This function is to be used as &apos;compare_key&apos; field in the hashtable storing the nfs duplicated requests.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buff1</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] first key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff2</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] second key</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if keys are identifical, 1 if they are different. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="220" bodystart="219" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare_client_id_reverse</definition>
        <argsstring>(hash_buffer_t *buff1, hash_buffer_t *buff2)</argsstring>
        <name>compare_client_id_reverse</name>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buff1</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buff2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="227" bodystart="226" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int display_client_id</definition>
        <argsstring>(hash_buffer_t *pbuff, char *str)</argsstring>
        <name>display_client_id</name>
        <param>
          <type>hash_buffer_t *</type>
          <declname>pbuff</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>display_client_id: displays the client_id stored in the buffer.</para><para>displays the client_id stored in the buffer. This function is to be used as &apos;key_to_str&apos; field in the hashtable storing the nfs duplicated requests.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buff1</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] buffer to display </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff2</parametername>
</parameternamelist>
<parameterdescription>
<para>[OUT] output string</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of character written. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="248" bodystart="247" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int display_client_id_reverse</definition>
        <argsstring>(hash_buffer_t *pbuff, char *str)</argsstring>
        <name>display_client_id_reverse</name>
        <param>
          <type>hash_buffer_t *</type>
          <declname>pbuff</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="257" bodystart="256" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int display_client_id_val</definition>
        <argsstring>(hash_buffer_t *pbuff, char *str)</argsstring>
        <name>display_client_id_val</name>
        <param>
          <type>hash_buffer_t *</type>
          <declname>pbuff</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="263" bodystart="262" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nfs_client_id_add</definition>
        <argsstring>(clientid4 clientid, nfs_client_id_t client_record, nfs_client_id_t *nfs_client_id_pool)</argsstring>
        <name>nfs_client_id_add</name>
        <param>
          <type>clientid4</type>
          <declname>clientid</declname>
        </param>
        <param>
          <type>nfs_client_id_t</type>
          <declname>client_record</declname>
        </param>
        <param>
          <type>nfs_client_id_t *</type>
          <declname>nfs_client_id_pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>nfs_client_id_add: adds an entry in the duplicate requests cache.</para><para>Adds an entry in the duplicate requests cache.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clientid</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] the client id used as key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client_record</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] the candidate record for the client </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nfs_client_id_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>[INOUT] values pool for hash table</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CLIENT_ID_SUCCESS if successfull<linebreak/>
. </para><para>CLIENT_ID_INSERT_MALLOC_ERROR if an error occured during the insertion process <linebreak/>
 </para><para>CLIENT_ID_NETDB_ERROR if an error occured during the netdb query (via gethostbyaddr). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="295" bodystart="292" bodyend="360"/>
        <references refid="nfs__client__id_8c_1a0" compoundref="nfs__client__id_8c" startline="102">ht_client_id</references>
        <references refid="nfs__client__id_8c_1a1" compoundref="nfs__client__id_8c" startline="103">ht_client_id_reverse</references>
        <references refid="exports_8c_1a60" compoundref="test__clientid_8c" startline="146">nfs_param</references>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nfs_client_id_set</definition>
        <argsstring>(clientid4 clientid, nfs_client_id_t client_record, nfs_client_id_t *nfs_client_id_pool)</argsstring>
        <name>nfs_client_id_set</name>
        <param>
          <type>clientid4</type>
          <declname>clientid</declname>
        </param>
        <param>
          <type>nfs_client_id_t</type>
          <declname>client_record</declname>
        </param>
        <param>
          <type>nfs_client_id_t *</type>
          <declname>nfs_client_id_pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>nfs_client_id_sets: sets an entry that already exists.</para><para>Sets an entry that already exists</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clientid</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] the client id used as key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client_record</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] the candidate record for the client </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nfs_client_id_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>[INOUT] values pool for hash table</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CLIENT_ID_SUCCESS if successfull<linebreak/>
. </para><para>CLIENT_ID_INSERT_MALLOC_ERROR if an error occured during the insertion process <linebreak/>
 </para><para>CLIENT_ID_NETDB_ERROR if an error occured during the netdb query (via gethostbyaddr). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="381" bodystart="378" bodyend="440"/>
        <references refid="nfs__client__id_8c_1a0" compoundref="nfs__client__id_8c" startline="102">ht_client_id</references>
        <references refid="nfs__client__id_8c_1a1" compoundref="nfs__client__id_8c" startline="103">ht_client_id_reverse</references>
        <references refid="exports_8c_1a60" compoundref="test__clientid_8c" startline="146">nfs_param</references>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nfs_client_id_get</definition>
        <argsstring>(clientid4 clientid, nfs_client_id_t *client_id_res)</argsstring>
        <name>nfs_client_id_get</name>
        <param>
          <type>clientid4</type>
          <declname>clientid</declname>
        </param>
        <param>
          <type>nfs_client_id_t *</type>
          <declname>client_id_res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>nfs_client_id_get: Tries to get an entry for client_id cache.</para><para>Tries to get an entry for client_id cache.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clientid</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] the client id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resclientid</parametername>
</parameternamelist>
<parameterdescription>
<para>[OUT] the found client id</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the result previously set if *pstatus == CLIENT_ID_SUCCESS </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="456" bodystart="454" bodyend="497"/>
        <references refid="nfs__client__id_8c_1a0" compoundref="nfs__client__id_8c" startline="102">ht_client_id</references>
        <references refid="nfs__client__id_8c_1a1" compoundref="nfs__client__id_8c" startline="103">ht_client_id_reverse</references>
        <referencedby refid="nfs__state__id_8c_1a15" compoundref="nfs__state__id_8c" startline="387" endline="448">nfs4_Check_Stateid</referencedby>
        <referencedby refid="nfs4__tools_8c_1a2" compoundref="nfs4__tools_8c" startline="149" endline="174">nfs4_is_lease_expired</referencedby>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nfs_client_id_get_reverse</definition>
        <argsstring>(char *key, nfs_client_id_t *client_id_res)</argsstring>
        <name>nfs_client_id_get_reverse</name>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>nfs_client_id_t *</type>
          <declname>client_id_res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="501" bodystart="499" bodyend="526"/>
        <references refid="nfs__client__id_8c_1a1" compoundref="nfs__client__id_8c" startline="103">ht_client_id_reverse</references>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nfs_client_id_remove</definition>
        <argsstring>(clientid4 clientid, nfs_client_id_t *nfs_client_id_pool)</argsstring>
        <name>nfs_client_id_remove</name>
        <param>
          <type>clientid4</type>
          <declname>clientid</declname>
        </param>
        <param>
          <type>nfs_client_id_t *</type>
          <declname>nfs_client_id_pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>nfs_client_id_remove: Tries to remove an entry for client_id cache</para><para>Tries to remove an entry for client_id cache.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clientid</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] the clientid to be used as key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nfs_client_id_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>[INOUT] values pool for hash table</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the result previously set if *pstatus == CLIENT_ID_SUCCESS </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="543" bodystart="541" bodyend="585"/>
        <references refid="nfs__client__id_8c_1a0" compoundref="nfs__client__id_8c" startline="102">ht_client_id</references>
        <references refid="nfs__client__id_8c_1a1" compoundref="nfs__client__id_8c" startline="103">ht_client_id_reverse</references>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nfs_Init_client_id</definition>
        <argsstring>(nfs_client_id_parameter_t param)</argsstring>
        <name>nfs_Init_client_id</name>
        <param>
          <type>nfs_client_id_parameter_t</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>nfs_Init_client_id: Init the hashtable for Client Id cache.</para><para>Perform all the required initialization for hashtable Client Id cache</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] parameter used to init the duplicate request cache</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, -1 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="601" bodystart="600" bodyend="609"/>
        <references refid="nfs__client__id_8c_1a0" compoundref="nfs__client__id_8c" startline="102">ht_client_id</references>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nfs_Init_client_id_reverse</definition>
        <argsstring>(nfs_client_id_parameter_t param)</argsstring>
        <name>nfs_Init_client_id_reverse</name>
        <param>
          <type>nfs_client_id_parameter_t</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>nfs_Init_client_id_reverse: Init the reverse hashtable for Client Id cache.</para><para>Perform all the required initialization for hashtable Client Id cache</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>[IN] parameter used to init the duplicate request cache</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, -1 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="623" bodystart="622" bodyend="631"/>
        <references refid="nfs__client__id_8c_1a1" compoundref="nfs__client__id_8c" startline="103">ht_client_id_reverse</references>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nfs_client_id_compute</definition>
        <argsstring>(char *name, clientid4 *pclientid)</argsstring>
        <name>nfs_client_id_compute</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>clientid4 *</type>
          <declname>pclientid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>nfs_client_id_compute: computes the client id, based on the string.</para><para>Computes the client id, based on the string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="646" bodystart="644" bodyend="742"/>
        <references refid="nfs__state__id_8c_1a3">strnlen</references>
      </memberdef>
      <memberdef kind="function" id="nfs__client__id_8c_1a21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nfs_client_id_sha1_compute</definition>
        <argsstring>(char *name, clientid4 *pclientid)</argsstring>
        <name>nfs_client_id_sha1_compute</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>clientid4 *</type>
          <declname>pclientid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>nfs_client_id_sha1_compute: computes the client id, based on the string, with SHA1 algorithm</para><para>Computes the client id, based on the string, with SHA1 algorithm. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="754" bodystart="752" bodyend="782"/>
        <references refid="SHA1_8c_1a3" compoundref="SHA1_8c" startline="152" endline="191">SHA1Final</references>
        <references refid="SHA1_8c_1a1" compoundref="SHA1_8c" startline="91" endline="100">SHA1Init</references>
        <references refid="SHA1_8c_1a2" compoundref="SHA1_8c" startline="119" endline="138">SHA1Update</references>
        <referencedby refid="test__clientid_8c_1a1" compoundref="test__clientid_8c" startline="148" endline="167">main</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="nfs__client__id_8c_1a0" prot="public" static="no" volatile="no" mutable="no">
        <type>hash_table_t *</type>
        <definition>hash_table_t* ht_client_id</definition>
        <argsstring></argsstring>
        <name>ht_client_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="102" bodystart="102" bodyend="-1"/>
        <referencedby refid="nfs__client__id_8c_1a13" compoundref="nfs__client__id_8c" startline="292" endline="360">nfs_client_id_add</referencedby>
        <referencedby refid="nfs__client__id_8c_1a15" compoundref="nfs__client__id_8c" startline="454" endline="497">nfs_client_id_get</referencedby>
        <referencedby refid="nfs__client__id_8c_1a17" compoundref="nfs__client__id_8c" startline="541" endline="585">nfs_client_id_remove</referencedby>
        <referencedby refid="nfs__client__id_8c_1a14" compoundref="nfs__client__id_8c" startline="378" endline="440">nfs_client_id_set</referencedby>
        <referencedby refid="nfs__client__id_8c_1a18" compoundref="nfs__client__id_8c" startline="600" endline="609">nfs_Init_client_id</referencedby>
      </memberdef>
      <memberdef kind="variable" id="nfs__client__id_8c_1a1" prot="public" static="no" volatile="no" mutable="no">
        <type>hash_table_t *</type>
        <definition>hash_table_t* ht_client_id_reverse</definition>
        <argsstring></argsstring>
        <name>ht_client_id_reverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="103" bodystart="103" bodyend="-1"/>
        <referencedby refid="nfs__client__id_8c_1a13" compoundref="nfs__client__id_8c" startline="292" endline="360">nfs_client_id_add</referencedby>
        <referencedby refid="nfs__client__id_8c_1a15" compoundref="nfs__client__id_8c" startline="454" endline="497">nfs_client_id_get</referencedby>
        <referencedby refid="nfs__client__id_8c_1a16" compoundref="nfs__client__id_8c" startline="499" endline="526">nfs_client_id_get_reverse</referencedby>
        <referencedby refid="nfs__client__id_8c_1a17" compoundref="nfs__client__id_8c" startline="541" endline="585">nfs_client_id_remove</referencedby>
        <referencedby refid="nfs__client__id_8c_1a14" compoundref="nfs__client__id_8c" startline="378" endline="440">nfs_client_id_set</referencedby>
        <referencedby refid="nfs__client__id_8c_1a19" compoundref="nfs__client__id_8c" startline="622" endline="631">nfs_Init_client_id_reverse</referencedby>
      </memberdef>
      <memberdef kind="variable" id="nfs__client__id_8c_1a2" prot="public" static="no" volatile="no" mutable="no">
        <type>nfs_parameter_t</type>
        <definition>nfs_parameter_t nfs_param</definition>
        <argsstring></argsstring>
        <name>nfs_param</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c" line="104" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="82"><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;HashData.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;HashTable.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;log_functions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stuff_alloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nfs_core.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nfs_exports.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config_parsing.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nfs4.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SHA1.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">size_t<sp/><ref refid="nfs__state__id_8c_1a3" kindref="member">strnlen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/>size_t<sp/>maxlen);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hashtable<sp/>used<sp/>to<sp/>cache<sp/>the<sp/>hostname,<sp/>accessed<sp/>by<sp/>their<sp/>IP<sp/>addess<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="nfs__client__id_8c_1a0" refkind="member"><highlight class="normal">hash_table_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>ht_client_id<sp/>;<sp/></highlight></codeline>
<codeline lineno="103" refid="nfs__client__id_8c_1a1" refkind="member"><highlight class="normal">hash_table_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>ht_client_id_reverse<sp/>;<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>nfs_parameter_t<sp/><sp/><sp/><sp/>nfs_param<sp/>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="nfs__client__id_8c_1a4" refkind="member"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a4" kindref="member">client_id_value_hash_func</ref>(<sp/>hash_parameter_t<sp/>*<sp/>p_hparam,<sp/>hash_buffer_t<sp/>*<sp/>buffclef<sp/>)<sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hash_func<sp/>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>clientid4<sp/><sp/><sp/><sp/>clientid<sp/>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>clientid<sp/>=<sp/>*((clientid4<sp/>*)(buffclef-&gt;pdata))<sp/>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sum<sp/>upper<sp/>and<sp/>lower<sp/>32bits<sp/>fields<sp/>to<sp/>build<sp/>the<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>hash_func<sp/>=<sp/>(<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long)(<sp/>clientid<sp/>&amp;0x00000000FFFFFFFFLL<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long)(<sp/>clientid<sp/>&gt;&gt;<sp/>32<sp/>)<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash_func<sp/>%<sp/>p_hparam-&gt;index_size<sp/>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/><sp/>client_id_value_hash_func<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="nfs__client__id_8c_1a5" refkind="member"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a5" kindref="member">client_id_value_hash_func_reverse</ref>(<sp/>hash_parameter_t<sp/>*<sp/>p_hparam,<sp/>hash_buffer_t<sp/>*<sp/>buffclef<sp/>)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>sum<sp/>=<sp/>0<sp/>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0<sp/>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>sum<sp/>of<sp/>all<sp/>the<sp/>characters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0<sp/>,<sp/>c<sp/>=<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)buffclef-&gt;pdata)[0]<sp/>;<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)buffclef-&gt;pdata)[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>;<sp/>c=((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)buffclef-&gt;pdata)[++i],<sp/>sum<sp/>+=<sp/>c<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long)(<sp/>sum<sp/>%<sp/>p_hparam-&gt;index_size<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/><sp/>client_id_reverse_value_hash_func<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="nfs__client__id_8c_1a6" refkind="member"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a6" kindref="member">client_id_rbt_hash_func</ref>(<sp/>hash_parameter_t<sp/>*<sp/>p_hparam,<sp/>hash_buffer_t<sp/>*<sp/>buffclef<sp/>)<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hash_func<sp/>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>clientid4<sp/><sp/><sp/><sp/>clientid<sp/>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>clientid<sp/>=<sp/>*((clientid4<sp/>*)(buffclef-&gt;pdata))<sp/>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Xor<sp/>upper<sp/>and<sp/>lower<sp/>32bits<sp/>fields<sp/>to<sp/>build<sp/>the<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>hash_func<sp/>=<sp/>(<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long)(<sp/>clientid<sp/>&amp;<sp/>0x00000000FFFFFFFFLL<sp/>)<sp/>^<sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long)(<sp/>clientid<sp/>&gt;&gt;<sp/>32<sp/>)<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash_func<sp/>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>client_id_rbt_hash_func<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="nfs__client__id_8c_1a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a7" kindref="member">client_id_rbt_hash_func_reverse</ref>(<sp/>hash_parameter_t<sp/>*<sp/>p_hparam,<sp/>hash_buffer_t<sp/>*<sp/>buffclef<sp/>)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>clientid4<sp/><sp/>result<sp/>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="test__clientid__full_8c_1a0" kindref="member">nfs_client_id_compute</ref>(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)buffclef-&gt;pdata,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;result<sp/>)<sp/>!=<sp/>CLIENT_ID_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0<sp/>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long)(result<sp/>&amp;<sp/>0x00000000FFFFFFFFLL<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>ip_name_rbt_hash_func<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="nfs__client__id_8c_1a8" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a8" kindref="member">compare_client_id</ref>(<sp/><sp/>hash_buffer_t<sp/>*<sp/>buff1,<sp/>hash_buffer_t<sp/>*<sp/>buff2<sp/>)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>clientid4<sp/>cl1<sp/>=<sp/>*((clientid4<sp/>*)(buff1-&gt;pdata))<sp/>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>clientid4<sp/>cl2<sp/>=<sp/>*((clientid4<sp/>*)(buff2-&gt;pdata))<sp/>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(cl1<sp/>==<sp/>cl2)?0:1<sp/>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>compare_xid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="nfs__client__id_8c_1a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a9" kindref="member">compare_client_id_reverse</ref>(<sp/><sp/>hash_buffer_t<sp/>*<sp/>buff1,<sp/>hash_buffer_t<sp/>*<sp/>buff2<sp/>)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>cl1<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(buff1-&gt;pdata)<sp/>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>cl2<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(buff2-&gt;pdata)<sp/>;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strncmp(<sp/>cl1,<sp/>cl2,<sp/>MAXNAMLEN<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>compare_xid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="nfs__client__id_8c_1a10" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a10" kindref="member">display_client_id</ref>(<sp/>hash_buffer_t<sp/>*<sp/>pbuff,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>str<sp/>)<sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>clientid4<sp/>clientid<sp/>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>clientid<sp/>=<sp/>*((clientid4<sp/>*)(pbuff-&gt;pdata))<sp/>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sprintf(<sp/>str,<sp/></highlight><highlight class="stringliteral">&quot;%llu&quot;</highlight><highlight class="normal">,<sp/>clientid<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>display_client_id<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="nfs__client__id_8c_1a11" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a11" kindref="member">display_client_id_reverse</ref>(<sp/>hash_buffer_t<sp/>*<sp/>pbuff,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>str<sp/>)<sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sprintf(<sp/>str,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(pbuff-&gt;pdata)<sp/>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>display_client_id_reverse<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="nfs__client__id_8c_1a12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a12" kindref="member">display_client_id_val</ref>(<sp/>hash_buffer_t<sp/>*<sp/>pbuff,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>str<sp/>)<sp/></highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/>nfs_client_id_t<sp/>*<sp/>precord<sp/>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/>precord<sp/>=<sp/>(nfs_client_id_t<sp/>*)(pbuff-&gt;pdata)<sp/>;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sprintf(<sp/>str,<sp/></highlight><highlight class="stringliteral">&quot;#%s#=&gt;%llu<sp/>cb_prog=%u<sp/>r_addr=%s<sp/>r_netid=%s&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precord-&gt;client_name,<sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precord-&gt;clientid,<sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precord-&gt;cb_program,<sp/></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precord-&gt;client_r_addr,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precord-&gt;client_r_netid<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>display_client_id_val<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="nfs__client__id_8c_1a13" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a13" kindref="member">nfs_client_id_add</ref>(<sp/><sp/>clientid4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clientid,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfs_client_id_t<sp/><sp/><sp/>client_record,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfs_client_id_t<sp/>*<sp/>nfs_client_id_pool<sp/>)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>hash_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffkey<sp/><sp/>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>hash_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffdata<sp/>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>hash_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffkey_reverse<sp/><sp/>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>hash_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffdata_reverse<sp/>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>nfs_client_id_t<sp/><sp/><sp/>*<sp/>pnfs_client_id<sp/><sp/>=<sp/>NULL<sp/>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>clientid4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pclientid<sp/>=<sp/>NULL<sp/>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>BuddySetDebugLabel(<sp/></highlight><highlight class="stringliteral">&quot;nfs_client_id_t&quot;</highlight><highlight class="normal"><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Entry<sp/>to<sp/>be<sp/>cached<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>GET_PREALLOC(<sp/>pnfs_client_id,<sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfs_client_id_pool,<sp/></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="exports_8c_1a60" kindref="member">nfs_param</ref>.worker_param.nb_client_id_prealloc,<sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfs_client_id_t,<sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_alloc<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>BuddySetDebugLabel(<sp/></highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal"><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="319"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pnfs_client_id<sp/>==<sp/>NULL<sp/>)<sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INSERT_MALLOC_ERROR<sp/>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pclientid<sp/>=<sp/>(clientid4<sp/>*)Mem_Alloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>clientid4<sp/>)<sp/>)<sp/>)<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INSERT_MALLOC_ERROR<sp/>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>buffkey_reverse.pdata<sp/>=<sp/>(caddr_t)Mem_Alloc(<sp/>MAXNAMLEN<sp/>)<sp/>)<sp/>==<sp/>NULL<sp/>)<sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INSERT_MALLOC_ERROR<sp/>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>I<sp/>have<sp/>to<sp/>keep<sp/>an<sp/>integer<sp/>as<sp/>key,<sp/>I<sp/>wil<sp/>use<sp/>the<sp/>pointer<sp/>buffkey-&gt;pdata<sp/>for<sp/>this,<sp/></highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/>*<sp/>this<sp/>also<sp/>means<sp/>that<sp/>buffkey-&gt;len<sp/>will<sp/>be<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>*pclientid<sp/>=<sp/>clientid<sp/>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>buffkey.pdata<sp/>=<sp/>(caddr_t)pclientid<sp/>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>buffkey.len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>clientid<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>*pnfs_client_id<sp/>=<sp/>client_record<sp/>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>buffdata.pdata<sp/>=<sp/>(caddr_t)pnfs_client_id<sp/>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>buffdata.len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>nfs_client_id_t<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>HashTable_Test_And_Set(<sp/><ref refid="nfs__client__id_8c_1a0" kindref="member">ht_client_id</ref>,<sp/>&amp;buffkey,<sp/>&amp;buffdata,<sp/>HASHTABLE_SET_HOW_SET_NO_OVERWRITE<sp/>)<sp/>!=<sp/>HASHTABLE_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INSERT_MALLOC_ERROR<sp/>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Keep<sp/>information<sp/>in<sp/>reverse<sp/>hash<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>strncpy(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(buffkey_reverse.pdata),<sp/>client_record.client_name,<sp/>MAXNAMLEN<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>buffkey_reverse.len<sp/>=<sp/>MAXNAMLEN<sp/>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>buffdata_reverse.pdata<sp/>=<sp/>(caddr_t)pnfs_client_id<sp/>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>buffdata_reverse.len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>nfs_client_id_t<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>HashTable_Test_And_Set(<sp/><ref refid="nfs__client__id_8c_1a1" kindref="member">ht_client_id_reverse</ref>,<sp/>&amp;buffkey_reverse,<sp/>&amp;buffdata_reverse,<sp/>HASHTABLE_SET_HOW_SET_NO_OVERWRITE<sp/>)<sp/>!=<sp/>HASHTABLE_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INSERT_MALLOC_ERROR<sp/>;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_PRINTF_DEBUG_CLIENT_ID_COMPUTE</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;-=-=-=-=-=-=-=-=-=-&gt;<sp/>ht_client_id<sp/>\n&quot;</highlight><highlight class="normal"><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>HashTable_Print(<sp/><ref refid="nfs__client__id_8c_1a0" kindref="member">ht_client_id</ref><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;-=-=-=-=-=-=-=-=-=-&gt;<sp/>ht_client_id_reverse<sp/>\n&quot;</highlight><highlight class="normal"><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>HashTable_Print(<sp/><ref refid="nfs__client__id_8c_1a1" kindref="member">ht_client_id_reverse</ref><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="358"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_SUCCESS<sp/>;<sp/></highlight></codeline>
<codeline lineno="360"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>nfs_client_id_add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="nfs__client__id_8c_1a14" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a14" kindref="member">nfs_client_id_set</ref>(<sp/><sp/>clientid4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clientid,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfs_client_id_t<sp/><sp/><sp/>client_record,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfs_client_id_t<sp/>*<sp/>nfs_client_id_pool<sp/>)</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>hash_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffkey<sp/><sp/>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>hash_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffdata<sp/>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>hash_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffkey_reverse<sp/><sp/>;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>hash_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffdata_reverse<sp/>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>nfs_client_id_t<sp/><sp/><sp/>*<sp/>pnfs_client_id<sp/><sp/>=<sp/>NULL<sp/>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>clientid4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pclientid<sp/>=<sp/>NULL<sp/>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="390"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>BuddySetDebugLabel(<sp/></highlight><highlight class="stringliteral">&quot;nfs_client_id_t&quot;</highlight><highlight class="normal"><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Entry<sp/>to<sp/>be<sp/>cached<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>GET_PREALLOC(<sp/>pnfs_client_id,<sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfs_client_id_pool,<sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="exports_8c_1a60" kindref="member">nfs_param</ref>.worker_param.nb_client_id_prealloc,<sp/></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfs_client_id_t,<sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_alloc<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>BuddySetDebugLabel(<sp/></highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal"><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pnfs_client_id<sp/>==<sp/>NULL<sp/>)<sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INSERT_MALLOC_ERROR<sp/>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pclientid<sp/>=<sp/>(clientid4<sp/>*)Mem_Alloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>clientid4<sp/>)<sp/>)<sp/>)<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INSERT_MALLOC_ERROR<sp/>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>buffkey_reverse.pdata<sp/>=<sp/>(caddr_t)Mem_Alloc(<sp/>MAXNAMLEN<sp/>)<sp/>)<sp/>==<sp/>NULL<sp/>)<sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INSERT_MALLOC_ERROR<sp/>;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>I<sp/>have<sp/>to<sp/>keep<sp/>an<sp/>integer<sp/>as<sp/>key,<sp/>I<sp/>wil<sp/>use<sp/>the<sp/>pointer<sp/>buffkey-&gt;pdata<sp/>for<sp/>this,<sp/></highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/><sp/>*<sp/>this<sp/>also<sp/>means<sp/>that<sp/>buffkey-&gt;len<sp/>will<sp/>be<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>*pclientid<sp/>=<sp/>clientid<sp/>;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>buffkey.pdata<sp/>=<sp/>(caddr_t)pclientid<sp/>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>buffkey.len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>clientid<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>*pnfs_client_id<sp/>=<sp/>client_record<sp/>;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>buffdata.pdata<sp/>=<sp/>(caddr_t)pnfs_client_id<sp/>;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>buffdata.len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>nfs_client_id_t<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>HashTable_Test_And_Set(<sp/><ref refid="nfs__client__id_8c_1a0" kindref="member">ht_client_id</ref>,<sp/>&amp;buffkey,<sp/>&amp;buffdata,<sp/>HASHTABLE_SET_HOW_SET_OVERWRITE<sp/>)<sp/>!=<sp/>HASHTABLE_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INSERT_MALLOC_ERROR<sp/>;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reverse<sp/>hashtable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>strncpy(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(buffkey_reverse.pdata),<sp/>client_record.client_name,<sp/>MAXNAMLEN<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>buffkey_reverse.len<sp/>=<sp/>MAXNAMLEN<sp/>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>buffdata_reverse.pdata<sp/>=<sp/>(caddr_t)pnfs_client_id<sp/>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>buffdata_reverse.len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>nfs_client_id_t<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>HashTable_Test_And_Set(<sp/><ref refid="nfs__client__id_8c_1a1" kindref="member">ht_client_id_reverse</ref>,<sp/>&amp;buffkey_reverse,<sp/>&amp;buffdata_reverse,<sp/>HASHTABLE_SET_HOW_SET_OVERWRITE<sp/>)<sp/>!=<sp/>HASHTABLE_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INSERT_MALLOC_ERROR<sp/>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_SUCCESS<sp/>;<sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>nfs_client_id_set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="nfs__client__id_8c_1a15" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="nfs__client__id_8c_1a15" kindref="member">nfs_client_id_get</ref>(<sp/>clientid4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clientid,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfs_client_id_t<sp/>*<sp/>client_id_res<sp/>)</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>hash_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffkey<sp/>;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>hash_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffval<sp/>;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>nfs_client_id_t<sp/><sp/><sp/>*<sp/>pnfs_client_id<sp/>=<sp/>NULL<sp/>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>clientid4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pclientid<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL<sp/>;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>client_id_res<sp/>==<sp/>NULL<sp/>)<sp/></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INVALID_ARGUMENT<sp/>;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pclientid<sp/>=<sp/>(clientid4<sp/>*)Mem_Alloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>clientid4<sp/>)<sp/>)<sp/>)<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INSERT_MALLOC_ERROR<sp/>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>*pclientid<sp/>=<sp/>clientid<sp/>;<sp/></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>buffkey.pdata<sp/>=<sp/>(caddr_t)pclientid<sp/>;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>buffkey.len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>clientid4<sp/>)<sp/><sp/>;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>HashTable_Get(<sp/><ref refid="nfs__client__id_8c_1a0" kindref="member">ht_client_id</ref>,<sp/>&amp;buffkey,<sp/>&amp;buffval<sp/>)<sp/>==<sp/>HASHTABLE_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pnfs_client_id<sp/>=<sp/>(nfs_client_id_t<sp/>*)buffval.pdata<sp/>;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*client_id_res<sp/>=<sp/>*pnfs_client_id<sp/>;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>CLIENT_ID_SUCCESS<sp/>;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_PRINTF_DEBUG_CLIENT_ID_COMPUTE</highlight></codeline>
<codeline lineno="481"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;-=-=-=-=-=-=-=-=-=-&gt;<sp/>ht_client_id<sp/>\n&quot;</highlight><highlight class="normal"><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HashTable_Print(<sp/><ref refid="nfs__client__id_8c_1a0" kindref="member">ht_client_id</ref><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;-=-=-=-=-=-=-=-=-=-&gt;<sp/>ht_client_id_reverse<sp/>\n&quot;</highlight><highlight class="normal"><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HashTable_Print(<sp/><ref refid="nfs__client__id_8c_1a1" kindref="member">ht_client_id_reverse</ref><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="486"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>CLIENT_ID_NOT_FOUND<sp/>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>the<sp/>allocated<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>Mem_Free(<sp/>pclientid<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status<sp/>;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>nfs_client_id_get<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="nfs__client__id_8c_1a16" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="nfs__client__id_8c_1a16" kindref="member">nfs_client_id_get_reverse</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfs_client_id_t<sp/>*<sp/>client_id_res<sp/>)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>hash_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffkey<sp/>;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>hash_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffval<sp/>;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>nfs_client_id_t<sp/><sp/><sp/>*<sp/>pnfs_client_id<sp/>=<sp/>NULL<sp/>;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>client_id_res<sp/>==<sp/>NULL<sp/>)<sp/></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INVALID_ARGUMENT<sp/>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>buffkey.pdata<sp/>=<sp/>(caddr_t)key<sp/>;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>buffkey.len<sp/>=<sp/>MAXNAMLEN<sp/>;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>HashTable_Get(<sp/><ref refid="nfs__client__id_8c_1a1" kindref="member">ht_client_id_reverse</ref>,<sp/>&amp;buffkey,<sp/>&amp;buffval<sp/>)<sp/>==<sp/>HASHTABLE_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pnfs_client_id<sp/>=<sp/>(nfs_client_id_t<sp/>*)buffval.pdata<sp/>;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*client_id_res<sp/>=<sp/>*pnfs_client_id<sp/>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>CLIENT_ID_SUCCESS<sp/>;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>CLIENT_ID_NOT_FOUND<sp/>;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status<sp/>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>nfs_client_id_get_reverse<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="nfs__client__id_8c_1a17" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a17" kindref="member">nfs_client_id_remove</ref>(<sp/>clientid4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clientid,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfs_client_id_t<sp/>*<sp/>nfs_client_id_pool<sp/>)</highlight></codeline>
<codeline lineno="543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>hash_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffkey<sp/>,<sp/>old_key,<sp/>old_key_reverse,<sp/>old_value<sp/>;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>nfs_client_id_t<sp/><sp/><sp/>*<sp/>pnfs_client_id<sp/><sp/>=<sp/>NULL<sp/>;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>clientid4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pclientid<sp/>=<sp/>NULL<sp/>;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pclientid<sp/>=<sp/>(clientid4<sp/>*)Mem_Alloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>clientid4<sp/>)<sp/>)<sp/>)<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INSERT_MALLOC_ERROR<sp/>;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>*pclientid<sp/>=<sp/>clientid<sp/>;<sp/></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>buffkey.pdata<sp/>=<sp/>(caddr_t)pclientid<sp/>;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>buffkey.len<sp/>=<sp/>0<sp/>;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>HashTable_Del(<sp/><ref refid="nfs__client__id_8c_1a0" kindref="member">ht_client_id</ref>,<sp/>&amp;buffkey,<sp/>&amp;old_key,<sp/>&amp;old_value<sp/>)<sp/>!=<sp/>HASHTABLE_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>pclientid<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_NOT_FOUND;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>reverse<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/>pnfs_client_id<sp/>=<sp/>(nfs_client_id_t<sp/>*)old_value.pdata<sp/>;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/>buffkey.pdata<sp/>=<sp/>pnfs_client_id-&gt;client_name;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/>buffkey.len<sp/><sp/><sp/>=<sp/>MAXNAMLEN;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>HashTable_Del(<sp/><ref refid="nfs__client__id_8c_1a1" kindref="member">ht_client_id_reverse</ref>,<sp/>&amp;buffkey,<sp/>&amp;old_key_reverse,<sp/>&amp;old_value<sp/>)<sp/>!=<sp/>HASHTABLE_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_PREALLOC(<sp/>pnfs_client_id,<sp/>nfs_client_id_pool,<sp/>next_alloc<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>old_key.pdata<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>pclientid<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_NOT_FOUND;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/>RELEASE_PREALLOC(<sp/>pnfs_client_id,<sp/>nfs_client_id_pool,<sp/>next_alloc<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/>Mem_Free(<sp/>old_key_reverse.pdata<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/>Mem_Free(<sp/>old_key.pdata<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/>Mem_Free(<sp/>pclientid<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_SUCCESS<sp/>;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="585"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>nfs_client_id_remove<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="600" refid="nfs__client__id_8c_1a18" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a18" kindref="member">nfs_Init_client_id</ref>(<sp/>nfs_client_id_parameter_t<sp/><sp/>param<sp/>)<sp/></highlight></codeline>
<codeline lineno="601"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/><ref refid="nfs__client__id_8c_1a0" kindref="member">ht_client_id</ref><sp/>=<sp/>HashTable_Init(<sp/>param.hash_param<sp/><sp/>)<sp/>)<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DisplayLog(<sp/></highlight><highlight class="stringliteral">&quot;NFS<sp/>CLIENT_ID:<sp/>Cannot<sp/>init<sp/>Client<sp/>Id<sp/>cache&quot;</highlight><highlight class="normal"><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1<sp/>;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_SUCCESS;</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>nfs_Init_client_id<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="622" refid="nfs__client__id_8c_1a19" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a19" kindref="member">nfs_Init_client_id_reverse</ref>(<sp/>nfs_client_id_parameter_t<sp/><sp/>param<sp/>)<sp/></highlight></codeline>
<codeline lineno="623"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/><ref refid="nfs__client__id_8c_1a1" kindref="member">ht_client_id_reverse</ref><sp/>=<sp/>HashTable_Init(<sp/>param.hash_param_reverse<sp/>)<sp/>)<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DisplayLog(<sp/></highlight><highlight class="stringliteral">&quot;NFS<sp/>CLIENT_ID:<sp/>Cannot<sp/>init<sp/>Client<sp/>Id<sp/>cache&quot;</highlight><highlight class="normal"><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1<sp/>;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_SUCCESS;</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>nfs_Init_client_id<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="644" refid="nfs__client__id_8c_1a20" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__clientid__full_8c_1a0" kindref="member">nfs_client_id_compute</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>name,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clientid4<sp/>*<sp/>pclientid<sp/>)</highlight></codeline>
<codeline lineno="646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padded_name[CLIENT_ID_MAX_LEN]<sp/>;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>clientid4<sp/><sp/><sp/><sp/>computed_value<sp/>=<sp/>0<sp/>;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0<sp/><sp/>;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0<sp/>;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/>extract<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0<sp/>;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/>sum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0<sp/>;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/>i1<sp/>;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/>i2<sp/>;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/>i3<sp/>;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/>i4<sp/>;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/>i5<sp/>;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/>i6<sp/>;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/>i7<sp/>;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/>i8<sp/>;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/>i9<sp/>;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/>l<sp/><sp/>;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>name<sp/>==<sp/>NULL<sp/>||<sp/>pclientid<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INVALID_ARGUMENT<sp/>;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>memset(<sp/>padded_name,<sp/>0,<sp/>CLIENT_ID_MAX_LEN<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>string<sp/>to<sp/>the<sp/>padded<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/><ref refid="nfs__state__id_8c_1a3" kindref="member">strnlen</ref>(<sp/>name,<sp/>CLIENT_ID_MAX_LEN<sp/>)<sp/>;<sp/>padded_name[i]<sp/>=<sp/>name[i],<sp/>i++<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_PRINTF_DEBUG_CLIENT_ID_COMPUTE</highlight></codeline>
<codeline lineno="673"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>:&quot;</highlight><highlight class="normal">,<sp/>padded_name<sp/>)<sp/>;<sp/></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="675"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>each<sp/>9<sp/>character<sp/>pack:</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/>-<sp/>keep<sp/>the<sp/>7<sp/>first<sp/>bit<sp/>(the<sp/>8th<sp/>is<sp/>often<sp/>0:<sp/>ascii<sp/>string)<sp/></highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/>-<sp/>pack<sp/>7x9<sp/>bit<sp/>to<sp/>63<sp/>bits<sp/>using<sp/>xor</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/>-<sp/>xor<sp/>the<sp/>last<sp/>8th<sp/>bit<sp/>to<sp/>a<sp/>single<sp/>0<sp/>,<sp/>or-ed<sp/>with<sp/>the<sp/>rest</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Proceeding<sp/>with<sp/>the<sp/>next<sp/>9<sp/>bytes<sp/>pack<sp/>will<sp/>produce<sp/>a<sp/>new<sp/>value<sp/>that<sp/>is<sp/>xored<sp/>with<sp/>the<sp/></highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/>*<sp/>one<sp/>of<sp/>the<sp/>previous<sp/>iteration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>offset<sp/>=<sp/>0<sp/>;<sp/>offset<sp/>&lt;<sp/>CLIENT_ID_MAX_LEN<sp/>;<sp/>offset<sp/>+=<sp/>9<sp/>)</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>input<sp/>name<sp/>is<sp/>ascii<sp/>string,<sp/>remove<sp/>8th<sp/>bit<sp/>on<sp/>each<sp/>byte,<sp/>not<sp/>significant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>=<sp/>padded_name[offset+0]<sp/>&amp;<sp/>0x7F<sp/>;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>=<sp/>(uint64_t)(<sp/>padded_name[offset+1]<sp/>&amp;<sp/>0x7F<sp/>)<sp/>&lt;&lt;<sp/>7<sp/>;<sp/></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i3<sp/>=<sp/>(uint64_t)(<sp/>padded_name[offset+2]<sp/>&amp;<sp/>0x7F<sp/>)<sp/>&lt;&lt;<sp/>14<sp/>;<sp/></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i4<sp/>=<sp/>(uint64_t)(<sp/>padded_name[offset+3]<sp/>&amp;<sp/>0x7F<sp/>)<sp/>&lt;&lt;<sp/>21<sp/>;<sp/></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i5<sp/>=<sp/>(uint64_t)(<sp/>padded_name[offset+4]<sp/>&amp;<sp/>0x7F<sp/>)<sp/>&lt;&lt;<sp/>28<sp/>;<sp/></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i6<sp/>=<sp/>(uint64_t)(<sp/>padded_name[offset+5]<sp/>&amp;<sp/>0x7F<sp/>)<sp/>&lt;&lt;<sp/>35<sp/>;<sp/></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i7<sp/>=<sp/>(uint64_t)(<sp/>padded_name[offset+6]<sp/>&amp;<sp/>0x7F<sp/>)<sp/>&lt;&lt;<sp/>42<sp/>;<sp/></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i8<sp/>=<sp/>(uint64_t)(<sp/>padded_name[offset+7]<sp/>&amp;<sp/>0x7F<sp/>)<sp/>&lt;&lt;<sp/>49<sp/>;<sp/></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i9<sp/>=<sp/>(uint64_t)(<sp/>padded_name[offset+8]<sp/>&amp;<sp/>0x7F<sp/>)<sp/>&lt;&lt;<sp/>56<sp/>;<sp/></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>sum<sp/>=<sp/>(uint64_t)padded_name[offset+0]<sp/>+</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint64_t)padded_name[offset+1]<sp/>+</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint64_t)padded_name[offset+2]<sp/>+</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint64_t)padded_name[offset+3]<sp/>+</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint64_t)padded_name[offset+4]<sp/>+</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint64_t)padded_name[offset+5]<sp/>+</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint64_t)padded_name[offset+6]<sp/>+</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint64_t)padded_name[offset+7]<sp/>+</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint64_t)padded_name[offset+8]<sp/>;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_PRINTF_DEBUG_CLIENT_ID_COMPUTE</highlight></codeline>
<codeline lineno="707"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;|%llx<sp/>|%llx<sp/>|%llx<sp/>|%llx<sp/>|%llx<sp/>|%llx<sp/>|%llx<sp/>|%llx<sp/>|%llx<sp/>|<sp/>=<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1,<sp/>i2,<sp/>i3,<sp/>i4,<sp/>i5,<sp/>i6,<sp/>i7,<sp/>i8,<sp/>i9<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="710"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>xor<sp/>combibation<sp/>of<sp/>all<sp/>the<sp/>8h<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>(<sp/>padded_name[offset+0]<sp/>&amp;<sp/>0x80<sp/>)<sp/>^</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>padded_name[offset+1]<sp/>&amp;<sp/>0x80<sp/>)<sp/>^</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>padded_name[offset+2]<sp/>&amp;<sp/>0x80<sp/>)<sp/>^</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>padded_name[offset+3]<sp/>&amp;<sp/>0x80<sp/>)<sp/>^</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>padded_name[offset+4]<sp/>&amp;<sp/>0x80<sp/>)<sp/>^</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>padded_name[offset+5]<sp/>&amp;<sp/>0x80<sp/>)<sp/>^</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>padded_name[offset+6]<sp/>&amp;<sp/>0x80<sp/>)<sp/>^</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>padded_name[offset+7]<sp/>&amp;<sp/>0x80<sp/>)<sp/>^</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>padded_name[offset+8]<sp/>&amp;<sp/>0x80<sp/>)<sp/>^</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>padded_name[offset+9]<sp/>&amp;<sp/>0x80<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extract<sp/>=<sp/>i1<sp/>^<sp/>i2<sp/>^<sp/>i3<sp/>^<sp/>i4<sp/>^<sp/>i5<sp/>^<sp/>i6<sp/>^<sp/>i7<sp/>^<sp/>i8<sp/>^<sp/>i9<sp/>|<sp/>l<sp/>;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_PRINTF_DEBUG_CLIENT_ID_COMPUTE</highlight></codeline>
<codeline lineno="726"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;%llx<sp/>&quot;</highlight><highlight class="normal">,<sp/>extract<sp/>)<sp/>;<sp/></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="728"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>computed_value<sp/>^=<sp/>extract<sp/>;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>computed_value<sp/>^=<sp/>sum<sp/>;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_PRINTF_DEBUG_CLIENT_ID_COMPUTE</highlight></codeline>
<codeline lineno="733"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>)<sp/>;<sp/></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="735"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>computed_value<sp/>=<sp/>(computed_value<sp/>&gt;&gt;<sp/>32<sp/>)<sp/>^<sp/>(computed_value<sp/>&amp;<sp/>0x00000000FFFFFFFFLL<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>*pclientid<sp/>=<sp/>computed_value<sp/>;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_SUCCESS<sp/>;</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>nfs_client_id_compute<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="752" refid="nfs__client__id_8c_1a21" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nfs__client__id_8c_1a21" kindref="member">nfs_client_id_sha1_compute</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>name,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clientid4<sp/>*<sp/>pclientid<sp/>)</highlight></codeline>
<codeline lineno="754"><highlight class="normal">{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/>clientid4<sp/><sp/><sp/><sp/><sp/><sp/>computed_value<sp/>=<sp/>0LL<sp/>;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>sha1digest[SHA1_DIGEST_LENGTH]<sp/>;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_PRINTF_DEBUG_CLIENT_ID_COMPUTE</highlight></codeline>
<codeline lineno="758"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strbuff[80]<sp/>;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>i<sp/>=<sp/>0<sp/>;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="761"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/>SHA1_CTX<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx<sp/>;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>protection[2048]<sp/>;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>name<sp/>==<sp/>NULL<sp/>||<sp/>pclientid<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_INVALID_ARGUMENT<sp/>;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><ref refid="SHA1_8c_1a1" kindref="member">SHA1Init</ref>(<sp/>&amp;ctx<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><ref refid="SHA1_8c_1a2" kindref="member">SHA1Update</ref>(<sp/>&amp;ctx,<sp/>name,<sp/>strlen(<sp/>name<sp/>)<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><ref refid="SHA1_8c_1a3" kindref="member">SHA1Final</ref>(<sp/>sha1digest,<sp/>&amp;ctx<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/>memcpy(<sp/>&amp;computed_value,<sp/>sha1digest,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>clientid4<sp/>)<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/>*pclientid<sp/>=<sp/>(computed_value<sp/>&gt;&gt;<sp/>32<sp/>)<sp/>^<sp/>(computed_value<sp/>&amp;<sp/>0x00000000FFFFFFFFLL<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_PRINTF_DEBUG_CLIENT_ID_COMPUTE</highlight></codeline>
<codeline lineno="777"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>SHA1_DIGEST_LENGTH<sp/>;<sp/>i++<sp/>)<sp/></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>&amp;(strbuff[i*2]),<sp/></highlight><highlight class="stringliteral">&quot;%02x&quot;</highlight><highlight class="normal">,<sp/>sha1digest[i]<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;------------&gt;<sp/>sha1digest<sp/>=<sp/>%s<sp/><sp/>clientid=<sp/>%llx\n&quot;</highlight><highlight class="normal">,<sp/>strbuff,<sp/>*pclientid<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="781"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLIENT_ID_SUCCESS<sp/>;</highlight></codeline>
<codeline lineno="782"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>nfs_client_id_sha1compute<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/opt/philippe/GANESHA/src/support/nfs_client_id.c"/>
  </compounddef>
</doxygen>
