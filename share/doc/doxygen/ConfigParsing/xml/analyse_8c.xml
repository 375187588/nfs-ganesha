<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="analyse_8c" kind="file">
    <compoundname>analyse.c</compoundname>
    <includes local="yes">config.h</includes>
    <includes refid="analyse_8h" local="yes">analyse.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="0">
        <label>analyse.c</label>
        <link refid="analyse.c"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>analyse.h</label>
        <link refid="analyse_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>config.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="analyse_8c_1ab9e49c47a113c09943b6afebde940857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct__generic__item__" kindref="compound">list_items</ref> *</type>
        <definition>list_items* config_CreateItemsList</definition>
        <argsstring>()</argsstring>
        <name>config_CreateItemsList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>create a list of items </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/ConfigParsing/analyse.c" line="39" bodyfile="/export/GANESHA/src/ConfigParsing/analyse.c" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="analyse_8c_1abe9e49a5e342b113519db7bcb9ad8ee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct__generic__item__" kindref="compound">generic_item</ref> *</type>
        <definition>generic_item* config_CreateBlock</definition>
        <argsstring>(char *blockname, list_items *list)</argsstring>
        <name>config_CreateBlock</name>
        <param>
          <type>char *</type>
          <declname>blockname</declname>
        </param>
        <param>
          <type><ref refid="struct__generic__item__" kindref="compound">list_items</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a block item with the given content </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/ConfigParsing/analyse.c" line="50" bodyfile="/export/GANESHA/src/ConfigParsing/analyse.c" bodystart="49" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="analyse_8c_1a19694ceaab9125cba46213b5f0857676" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct__generic__item__" kindref="compound">generic_item</ref> *</type>
        <definition>generic_item* config_CreateAffect</definition>
        <argsstring>(char *varname, char *varval)</argsstring>
        <name>config_CreateAffect</name>
        <param>
          <type>char *</type>
          <declname>varname</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>varval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a key=value peer (assignment) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/ConfigParsing/analyse.c" line="75" bodyfile="/export/GANESHA/src/ConfigParsing/analyse.c" bodystart="74" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="analyse_8c_1a4f7005314a823e91e222533981b18286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void config_AddItem</definition>
        <argsstring>(list_items *list, generic_item *item)</argsstring>
        <name>config_AddItem</name>
        <param>
          <type><ref refid="struct__generic__item__" kindref="compound">list_items</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="struct__generic__item__" kindref="compound">generic_item</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an item to a list as first element </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/ConfigParsing/analyse.c" line="92" bodyfile="/export/GANESHA/src/ConfigParsing/analyse.c" bodystart="91" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="analyse_8c_1a9f5a986cb3a109ffaff0d312fc132442" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_list_ident</definition>
        <argsstring>(FILE *output, list_items *list, unsigned int indent)</argsstring>
        <name>print_list_ident</name>
        <param>
          <type>FILE *</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="struct__generic__item__" kindref="compound">list_items</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Displays the content of a list of blocks. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/ConfigParsing/analyse.c" line="108" bodyfile="/export/GANESHA/src/ConfigParsing/analyse.c" bodystart="107" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="analyse_8c_1a11266361714a3c55a0d585dd118aaec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void config_print_list</definition>
        <argsstring>(FILE *output, list_items *list)</argsstring>
        <name>config_print_list</name>
        <param>
          <type>FILE *</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="struct__generic__item__" kindref="compound">list_items</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Displays the content of a list of blocks. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/ConfigParsing/analyse.c" line="145" bodyfile="/export/GANESHA/src/ConfigParsing/analyse.c" bodystart="144" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="analyse_8c_1a18d2599f71eca120064f5934a1705fc4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void free_list_items_recurse</definition>
        <argsstring>(list_items *list)</argsstring>
        <name>free_list_items_recurse</name>
        <param>
          <type><ref refid="struct__generic__item__" kindref="compound">list_items</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/ConfigParsing/analyse.c" line="152" bodyfile="/export/GANESHA/src/ConfigParsing/analyse.c" bodystart="151" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="analyse_8c_1adc8ddb7f244c0bb2aeb9af15ebd3545c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void config_free_list</definition>
        <argsstring>(list_items *list)</argsstring>
        <name>config_free_list</name>
        <param>
          <type><ref refid="struct__generic__item__" kindref="compound">list_items</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>config_free_list: Free ressources for a list </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/ConfigParsing/analyse.c" line="184" bodyfile="/export/GANESHA/src/ConfigParsing/analyse.c" bodystart="183" bodyend="189"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>vim:expandtab:shiftwidth=8:tabstop=8:</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>CEA/DAM/DIF<sp/><sp/>(2008)</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>contributeur<sp/>:<sp/>Philippe<sp/>DENIEL<sp/><sp/><sp/>philippe.deniel@cea.fr</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thomas<sp/>LEIBOVICI<sp/><sp/>thomas.leibovici@cea.fr</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>---------------------------------------</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="analyse_8h" kindref="compound">analyse.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_STRING_H</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="38" refid="analyse_8h_1ab9e49c47a113c09943b6afebde940857" refkind="member"><highlight class="normal"><ref refid="struct__generic__item__" kindref="compound">list_items</ref><sp/>*<ref refid="analyse_8c_1ab9e49c47a113c09943b6afebde940857" kindref="member">config_CreateItemsList</ref>()</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="struct__generic__item__" kindref="compound">list_items</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="struct__generic__item__" kindref="compound">list_items</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct__generic__item__" kindref="compound">list_items</ref>));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>(*new)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="analyse_8h_1abe9e49a5e342b113519db7bcb9ad8ee3" refkind="member"><highlight class="normal"><ref refid="struct__generic__item__" kindref="compound">generic_item</ref><sp/>*<ref refid="analyse_8c_1abe9e49a5e342b113519db7bcb9ad8ee3" kindref="member">config_CreateBlock</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*blockname,<sp/><ref refid="struct__generic__item__" kindref="compound">list_items</ref><sp/>*<sp/>list)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="struct__generic__item__" kindref="compound">generic_item</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="struct__generic__item__" kindref="compound">generic_item</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct__generic__item__" kindref="compound">generic_item</ref>));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;<ref refid="struct__generic__item___1af77ca55baaf1e7a9d534c941f9d2f812" kindref="member">type</ref><sp/>=<sp/><ref refid="analyse_8h_1a6f3f9bfbd10818ff5891c0f505f79613abd5d7984039c921fb93343162a574853" kindref="member">TYPE_BLOCK</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>strncpy(new-&gt;item.block.block_name,<sp/>blockname,<sp/><ref refid="analyse_8h_1ab64c24e21a46ddfe0f4168c16b882846" kindref="member">MAXSTRLEN</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(list)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;item.block.block_content<sp/>=<sp/>*list;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(list);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;item.block.block_content<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="analyse_8h_1a19694ceaab9125cba46213b5f0857676" refkind="member"><highlight class="normal"><ref refid="struct__generic__item__" kindref="compound">generic_item</ref><sp/>*<ref refid="analyse_8c_1a19694ceaab9125cba46213b5f0857676" kindref="member">config_CreateAffect</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*varname,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*varval)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="struct__generic__item__" kindref="compound">generic_item</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="struct__generic__item__" kindref="compound">generic_item</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct__generic__item__" kindref="compound">generic_item</ref>));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;<ref refid="struct__generic__item___1af77ca55baaf1e7a9d534c941f9d2f812" kindref="member">type</ref><sp/>=<sp/><ref refid="analyse_8h_1a6f3f9bfbd10818ff5891c0f505f79613a9ad7ba0457adc1e31ac27dc2f00311f7" kindref="member">TYPE_AFFECT</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>strncpy(new-&gt;item.affect.varname,<sp/>varname,<sp/><ref refid="analyse_8h_1ab64c24e21a46ddfe0f4168c16b882846" kindref="member">MAXSTRLEN</ref>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>strncpy(new-&gt;item.affect.varvalue,<sp/>varval,<sp/><ref refid="analyse_8h_1ab64c24e21a46ddfe0f4168c16b882846" kindref="member">MAXSTRLEN</ref>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="analyse_8h_1a4f7005314a823e91e222533981b18286" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="analyse_8c_1a4f7005314a823e91e222533981b18286" kindref="member">config_AddItem</ref>(<ref refid="struct__generic__item__" kindref="compound">list_items</ref><sp/>*<sp/>list,<sp/><ref refid="struct__generic__item__" kindref="compound">generic_item</ref><sp/>*<sp/>item)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*list)<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*list)<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="struct__generic__item___1aae5f4337bdd37d93c1569998f229eb87" kindref="member">next</ref><sp/>=<sp/>(*list);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*list)<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_list_ident(FILE<sp/>*<sp/>output,<sp/><ref refid="struct__generic__item__" kindref="compound">list_items</ref><sp/>*<sp/>list,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><ref refid="struct__generic__item__" kindref="compound">generic_item</ref><sp/>*curr_item;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>sanity<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!list)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>curr_item<sp/>=<sp/>(*list);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(curr_item)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(curr_item-&gt;<ref refid="struct__generic__item___1af77ca55baaf1e7a9d534c941f9d2f812" kindref="member">type</ref><sp/>==<sp/><ref refid="analyse_8h_1a6f3f9bfbd10818ff5891c0f505f79613abd5d7984039c921fb93343162a574853" kindref="member">TYPE_BLOCK</ref>)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;%*s&lt;BLOCK<sp/>&apos;%s&apos;&gt;\n&quot;</highlight><highlight class="normal">,<sp/>indent,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_item-&gt;<ref refid="struct__generic__item___1ad6aca6fd07547ee3bbd586ce8be70b0a" kindref="member">item</ref>.<ref refid="struct__generic__item___1ac1d9ff084323836b445e4bb10eb43b3e" kindref="member">block</ref>.<ref refid="struct__type__block___1a2cedecc4602de156f0226057a759d038" kindref="member">block_name</ref>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_list_ident(output,<sp/>&amp;curr_item-&gt;<ref refid="struct__generic__item___1ad6aca6fd07547ee3bbd586ce8be70b0a" kindref="member">item</ref>.<ref refid="struct__generic__item___1ac1d9ff084323836b445e4bb10eb43b3e" kindref="member">block</ref>.<ref refid="struct__type__block___1a85da2291e1fe11627ceeb2eede0501a3" kindref="member">block_content</ref>,<sp/>indent<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;%*s&lt;/BLOCK<sp/>&apos;%s&apos;&gt;\n&quot;</highlight><highlight class="normal">,<sp/>indent,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_item-&gt;<ref refid="struct__generic__item___1ad6aca6fd07547ee3bbd586ce8be70b0a" kindref="member">item</ref>.<ref refid="struct__generic__item___1ac1d9ff084323836b445e4bb10eb43b3e" kindref="member">block</ref>.<ref refid="struct__type__block___1a2cedecc4602de156f0226057a759d038" kindref="member">block_name</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>affectation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;%*sKEY:<sp/>&apos;%s&apos;,<sp/>VALUE:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>indent,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_item-&gt;<ref refid="struct__generic__item___1ad6aca6fd07547ee3bbd586ce8be70b0a" kindref="member">item</ref>.<ref refid="struct__generic__item___1a8a3ba24ac9e41658530491c5c3913cc9" kindref="member">affect</ref>.<ref refid="struct__type__affect___1a1edec9e19577f677c93b01add5342530" kindref="member">varname</ref>,<sp/>curr_item-&gt;<ref refid="struct__generic__item___1ad6aca6fd07547ee3bbd586ce8be70b0a" kindref="member">item</ref>.<ref refid="struct__generic__item___1a8a3ba24ac9e41658530491c5c3913cc9" kindref="member">affect</ref>.<ref refid="struct__type__affect___1ac29b2106e4535a40d6008dfefc4ccce3" kindref="member">varvalue</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curr_item<sp/>=<sp/>curr_item-&gt;<ref refid="struct__generic__item___1aae5f4337bdd37d93c1569998f229eb87" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="analyse_8h_1a11266361714a3c55a0d585dd118aaec5" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="analyse_8c_1a11266361714a3c55a0d585dd118aaec5" kindref="member">config_print_list</ref>(FILE<sp/>*<sp/>output,<sp/><ref refid="struct__generic__item__" kindref="compound">list_items</ref><sp/>*<sp/>list)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>print_list_ident(output,<sp/>list,<sp/>0);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>free_list_items_recurse(<ref refid="struct__generic__item__" kindref="compound">list_items</ref><sp/>*<sp/>list)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><ref refid="struct__generic__item__" kindref="compound">generic_item</ref><sp/>*curr_item;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><ref refid="struct__generic__item__" kindref="compound">generic_item</ref><sp/>*next_item;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>sanity<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!list)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>curr_item<sp/>=<sp/>(*list);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(curr_item)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_item<sp/>=<sp/>curr_item-&gt;<ref refid="struct__generic__item___1aae5f4337bdd37d93c1569998f229eb87" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(curr_item-&gt;<ref refid="struct__generic__item___1af77ca55baaf1e7a9d534c941f9d2f812" kindref="member">type</ref><sp/>==<sp/><ref refid="analyse_8h_1a6f3f9bfbd10818ff5891c0f505f79613abd5d7984039c921fb93343162a574853" kindref="member">TYPE_BLOCK</ref>)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_list_items_recurse(&amp;curr_item-&gt;<ref refid="struct__generic__item___1ad6aca6fd07547ee3bbd586ce8be70b0a" kindref="member">item</ref>.<ref refid="struct__generic__item___1ac1d9ff084323836b445e4bb10eb43b3e" kindref="member">block</ref>.<ref refid="struct__type__block___1a85da2291e1fe11627ceeb2eede0501a3" kindref="member">block_content</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(curr_item);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curr_item<sp/>=<sp/>next_item;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="analyse_8h_1adc8ddb7f244c0bb2aeb9af15ebd3545c" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="analyse_8c_1adc8ddb7f244c0bb2aeb9af15ebd3545c" kindref="member">config_free_list</ref>(<ref refid="struct__generic__item__" kindref="compound">list_items</ref><sp/>*<sp/>list)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>free_list_items_recurse(list);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>free(list);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/export/GANESHA/src/ConfigParsing/analyse.c"/>
  </compounddef>
</doxygen>
