.TH "idmapper_cache.c" 3 "31 Mar 2009" "Version 0.1" "Id Mapper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
idmapper_cache.c \- Id mapping functions.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include 'HashData.h'\fP
.br
\fC#include 'HashTable.h'\fP
.br
\fC#include 'log_functions.h'\fP
.br
\fC#include 'stuff_alloc.h'\fP
.br
\fC#include 'nfs_core.h'\fP
.br
\fC#include 'nfs_exports.h'\fP
.br
\fC#include 'config_parsing.h'\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <strings.h>\fP
.br
\fC#include <pwd.h>\fP
.br
\fC#include <grp.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "size_t \fBstrnlen\fP (const char *s, size_t maxlen)"
.br
.ti -1c
.RI "unsigned long \fBidmapper_value_hash_func\fP (hash_parameter_t *p_hparam, hash_buffer_t *buffclef)"
.br
.ti -1c
.RI "unsigned long \fBnamemapper_value_hash_func\fP (hash_parameter_t *p_hparam, hash_buffer_t *buffclef)"
.br
.ti -1c
.RI "unsigned long \fBidmapper_rbt_hash_func\fP (hash_parameter_t *p_hparam, hash_buffer_t *buffclef)"
.br
.ti -1c
.RI "unsigned long \fBnamemapper_rbt_hash_func\fP (hash_parameter_t *p_hparam, hash_buffer_t *buffclef)"
.br
.ti -1c
.RI "int \fBcompare_idmapper\fP (hash_buffer_t *buff1, hash_buffer_t *buff2)"
.br
.ti -1c
.RI "int \fBcompare_namemapper\fP (hash_buffer_t *buff1, hash_buffer_t *buff2)"
.br
.ti -1c
.RI "int \fBdisplay_idmapper_key\fP (hash_buffer_t *pbuff, char *str)"
.br
.ti -1c
.RI "int \fBdisplay_idmapper_val\fP (hash_buffer_t *pbuff, char *str)"
.br
.ti -1c
.RI "int \fBidmap_uid_init\fP (nfs_idmap_cache_parameter_t param)"
.br
.ti -1c
.RI "int \fBuidgidmap_init\fP (nfs_idmap_cache_parameter_t param)"
.br
.ti -1c
.RI "int \fBidmap_uname_init\fP (nfs_idmap_cache_parameter_t param)"
.br
.ti -1c
.RI "int \fBidmap_gid_init\fP (nfs_idmap_cache_parameter_t param)"
.br
.ti -1c
.RI "int \fBidmap_gname_init\fP (nfs_idmap_cache_parameter_t param)"
.br
.ti -1c
.RI "int \fBidmap_compute_hash_value\fP (char *name, uint32_t *phashval)"
.br
.ti -1c
.RI "int \fBidmap_add\fP (hash_table_t *ht, char *key, unsigned int val)"
.br
.ti -1c
.RI "int \fBnamemap_add\fP (hash_table_t *ht, unsigned int key, char *val)"
.br
.ti -1c
.RI "int \fBuidgidmap_add\fP (unsigned int key, unsigned int value)"
.br
.ti -1c
.RI "int \fBuidmap_add\fP (char *key, unsigned int val)"
.br
.ti -1c
.RI "int \fBunamemap_add\fP (unsigned int key, char *val)"
.br
.ti -1c
.RI "int \fBgidmap_add\fP (char *key, unsigned int val)"
.br
.ti -1c
.RI "int \fBgnamemap_add\fP (unsigned int key, char *val)"
.br
.ti -1c
.RI "int \fBidmap_get\fP (hash_table_t *ht, char *key, unsigned long *pval)"
.br
.ti -1c
.RI "int \fBnamemap_get\fP (hash_table_t *ht, unsigned int key, char *pval)"
.br
.ti -1c
.RI "int \fBuidgidmap_get\fP (unsigned int key, unsigned int *pval)"
.br
.ti -1c
.RI "int \fBuidmap_get\fP (char *key, unsigned long *pval)"
.br
.ti -1c
.RI "int \fBunamemap_get\fP (unsigned int key, char *val)"
.br
.ti -1c
.RI "int \fBgidmap_get\fP (char *key, unsigned long *pval)"
.br
.ti -1c
.RI "int \fBgnamemap_get\fP (unsigned int key, char *val)"
.br
.ti -1c
.RI "int \fBidmap_remove\fP (hash_table_t *ht, char *key)"
.br
.ti -1c
.RI "int \fBnamemap_remove\fP (hash_table_t *ht, unsigned int key)"
.br
.ti -1c
.RI "int \fBuidgidmap_remove\fP (unsigned int key)"
.br
.ti -1c
.RI "int \fBuidmap_remove\fP (char *key)"
.br
.ti -1c
.RI "int \fBunamemap_remove\fP (unsigned int key)"
.br
.ti -1c
.RI "int \fBgidmap_remove\fP (char *key)"
.br
.ti -1c
.RI "int \fBgnamemap_remove\fP (unsigned int key)"
.br
.ti -1c
.RI "int \fBidmap_populate\fP (char *path, idmap_type_t maptype)"
.br
.ti -1c
.RI "void \fBidmap_get_stats\fP (idmap_type_t maptype, hash_stat_t *phstat, hash_stat_t *phstat_reverse)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "hash_table_t * \fBht_pwnam\fP"
.br
.ti -1c
.RI "hash_table_t * \fBht_grnam\fP"
.br
.ti -1c
.RI "hash_table_t * \fBht_pwuid\fP"
.br
.ti -1c
.RI "hash_table_t * \fBht_grgid\fP"
.br
.ti -1c
.RI "hash_table_t * \fBht_uidgid\fP"
.br
.ti -1c
.RI "nfs_parameter_t \fBnfs_param\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Id mapping functions. 

\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
deniel 
.RE
.PP
\fBDate:\fP
.RS 4
$Date$ 
.RE
.PP
\fBVersion:\fP
.RS 4
$Revision$ \fBidmapper_cache.c\fP : Id mapping functions, passwd and groups cache management. 
.RE
.PP

.PP
Definition in file \fBidmapper_cache.c\fP.
.SH "Function Documentation"
.PP 
.SS "int compare_idmapper (hash_buffer_t * buff1, hash_buffer_t * buff2)"
.PP
compare_idmapper: compares the values stored in the key buffers.
.PP
Compares the values stored in the key buffers. This function is to be used as 'compare_key' field in the hashtable storing the nfs duplicated requests.
.PP
\fBParameters:\fP
.RS 4
\fIbuff1\fP [IN] first key 
.br
\fIbuff2\fP [IN] second key
.RE
.PP
\fBReturns:\fP
.RS 4
0 if keys are identifical, 1 if they are different. 
.RE
.PP

.PP
Definition at line 200 of file idmapper_cache.c.
.SS "int compare_namemapper (hash_buffer_t * buff1, hash_buffer_t * buff2)"
.PP
Definition at line 205 of file idmapper_cache.c.
.SS "int display_idmapper_key (hash_buffer_t * pbuff, char * str)"
.PP
display_idmapper_key: displays the entry key stored in the buffer.
.PP
Displays the entry key stored in the buffer. This function is to be used as 'key_to_str' field in the hashtable storing the id mapper stuff
.PP
\fBParameters:\fP
.RS 4
\fIbuff1\fP [IN] buffer to display 
.br
\fIbuff2\fP [OUT] output string
.RE
.PP
\fBReturns:\fP
.RS 4
number of character written. 
.RE
.PP

.PP
Definition at line 227 of file idmapper_cache.c.
.SS "int display_idmapper_val (hash_buffer_t * pbuff, char * str)"
.PP
display_idmapper_val: displays the entry key stored in the buffer.
.PP
Displays the entry key stored in the buffer. This function is to be used as 'val_to_str' field in the hashtable storing the id mapper stuff
.PP
\fBParameters:\fP
.RS 4
\fIbuff1\fP [IN] buffer to display 
.br
\fIbuff2\fP [OUT] output string
.RE
.PP
\fBReturns:\fP
.RS 4
number of character written. 
.RE
.PP

.PP
Definition at line 246 of file idmapper_cache.c.
.SS "int gidmap_add (char * key, unsigned int val)"
.PP
Definition at line 569 of file idmapper_cache.c.
.SS "int gidmap_get (char * key, unsigned long * pval)"
.PP
Definition at line 718 of file idmapper_cache.c.
.SS "int gidmap_remove (char * key)"
.PP
Definition at line 824 of file idmapper_cache.c.
.SS "int gnamemap_add (unsigned int key, char * val)"
.PP
Definition at line 585 of file idmapper_cache.c.
.SS "int gnamemap_get (unsigned int key, char * val)"
.PP
Definition at line 724 of file idmapper_cache.c.
.SS "int gnamemap_remove (unsigned int key)"
.PP
Definition at line 829 of file idmapper_cache.c.
.SS "int idmap_add (hash_table_t * ht, char * key, unsigned int val)"
.PP
idmap_add: Adds a value by key
.PP
Adss a value by key.
.PP
\fBParameters:\fP
.RS 4
\fIht\fP [INOUT] the hash table to be used 
.br
\fIkey\fP [IN] the ip address requested 
.br
\fIval\fP [OUT] the value
.RE
.PP
\fBReturns:\fP
.RS 4
ID_MAPPER_SUCCESS, ID_MAPPER_INSERT_MALLOC_ERROR, ID_MAPPER_INVALID_ARGUMENT 
.RE
.PP

.PP
Definition at line 450 of file idmapper_cache.c.
.SS "int idmap_compute_hash_value (char * name, uint32_t * phashval)"
.PP
idmap_compute_hash_value: computes the hash value, based on the string.
.PP
Computes the computes the hash value, based on the string. 
.PP
Definition at line 338 of file idmapper_cache.c.
.SS "int idmap_get (hash_table_t * ht, char * key, unsigned long * pval)"
.PP
idmap_get: gets a value by key
.PP
Gets a value by key.
.PP
\fBParameters:\fP
.RS 4
\fIht\fP [INOUT] the hash table to be used 
.br
\fIkey\fP [IN] the ip address requested 
.br
\fIhostname\fP [OUT] the hostname
.RE
.PP
\fBReturns:\fP
.RS 4
ID_MAPPER_SUCCESS or ID_MAPPER_NOT_FOUND 
.RE
.PP

.PP
Definition at line 614 of file idmapper_cache.c.
.SS "void idmap_get_stats (idmap_type_t maptype, hash_stat_t * phstat, hash_stat_t * phstat_reverse)"
.PP
idmap_get_stats: gets the hash table statistics for the idmap et the reverse id map
.PP
Gets the hash table statistics for the idmap et the reverse idmap.
.PP
\fBParameters:\fP
.RS 4
\fImaptype\fP [IN] type of the mapping to be queried (should be UIDMAP_TYPE or GIDMAP_TYPE) 
.br
\fIphstat\fP [OUT] pointer to the resulting stats for direct map. 
.br
\fIphstat\fP [OUT] pointer to the resulting stats for reverse map.
.RE
.PP
\fBReturns:\fP
.RS 4
nothing (void function)
.RE
.PP
\fBSee also:\fP
.RS 4
HashTable_GetStats 
.RE
.PP

.PP
Definition at line 952 of file idmapper_cache.c.
.SS "int idmap_gid_init (nfs_idmap_cache_parameter_t param)"
.PP
idmap_gid_init: Inits the hashtable for GID mapping.
.PP
Inits the hashtable for GID mapping.
.PP
\fBParameters:\fP
.RS 4
\fIparam\fP [IN] parameter used to init the gid map cache
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise 
.RE
.PP

.PP
Definition at line 307 of file idmapper_cache.c.
.SS "int idmap_gname_init (nfs_idmap_cache_parameter_t param)"
.PP
Definition at line 318 of file idmapper_cache.c.
.SS "int idmap_populate (char * path, idmap_type_t maptype)"
.PP
idmap_populate_by_conf: Use the configuration file to populate the ID_MAPPER.
.PP
Use the configuration file to populate the ID_MAPPER. 
.PP
Definition at line 842 of file idmapper_cache.c.
.SS "int idmap_remove (hash_table_t * ht, char * key)"
.PP
idmap_remove: Tries to remove an entry for ID_MAPPER
.PP
Tries to remove an entry for ID_MAPPER
.PP
\fBParameters:\fP
.RS 4
\fIht\fP [INOUT] the hash table to be used 
.br
\fIkey\fP [IN] the key uncached.
.RE
.PP
\fBReturns:\fP
.RS 4
the delete status 
.RE
.PP

.PP
Definition at line 742 of file idmapper_cache.c.
.SS "int idmap_uid_init (nfs_idmap_cache_parameter_t param)"
.PP
idmap_uid_init: Inits the hashtable for UID mapping.
.PP
Inits the hashtable for UID mapping.
.PP
\fBParameters:\fP
.RS 4
\fIparam\fP [IN] parameter used to init the uid map cache
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise 
.RE
.PP

.PP
Definition at line 263 of file idmapper_cache.c.
.SS "int idmap_uname_init (nfs_idmap_cache_parameter_t param)"
.PP
Definition at line 285 of file idmapper_cache.c.
.SS "unsigned long idmapper_rbt_hash_func (hash_parameter_t * p_hparam, hash_buffer_t * buffclef)"
.PP
idmapper_rbt_hash_func: computes the rbt value for the entry in the id mapper stuff.
.PP
Computes the rbt value for the entry in the id mapper stuff.
.PP
\fBParameters:\fP
.RS 4
\fIhparam\fP [IN] hash table parameter. 
.br
\fIbuffcleff[in]\fP pointer to the hash key buffer
.RE
.PP
\fBReturns:\fP
.RS 4
the computed rbt value.
.RE
.PP
\fBSee also:\fP
.RS 4
HashTable_Init 
.RE
.PP

.PP
Definition at line 172 of file idmapper_cache.c.
.SS "unsigned long idmapper_value_hash_func (hash_parameter_t * p_hparam, hash_buffer_t * buffclef)"
.PP
idmapper_rbt_hash_func: computes the hash value for the entry in id mapper stuff
.PP
Computes the hash value for the entry in id mapper stuff. In fact, it just use addresse as value (identity function) modulo the size of the hash. This function is called internal in the HasTable_* function
.PP
\fBParameters:\fP
.RS 4
\fIhparam\fP [IN] hash table parameter. 
.br
\fIbuffcleff[in]\fP pointer to the hash key buffer
.RE
.PP
\fBReturns:\fP
.RS 4
the computed hash value.
.RE
.PP
\fBSee also:\fP
.RS 4
HashTable_Init 
.RE
.PP

.PP
Definition at line 141 of file idmapper_cache.c.
.SS "int namemap_add (hash_table_t * ht, unsigned int key, char * val)"
.PP
Definition at line 481 of file idmapper_cache.c.
.SS "int namemap_get (hash_table_t * ht, unsigned int key, char * pval)"
.PP
Definition at line 642 of file idmapper_cache.c.
.SS "int namemap_remove (hash_table_t * ht, unsigned int key)"
.PP
Definition at line 767 of file idmapper_cache.c.
.SS "unsigned long namemapper_rbt_hash_func (hash_parameter_t * p_hparam, hash_buffer_t * buffclef)"
.PP
Definition at line 183 of file idmapper_cache.c.
.SS "unsigned long namemapper_value_hash_func (hash_parameter_t * p_hparam, hash_buffer_t * buffclef)"
.PP
Definition at line 153 of file idmapper_cache.c.
.SS "size_t strnlen (const char * s, size_t maxlen)"
.PP
.SS "int uidgidmap_add (unsigned int key, unsigned int value)"
.PP
Definition at line 512 of file idmapper_cache.c.
.SS "int uidgidmap_get (unsigned int key, unsigned int * pval)"
.PP
Definition at line 671 of file idmapper_cache.c.
.SS "int uidgidmap_init (nfs_idmap_cache_parameter_t param)"
.PP
Definition at line 274 of file idmapper_cache.c.
.SS "int uidgidmap_remove (unsigned int key)"
.PP
Definition at line 793 of file idmapper_cache.c.
.SS "int uidmap_add (char * key, unsigned int val)"
.PP
Definition at line 537 of file idmapper_cache.c.
.SS "int uidmap_get (char * key, unsigned long * pval)"
.PP
Definition at line 706 of file idmapper_cache.c.
.SS "int uidmap_remove (char * key)"
.PP
Definition at line 814 of file idmapper_cache.c.
.SS "int unamemap_add (unsigned int key, char * val)"
.PP
Definition at line 553 of file idmapper_cache.c.
.SS "int unamemap_get (unsigned int key, char * val)"
.PP
Definition at line 712 of file idmapper_cache.c.
.SS "int unamemap_remove (unsigned int key)"
.PP
Definition at line 819 of file idmapper_cache.c.
.SH "Variable Documentation"
.PP 
.SS "hash_table_t* \fBht_grgid\fP"
.PP
Definition at line 119 of file idmapper_cache.c.
.SS "hash_table_t* \fBht_grnam\fP"
.PP
Definition at line 117 of file idmapper_cache.c.
.SS "hash_table_t* \fBht_pwnam\fP"
.PP
Definition at line 116 of file idmapper_cache.c.
.SS "hash_table_t* \fBht_pwuid\fP"
.PP
Definition at line 118 of file idmapper_cache.c.
.SS "hash_table_t* \fBht_uidgid\fP"
.PP
Definition at line 120 of file idmapper_cache.c.
.SS "nfs_parameter_t \fBnfs_param\fP"
.PP
Definition at line 50 of file test_idmapper.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for Id Mapper from the source code.
