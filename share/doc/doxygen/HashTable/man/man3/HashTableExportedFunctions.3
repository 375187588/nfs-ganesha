.TH "HashTableExportedFunctions" 3 "31 Mar 2009" "Version 0.1" "Hash Table Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
HashTableExportedFunctions \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "hash_table_t * \fBHashTable_Init\fP (hash_parameter_t hparam)"
.br
.ti -1c
.RI "int \fBHashTable_Test_And_Set\fP (hash_table_t *ht, hash_buffer_t *buffkey, hash_buffer_t *buffval, hashtable_set_how_t how)"
.br
.ti -1c
.RI "int \fBHashTable_Get\fP (hash_table_t *ht, hash_buffer_t *buffkey, hash_buffer_t *buffval)"
.br
.ti -1c
.RI "int \fBHashTable_Del\fP (hash_table_t *ht, hash_buffer_t *buffkey, hash_buffer_t *p_usedbuffkey, hash_buffer_t *p_usedbuffdata)"
.br
.ti -1c
.RI "void \fBHashTable_GetStats\fP (hash_table_t *ht, hash_stat_t *hstat)"
.br
.ti -1c
.RI "unsigned int \fBHashTable_GetSize\fP (hash_table_t *ht)"
.br
.ti -1c
.RI "void \fBHashTable_Print\fP (hash_table_t *ht)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int HashTable_Del (hash_table_t * ht, hash_buffer_t * buffkey, hash_buffer_t * p_usedbuffkey, hash_buffer_t * p_usedbuffdata)"
.PP
HashTable_Del: Remove a (key,val) couple from the hashtable.
.PP
Remove a (key,val) couple from the hashtable. The parameter buffkey contains the key which describes the object to be removed from the hash table.
.PP
\fBParameters:\fP
.RS 4
\fIht\fP the hashtable to be used. 
.br
\fIbuffkey\fP a pointeur to an object of type hash_buffer_t which describe the key location in memory. 
.br
\fIpusedbuffkeydata\fP the key data buffer that was associated with this entry. Not considered if equal to NULL.
.RE
.PP
\fBReturns:\fP
.RS 4
HASHTABLE_SUCCESS if successfull
.br
. 
.PP
HASHTABLE_ERROR_NO_SUCH_KEY is the key was not found.
.RE
.PP
\fBSee also:\fP
.RS 4
HashTable_Set 
.PP
\fBHashTable_Init\fP 
.PP
\fBHashTable_Get\fP 
.RE
.PP

.PP
Definition at line 813 of file HashTable.c.
.SS "int HashTable_Get (hash_table_t * ht, hash_buffer_t * buffkey, hash_buffer_t * buffval)"
.PP
HashTable_Get: Try to retrieve the value associated with a key.
.PP
Try to retrieve the value associated with a key. The structure buffval will point to the object found if successfull.
.PP
\fBParameters:\fP
.RS 4
\fIht\fP the hashtable to be used. 
.br
\fIbuffkey\fP a pointeur to an object of type hash_buffer_t which describe the key location in memory. 
.br
\fIbuffval\fP a pointeur to an object of type hash_buffer_t which describe the value location in memory.
.RE
.PP
\fBReturns:\fP
.RS 4
HASHTABLE_SUCCESS if successfull
.br
. 
.PP
HASHTABLE_ERROR_NO_SUCH_KEY is the key was not found.
.RE
.PP
\fBSee also:\fP
.RS 4
HashTable_Set 
.PP
\fBHashTable_Init\fP 
.PP
\fBHashTable_Del\fP 
.RE
.PP

.PP
Definition at line 751 of file HashTable.c.
.SS "unsigned int HashTable_GetSize (hash_table_t * ht)"
.PP
HashTable_GetSize: Gets the number of entries in the hashtable.
.PP
Gets the number of entries in the hashtable.
.PP
\fBParameters:\fP
.RS 4
\fIht\fP the hashtable to be used.
.RE
.PP
\fBReturns:\fP
.RS 4
the number of found entries
.RE
.PP
\fBSee also:\fP
.RS 4
HashTable_Set 
.PP
\fBHashTable_Init\fP 
.PP
\fBHashTable_Get\fP 
.RE
.PP

.PP
Definition at line 971 of file HashTable.c.
.SS "void HashTable_GetStats (hash_table_t * ht, hash_stat_t * hstat)"
.PP
HashTable_GetStats: Computes statistiques on the hashtable
.PP
Print information about the hashtable (mostly for debugging purpose).
.PP
\fBParameters:\fP
.RS 4
\fIht\fP the hashtable to be used. 
.br
\fIhstat\fP pointer to the result
.RE
.PP
\fBReturns:\fP
.RS 4
none (returns void).
.RE
.PP
\fBSee also:\fP
.RS 4
HashTable_Set 
.PP
\fBHashTable_Init\fP 
.PP
\fBHashTable_Get\fP 
.RE
.PP

.PP
Definition at line 893 of file HashTable.c.
.SS "hash_table_t* HashTable_Init (hash_parameter_t hparam)"
.PP
HashTable_Init: Init the Hash Table.
.PP
Init the Hash Table .
.PP
\fBParameters:\fP
.RS 4
\fIhparam\fP A structure of type hash_parameter_t which contains the values used to init the hash table.
.RE
.PP
\fBReturns:\fP
.RS 4
NULL if init failed, the pointeur to the hashtable otherwise.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBHashTable_Get\fP 
.PP
HashTable_Set 
.PP
\fBHashTable_Del\fP 
.RE
.PP

.PP
Definition at line 512 of file HashTable.c.
.SS "void HashTable_Print (hash_table_t * ht)"
.PP
HashTable_Print: Print information about the hashtable (mostly for debugging purpose).
.PP
Print information about the hashtable (mostly for debugging purpose).
.PP
\fBParameters:\fP
.RS 4
\fIht\fP the hashtable to be used.
.RE
.PP
\fBReturns:\fP
.RS 4
none (returns void).
.RE
.PP
\fBSee also:\fP
.RS 4
HashTable_Set 
.PP
\fBHashTable_Init\fP 
.PP
\fBHashTable_Get\fP 
.RE
.PP

.PP
Definition at line 1000 of file HashTable.c.
.SS "int HashTable_Test_And_Set (hash_table_t * ht, hash_buffer_t * buffkey, hash_buffer_t * buffval, hashtable_set_how_t how)"
.PP
HashTable_Test_And_Set: set a pair (key,value) into the Hash Table.
.PP
Set a (key,val) couple in the hashtable .
.PP
\fBParameters:\fP
.RS 4
\fIht\fP the hashtable to be used. 
.br
\fIbuffkey\fP a pointeur to an object of type hash_buffer_t which describe the key location in memory. 
.br
\fIbuffval\fP a pointeur to an object of type hash_buffer_t which describe the value location in memory. 
.br
\fIhow\fP a switch to tell if the entry is to be tested or overwritten or not
.RE
.PP
\fBReturns:\fP
.RS 4
HASHTABLE_SUCCESS if successfull
.br
. 
.PP
HASHTABLE_INSERT_MALLOC_ERROR if an error occured during the insertion process.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBHashTable_Get\fP 
.PP
\fBHashTable_Init\fP 
.PP
\fBHashTable_Del\fP 
.RE
.PP

.PP
Definition at line 614 of file HashTable.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for Hash Table Library from the source code.
