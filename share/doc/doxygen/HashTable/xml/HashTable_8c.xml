<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="HashTable_8c" kind="file">
    <compoundname>HashTable.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">pthread.h</includes>
    <includes local="yes">RW_Lock.h</includes>
    <includes local="yes">BuddyMalloc.h</includes>
    <includes local="yes">HashTable.h</includes>
    <includes local="yes">stuff_alloc.h</includes>
    <includes local="yes">log_macros.h</includes>
    <incdepgraph>
      <node id="8">
        <label>log_macros.h</label>
      </node>
      <node id="5">
        <label>BuddyMalloc.h</label>
      </node>
      <node id="0">
        <label>HashTable.c</label>
        <link refid="HashTable.c"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>RW_Lock.h</label>
      </node>
      <node id="3">
        <label>pthread.h</label>
      </node>
      <node id="2">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>HashTable.h</label>
      </node>
      <node id="7">
        <label>stuff_alloc.h</label>
      </node>
      <node id="1">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="HashTable_8c_1aa8cecfc5c5c054d2875c03e77b7be15d" prot="public" static="no">
        <name>TRUE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="184" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="HashTable_8c_1aa93f0eb578d23995850d61f7d61c55c1" prot="public" static="no">
        <name>FALSE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="188" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="HashTable_8c_1a15abb4ae29738d2dd59f592b02ceccfd" prot="public" static="no">
        <name>P</name>
        <param><defname>a</defname></param>
        <initializer>pthread_mutex_lock( &amp;a )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="192" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="HashTable_8c_1a751d733b0539d56fca1a17f94f54e605" prot="public" static="no">
        <name>V</name>
        <param><defname>a</defname></param>
        <initializer>pthread_mutex_unlock( &amp;a )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="196" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="196" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__HashTableInternalFunctions_1gaf42a323dd4a2c336ce843bddf643be43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long simple_hash_func</definition>
        <argsstring>(hash_parameter_t *p_hparam, hash_buffer_t *buffclef)</argsstring>
        <name>simple_hash_func</name>
        <param>
          <type>hash_parameter_t *</type>
          <declname>p_hparam</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffclef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>simple_hash_func: A template hash function, which considers the hash key as a polynom</para><para>A template hash function, which considers the hash key as a polynom. we are supposed to managed string written with ht-&gt;alphabet_length different characters We turn the string into a binary by computing str[0]+str[1]*ht-&gt;alphabet_length+str[2]*ht-&gt;alphabet_length**2 + ... ... + str[N]*ht-&gt;alphabet_length**N Then we keep the modulo by index_size. This size has to be a prime integer for performance reason The polynome is computed with the Horner&apos;s method.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hparam</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameter structure that was used to define the hashtable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffclef</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to compute the hash value on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the hash value</para></simplesect>
<simplesect kind="see"><para><ref refid="group__HashTableInternalFunctions_1gaee806584243af84ca21ae138d816a7e7" kindref="member">double_hash_func</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="225" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="224" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableInternalFunctions_1gaee806584243af84ca21ae138d816a7e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long double_hash_func</definition>
        <argsstring>(hash_parameter_t *p_hparam, hash_buffer_t *buffclef)</argsstring>
        <name>double_hash_func</name>
        <param>
          <type>hash_parameter_t *</type>
          <declname>p_hparam</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffclef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>double_hash_func: This function is used for double hashing, based on another hash function.</para><para>This functions uses the hash function contained in hparam to compute a first hash value, then use it to compute a second value like this: h = ( firsthash + ( 8 - ( firsthash % 8 ) ) ) % hparam.index_size This operation just changes the last 3 bits, but it can be demonstrated that this produced a more efficient and better balanced hash function (See &apos;Algorithm in C&apos;, Robert Sedjewick for more detail on this).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hparam</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameter structure that was used to define the hashtable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffclef</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to compute the hash value on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the hash value</para></simplesect>
<simplesect kind="see"><para><ref refid="group__HashTableInternalFunctions_1gaee806584243af84ca21ae138d816a7e7" kindref="member">double_hash_func</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="262" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="261" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableInternalFunctions_1ga1aca4ae1fbd881eb69310b3a18375321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int rbt_hash_func</definition>
        <argsstring>(hash_parameter_t *p_hparam, hash_buffer_t *buffclef)</argsstring>
        <name>rbt_hash_func</name>
        <param>
          <type>hash_parameter_t *</type>
          <declname>p_hparam</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffclef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>rbt_hash_func: Another hash junction, but to be used for the red-black trees managed internally.</para><para>This library uses red-black trees to store data. RB trees use key data too. The hash function has to be different than the one used for find the RB Tree, if not all the entry in the tree will have the same hash value which will lead to a very unbalanced tree</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hparam</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameter structure that was used to define the hashtable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffclef</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to compute the hash value on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the hash value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="292" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="291" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableInternalFunctions_1gad335c3180914cbf36670bf1d7e08268c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hash_data_t *</type>
        <definition>static hash_data_t* PreAllocPdata</definition>
        <argsstring>(int nb_alloc)</argsstring>
        <name>PreAllocPdata</name>
        <param>
          <type>int</type>
          <declname>nb_alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PreAllocPdata: Does the allocation of a groups of hash_data_t to be managed as RBT_OPAQ values.</para><para>Does the allocation of a groups of hash_data_t to be managed as RBT_OPAQ values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nb_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>number of pdata to be pre-allocated</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the list of allocated pdata of NULL if allocation failed</para></simplesect>
<simplesect kind="see"><para><ref refid="group__HashTableExportedFunctions_1gab4e795677661542fc1a84e0ffd9ec41d" kindref="member">HashTable_Init</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="311" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="310" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableInternalFunctions_1ga01edca8af3a3cc28966940ddaa0d26a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct rbt_node *</type>
        <definition>static struct rbt_node* PreAllocNode</definition>
        <argsstring>(int nb_alloc)</argsstring>
        <name>PreAllocNode</name>
        <param>
          <type>int</type>
          <declname>nb_alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PreAllocNode: Does the allocation of a groups of nodes to be managed by the RB Tree</para><para>Does the allocation of a groups of nodes to be managed by the RB Tree.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nb_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rbt-node to be pre-allocated</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the list of allocated nodes of NULL if allocation failed</para></simplesect>
<simplesect kind="see"><para><ref refid="group__HashTableExportedFunctions_1gab4e795677661542fc1a84e0ffd9ec41d" kindref="member">HashTable_Init</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="346" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="345" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableInternalFunctions_1ga5e2dec2ba7a8fbee0b32de46ceb427ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int Key_Locate</definition>
        <argsstring>(hash_table_t *ht, hash_buffer_t *buffkey, unsigned int hashval, int rbt_value, struct rbt_node **ppnode)</argsstring>
        <name>Key_Locate</name>
        <param>
          <type>hash_table_t *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffkey</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>hashval</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rbt_value</declname>
        </param>
        <param>
          <type>struct rbt_node **</type>
          <declname>ppnode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key_Locate: Locate a buffer key in the hash table, as a rbt node.</para><para>This function is for internal use only</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>the hashtable to be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffkey</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointeur to an object of type hash_buffer_t which describe the key location in memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashval</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value associated with the key (in order to avoid computing it a second time) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rbt_value</parametername>
</parameternamelist>
<parameterdescription>
<para>rbt value associated with the key (in order to avoid computing it a second time) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ppnode</parametername>
</parameternamelist>
<parameterdescription>
<para>if successfull,will point to the pointer to the rbt node to be used</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HASHTABLE_SUCCESS if successfull<linebreak/>
. </para><simplesectsep/><para>HASHTABLE_NO_SUCH_KEY if key was not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="388" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="386" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableExportedFunctions_1gab4e795677661542fc1a84e0ffd9ec41d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hash_table_t *</type>
        <definition>hash_table_t* HashTable_Init</definition>
        <argsstring>(hash_parameter_t hparam)</argsstring>
        <name>HashTable_Init</name>
        <param>
          <type>hash_parameter_t</type>
          <declname>hparam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HashTable_Init: Init the Hash Table.</para><para>Init the Hash Table .</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hparam</parametername>
</parameternamelist>
<parameterdescription>
<para>A structure of type hash_parameter_t which contains the values used to init the hash table.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if init failed, the pointeur to the hashtable otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__HashTableExportedFunctions_1gae002d8403bd95e1ae432333bb16ae509" kindref="member">HashTable_Get</ref> </para><simplesectsep/><para>HashTable_Set </para><simplesectsep/><para><ref refid="group__HashTableExportedFunctions_1gadda0535c9f1748795d9eeb2514f5458c" kindref="member">HashTable_Del</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="456" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="455" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableExportedFunctions_1ga9fd137ceaac7ec4918a51b59d5e73031" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int HashTable_Test_And_Set</definition>
        <argsstring>(hash_table_t *ht, hash_buffer_t *buffkey, hash_buffer_t *buffval, hashtable_set_how_t how)</argsstring>
        <name>HashTable_Test_And_Set</name>
        <param>
          <type>hash_table_t *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffkey</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffval</declname>
        </param>
        <param>
          <type>hashtable_set_how_t</type>
          <declname>how</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HashTable_Test_And_Set: set a pair (key,value) into the Hash Table.</para><para>Set a (key,val) couple in the hashtable .</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>the hashtable to be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffkey</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointeur to an object of type hash_buffer_t which describe the key location in memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffval</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointeur to an object of type hash_buffer_t which describe the value location in memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>how</parametername>
</parameternamelist>
<parameterdescription>
<para>a switch to tell if the entry is to be tested or overwritten or not</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HASHTABLE_SUCCESS if successfull<linebreak/>
. </para><simplesectsep/><para>HASHTABLE_INSERT_MALLOC_ERROR if an error occured during the insertion process.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__HashTableExportedFunctions_1gae002d8403bd95e1ae432333bb16ae509" kindref="member">HashTable_Get</ref> </para><simplesectsep/><para><ref refid="group__HashTableExportedFunctions_1gab4e795677661542fc1a84e0ffd9ec41d" kindref="member">HashTable_Init</ref> </para><simplesectsep/><para><ref refid="group__HashTableExportedFunctions_1gadda0535c9f1748795d9eeb2514f5458c" kindref="member">HashTable_Del</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="568" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="566" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableExportedFunctions_1gae002d8403bd95e1ae432333bb16ae509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int HashTable_Get</definition>
        <argsstring>(hash_table_t *ht, hash_buffer_t *buffkey, hash_buffer_t *buffval)</argsstring>
        <name>HashTable_Get</name>
        <param>
          <type>hash_table_t *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffkey</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HashTable_Get: Try to retrieve the value associated with a key.</para><para>Try to retrieve the value associated with a key. The structure buffval will point to the object found if successfull.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>the hashtable to be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffkey</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointeur to an object of type hash_buffer_t which describe the key location in memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffval</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointeur to an object of type hash_buffer_t which describe the value location in memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HASHTABLE_SUCCESS if successfull<linebreak/>
. </para><simplesectsep/><para>HASHTABLE_ERROR_NO_SUCH_KEY is the key was not found.</para></simplesect>
<simplesect kind="see"><para>HashTable_Set </para><simplesectsep/><para><ref refid="group__HashTableExportedFunctions_1gab4e795677661542fc1a84e0ffd9ec41d" kindref="member">HashTable_Init</ref> </para><simplesectsep/><para><ref refid="group__HashTableExportedFunctions_1gadda0535c9f1748795d9eeb2514f5458c" kindref="member">HashTable_Del</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="703" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="702" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableExportedFunctions_1gadda0535c9f1748795d9eeb2514f5458c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int HashTable_Del</definition>
        <argsstring>(hash_table_t *ht, hash_buffer_t *buffkey, hash_buffer_t *p_usedbuffkey, hash_buffer_t *p_usedbuffdata)</argsstring>
        <name>HashTable_Del</name>
        <param>
          <type>hash_table_t *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffkey</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>p_usedbuffkey</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>p_usedbuffdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HashTable_Del: Remove a (key,val) couple from the hashtable.</para><para>Remove a (key,val) couple from the hashtable. The parameter buffkey contains the key which describes the object to be removed from the hash table.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>the hashtable to be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffkey</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointeur to an object of type hash_buffer_t which describe the key location in memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pusedbuffkeydata</parametername>
</parameternamelist>
<parameterdescription>
<para>the key data buffer that was associated with this entry. Not considered if equal to NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HASHTABLE_SUCCESS if successfull<linebreak/>
. </para><simplesectsep/><para>HASHTABLE_ERROR_NO_SUCH_KEY is the key was not found.</para></simplesect>
<simplesect kind="see"><para>HashTable_Set </para><simplesectsep/><para><ref refid="group__HashTableExportedFunctions_1gab4e795677661542fc1a84e0ffd9ec41d" kindref="member">HashTable_Init</ref> </para><simplesectsep/><para><ref refid="group__HashTableExportedFunctions_1gae002d8403bd95e1ae432333bb16ae509" kindref="member">HashTable_Get</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="766" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="764" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableExportedFunctions_1ga8cc973332d8c4a92258793acc228e084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HashTable_GetStats</definition>
        <argsstring>(hash_table_t *ht, hash_stat_t *hstat)</argsstring>
        <name>HashTable_GetStats</name>
        <param>
          <type>hash_table_t *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>hash_stat_t *</type>
          <declname>hstat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HashTable_GetStats: Computes statistiques on the hashtable</para><para>Print information about the hashtable (mostly for debugging purpose).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>the hashtable to be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hstat</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the result</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none (returns void).</para></simplesect>
<simplesect kind="see"><para>HashTable_Set </para><simplesectsep/><para><ref refid="group__HashTableExportedFunctions_1gab4e795677661542fc1a84e0ffd9ec41d" kindref="member">HashTable_Init</ref> </para><simplesectsep/><para><ref refid="group__HashTableExportedFunctions_1gae002d8403bd95e1ae432333bb16ae509" kindref="member">HashTable_Get</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="842" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="841" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableExportedFunctions_1ga882a11e8509b2fb9de233145f923d516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int HashTable_GetSize</definition>
        <argsstring>(hash_table_t *ht)</argsstring>
        <name>HashTable_GetSize</name>
        <param>
          <type>hash_table_t *</type>
          <declname>ht</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HashTable_GetSize: Gets the number of entries in the hashtable.</para><para>Gets the number of entries in the hashtable.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>the hashtable to be used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of found entries</para></simplesect>
<simplesect kind="see"><para>HashTable_Set </para><simplesectsep/><para><ref refid="group__HashTableExportedFunctions_1gab4e795677661542fc1a84e0ffd9ec41d" kindref="member">HashTable_Init</ref> </para><simplesectsep/><para><ref refid="group__HashTableExportedFunctions_1gae002d8403bd95e1ae432333bb16ae509" kindref="member">HashTable_Get</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="920" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="919" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableExportedFunctions_1gaf5add10f55a1624787f981099d005806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HashTable_Log</definition>
        <argsstring>(log_components_t component, hash_table_t *ht)</argsstring>
        <name>HashTable_Log</name>
        <param>
          <type>log_components_t</type>
          <declname>component</declname>
        </param>
        <param>
          <type>hash_table_t *</type>
          <declname>ht</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HashTable_Print: Print information about the hashtable (mostly for debugging purpose).</para><para>Print information about the hashtable (mostly for debugging purpose).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>component</parametername>
</parameternamelist>
<parameterdescription>
<para>the component debugging config to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>the hashtable to be used. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none (returns void).</para></simplesect>
<simplesect kind="see"><para>HashTable_Set </para><simplesectsep/><para><ref refid="group__HashTableExportedFunctions_1gab4e795677661542fc1a84e0ffd9ec41d" kindref="member">HashTable_Init</ref> </para><simplesectsep/><para><ref refid="group__HashTableExportedFunctions_1gae002d8403bd95e1ae432333bb16ae509" kindref="member">HashTable_Get</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="949" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="948" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableExportedFunctions_1ga8403154cc1223657b499272deef394ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HashTable_Print</definition>
        <argsstring>(hash_table_t *ht)</argsstring>
        <name>HashTable_Print</name>
        <param>
          <type>hash_table_t *</type>
          <declname>ht</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HashTable_Print: Print information about the hashtable (mostly for debugging purpose).</para><para>Print information about the hashtable (mostly for debugging purpose).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>the hashtable to be used. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none (returns void). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/export/GANESHA/src/HashTable/HashTable.c" line="1007" bodyfile="/export/GANESHA/src/HashTable/HashTable.c" bodystart="1006" bodyend="1009"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Gestion des tables de hachage a base de Red/Black Trees. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para></para></simplesect>
<simplesect kind="rcs"><title>Author</title><para>deniel </para></simplesect>
<simplesect kind="date"><para></para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2006/01/31 09:12:06 </para></simplesect>
<simplesect kind="version"><para></para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>1.41 </para></simplesect>
<ref refid="HashTable_8c" kindref="compound">HashTable.c</ref> : gestion d&apos;une table de hachage</para><para><simplesect kind="rcs"><title>Header</title><para>/cea/home/cvs/cvs/SHERPA/BaseCvs/GANESHA/src/HashTable/HashTable.c,v 1.41 2006/01/31 09:12:06 deniel Exp </para></simplesect>
</para><para><simplesect kind="rcs"><title>Log</title><para><ref refid="HashTable_8c" kindref="compound">HashTable.c</ref>,v </para></simplesect>
Revision 1.41 2006/01/31 09:12:06 deniel First step in efence debugging</para><para>Revision 1.40 2006/01/27 10:28:36 deniel Now support rpm</para><para>Revision 1.39 2006/01/24 13:47:31 leibovic Disabling prealloc checks when _NO_BLOCK_PREALLOC falg is set.</para><para>Revision 1.38 2006/01/20 07:39:22 leibovic Back to the previous version.</para><para>Revision 1.35 2005/11/10 07:53:24 deniel Corrected some memory leaks</para><para>Revision 1.34 2005/08/12 07:11:14 deniel Corrected cache_inode_readdir semantics</para><para>Revision 1.33 2005/08/03 08:51:43 deniel Added file exports.c in libsupport.a</para><para>Revision 1.32 2005/08/03 07:22:17 deniel Added dependence management for SemN</para><para>Revision 1.31 2005/07/28 08:25:10 deniel Adding different ifdef statemement for additional debugging</para><para>Revision 1.30 2005/07/19 14:43:40 deniel Added mnt_export support, add cache inode client init for each worker</para><para>Revision 1.29 2005/07/11 15:30:06 deniel Mount udp/tcp ok with NFSv4 on pseudo fs on kernel 2.6.11</para><para>Revision 1.28 2005/05/10 11:43:57 deniel Datacache and metadatacache are noewqw bounded</para><para>Revision 1.27 2005/04/28 14:04:17 deniel Modified HashTabel_Del prototype</para><para>Revision 1.26 2005/04/14 14:43:09 deniel Corrected a bug in HashTable_Test_And_Set (when several nodes have the same rbt value)</para><para>Revision 1.25 2005/03/02 10:56:59 deniel Corrected a bug in pdata management</para><para>Revision 1.24 2005/03/01 09:17:09 deniel Added doxygen tags</para><para>Revision 1.23 2005/02/18 09:35:49 deniel Garbagge collection is ok for file (directory gc is not yet implemented)</para><para>Revision 1.22 2004/12/15 16:18:35 deniel DEBUG behaviour in HashTable_Print is now the default behaviour</para><para>Revision 1.21 2004/11/23 16:44:58 deniel Plenty of bugs corrected</para><para>Revision 1.20 2004/11/15 16:46:16 deniel Integration of pseudo fs</para><para>Revision 1.19 2004/10/25 06:34:54 deniel Multiples preallocated pool to avoid thread conflict whem inserting new entries in MT environment</para><para>Revision 1.18 2004/10/13 13:01:35 deniel Now using the stuff allocator</para><para>Revision 1.17 2004/10/11 07:05:44 deniel Protection des tables de hachage par des mutex (un par RBT)</para><para>Revision 1.16 2004/09/23 08:19:16 deniel Cleaning</para><para>Revision 1.15 2004/08/26 06:52:58 deniel Bug tres con dans <ref refid="HashTable_8c" kindref="compound">HashTable.c</ref>, au niveau de hashTabel_Test_And_Set (mauvaise enclosure de ifdef)</para><para>Revision 1.14 2004/08/25 06:21:24 deniel Mise en place du test configurable ok</para><para>Revision 1.13 2004/08/24 10:41:14 deniel Avant re-ecriture d&apos;un autre test.</para><para>Revision 1.12 2004/08/23 16:05:20 deniel Mise en palce d&apos;un test and set a la place du set pure</para><para>Revision 1.11 2004/08/23 09:14:35 deniel Ajout de tests de non-regression (pour le delete)</para><para>Revision 1.10 2004/08/23 08:20:55 deniel Mise en place de RBT_FIND_LEFT</para><para>Revision 1.9 2004/08/23 07:57:10 deniel Injection des nouveaux rbt de Jacques</para><para>Revision 1.8 2004/08/20 08:55:13 deniel Rajout du support des statistique Doxygenisation des sources</para><para>Revision 1.7 2004/08/19 09:19:12 deniel des allocations groupees par chunk</para><para>Revision 1.6 2004/08/19 08:08:04 deniel Mise au carre des tests sur les libs dynamiques et insertions des mesures de temps dans les tests</para><para>Revision 1.5 2004/08/18 14:26:18 deniel La table de hachage est clean</para><para>Revision 1.4 2004/08/18 13:49:37 deniel Table de Hash avec RBT, qui marche, mais pas clean au niveau des headers</para><para>Revision 1.3 2004/08/18 09:14:25 deniel Ok pour les nouvelles tables de hash plus generiques avec des listes chaines</para><para>Revision 1.2 2004/08/16 12:15:22 deniel Premiere mise en place simple des tables de hash (mais sans RBTree)</para><para>Revision 1.1 2004/08/16 09:35:05 deniel Population de la repository avec les Hashtables et les RW_Lock</para><para>Revision 1.4 2004/01/12 15:24:40 deniel Version finalisee</para><para>Revision 1.2 2004/01/12 14:52:08 deniel Version presque finale (le del, le set et le get fonctionnent)</para><para>Revision 1.1 2004/01/12 12:31:15 deniel Premiere version des fichiers de gestion de la table de hachage, en debug </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>vim:expandtab:shiftwidth=8:tabstop=8:</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>CEA/DAM/DIF<sp/><sp/>(2008)</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>contributeur<sp/>:<sp/>Philippe<sp/>DENIEL<sp/><sp/><sp/>philippe.deniel@cea.fr</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thomas<sp/>LEIBOVICI<sp/><sp/>thomas.leibovici@cea.fr</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>---------------------------------------</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RW_Lock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;BuddyMalloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;HashTable.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stuff_alloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;log_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TRUE</highlight></codeline>
<codeline lineno="184" refid="HashTable_8c_1aa8cecfc5c5c054d2875c03e77b7be15d" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TRUE<sp/>1</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FALSE</highlight></codeline>
<codeline lineno="188" refid="HashTable_8c_1aa93f0eb578d23995850d61f7d61c55c1" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FALSE<sp/>0</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>P</highlight></codeline>
<codeline lineno="192" refid="HashTable_8c_1a15abb4ae29738d2dd59f592b02ceccfd" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>P(<sp/>a<sp/>)<sp/>pthread_mutex_lock(<sp/>&amp;a<sp/>)</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>V</highlight></codeline>
<codeline lineno="196" refid="HashTable_8c_1a751d733b0539d56fca1a17f94f54e605" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>V(<sp/>a<sp/>)<sp/>pthread_mutex_unlock(<sp/>&amp;a<sp/>)</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------<sp/>This<sp/>group<sp/>contains<sp/>all<sp/>the<sp/>functions<sp/>used<sp/>to<sp/>manipulate<sp/>the<sp/>hash<sp/>table<sp/>internally<sp/>in<sp/>this<sp/>module<sp/>------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="group__HashTableInternalFunctions_1gaf42a323dd4a2c336ce843bddf643be43" refkind="member"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__HashTableInternalFunctions_1gaf42a323dd4a2c336ce843bddf643be43" kindref="member">simple_hash_func</ref>(hash_parameter_t<sp/>*<sp/>p_hparam,<sp/>hash_buffer_t<sp/>*<sp/>buffclef)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>are<sp/>supposed<sp/>to<sp/>managed<sp/>string<sp/>written<sp/>with<sp/>ht-&gt;alphabet_length<sp/>different<sp/>characters<sp/></highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/>*<sp/>We<sp/>turn<sp/>the<sp/>string<sp/>into<sp/>a<sp/>binary<sp/>by<sp/>computing<sp/>str[0]+str[1]*ht-&gt;alphabet_length+str[2]*ht-&gt;alphabet_length**2<sp/>+<sp/>...</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>...<sp/>+<sp/>str[N]*ht-&gt;alphabet_length**N<sp/><sp/></highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Then<sp/>we<sp/>keep<sp/>the<sp/>modulo<sp/>by<sp/>index_size.<sp/>This<sp/>size<sp/>has<sp/>to<sp/>be<sp/>a<sp/>prime<sp/>integer<sp/>for<sp/>performance<sp/>reason</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>polynome<sp/>is<sp/>computed<sp/>with<sp/>the<sp/>Horner&apos;s<sp/>method<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sobj<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(buffclef-&gt;pdata);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>buffclef-&gt;len;<sp/>i++)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>sobj[i];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(p_hparam-&gt;alphabet_length<sp/>*<sp/>h<sp/>+<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)c)<sp/>%<sp/>p_hparam-&gt;index_size;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hash_func<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="group__HashTableInternalFunctions_1gaee806584243af84ca21ae138d816a7e7" refkind="member"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__HashTableInternalFunctions_1gaee806584243af84ca21ae138d816a7e7" kindref="member">double_hash_func</ref>(hash_parameter_t<sp/>*<sp/>p_hparam,<sp/>hash_buffer_t<sp/>*<sp/>buffclef)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>firsthash<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>hash_function_t<sp/>hashfunc<sp/>=<sp/><ref refid="group__HashTableInternalFunctions_1gaf42a323dd4a2c336ce843bddf643be43" kindref="member">simple_hash_func</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>first,<sp/>we<sp/>find<sp/>the<sp/>intial<sp/>value<sp/>for<sp/>simple<sp/>hashing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>firsthash<sp/>=<sp/>hashfunc(p_hparam,<sp/>buffclef);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>second<sp/>value<sp/>is<sp/>computed<sp/></highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/>*<sp/>a<sp/>second<sp/>a<sp/>value<sp/>is<sp/>added<sp/>to<sp/>the<sp/>first<sp/>one,<sp/>then<sp/>the<sp/>modulo<sp/>is<sp/>kept<sp/></highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/>*<sp/>For<sp/>the<sp/>second<sp/>hash,<sp/>we<sp/>choose<sp/>to<sp/>change<sp/>the<sp/>last<sp/>3<sp/>bit,<sp/>which<sp/>is<sp/>usually<sp/>a<sp/>good<sp/>compromise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>(firsthash<sp/>+<sp/>(8<sp/>-<sp/>(firsthash<sp/>%<sp/>8)))<sp/>%<sp/>p_hparam-&gt;index_size;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>double_hash_func<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="group__HashTableInternalFunctions_1ga1aca4ae1fbd881eb69310b3a18375321" refkind="member"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__HashTableInternalFunctions_1ga1aca4ae1fbd881eb69310b3a18375321" kindref="member">rbt_hash_func</ref>(hash_parameter_t<sp/>*<sp/>p_hparam,<sp/>hash_buffer_t<sp/>*<sp/>buffclef)</highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valeur<sp/>=<sp/>atoi(buffclef-&gt;pdata)<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>valeur;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hash_func<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>hash_data_t<sp/>*PreAllocPdata(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_alloc)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>hash_data_t<sp/>*pdata<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>BuddySetDebugLabel(</highlight><highlight class="stringliteral">&quot;hash_data_t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="318"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_NO_BLOCK_PREALLOC</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>STUFF_PREALLOC(pdata,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)nb_alloc,<sp/>hash_data_t,<sp/>next_alloc);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pdata<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="324"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="326"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>BuddySetDebugLabel(</highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="329"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pdata;</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PreAllocPdata<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rbt_node<sp/>*PreAllocNode(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_alloc)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rbt_node<sp/>*pnode<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>LogFullDebug(COMPONENT_HASHTABLE,<sp/></highlight><highlight class="stringliteral">&quot;HASH<sp/>TABLE<sp/>PREALLOC:<sp/>Allocating<sp/>%d<sp/>new<sp/>nodes\n&quot;</highlight><highlight class="normal">,<sp/>nb_alloc);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>BuddySetDebugLabel(</highlight><highlight class="stringliteral">&quot;rbt_node_t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="355"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_NO_BLOCK_PREALLOC</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>STUFF_PREALLOC(pnode,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)nb_alloc,<sp/>rbt_node_t,<sp/>next);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pnode<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>BuddySetDebugLabel(</highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pnode;</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PreAllocNode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Key_Locate(hash_table_t<sp/>*<sp/>ht,<sp/>hash_buffer_t<sp/>*<sp/>buffkey,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashval,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rbt_value,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>rbt_node<sp/>**ppnode)</highlight></codeline>
<codeline lineno="388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rbt_head<sp/>*tete_rbt;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>hash_data_t<sp/>*pdata<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rbt_node<sp/>*pn;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ht<sp/>==<sp/>NULL<sp/>||<sp/>buffkey<sp/>==<sp/>NULL<sp/>||<sp/>ppnode<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_ERROR_INVALID_ARGUMENT;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>head<sp/>of<sp/>the<sp/>rbt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>tete_rbt<sp/>=<sp/>&amp;(ht-&gt;array_rbt[hashval]);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>I<sp/>get<sp/>the<sp/>node<sp/>with<sp/>this<sp/>value<sp/>that<sp/>is<sp/>located<sp/>on<sp/>the<sp/>left<sp/>(first<sp/>with<sp/>this<sp/>value<sp/>in<sp/>the<sp/>rbtree)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>RBT_FIND_LEFT(tete_rbt,<sp/>pn,<sp/>rbt_value);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>was<sp/>successfull<sp/>?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pn<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_ERROR_NO_SUCH_KEY;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>each<sp/>entry<sp/>with<sp/>this<sp/>value,<sp/>compare<sp/>the<sp/>key<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((pn<sp/>!=<sp/>0)<sp/>&amp;&amp;<sp/>(RBT_VALUE(pn)<sp/>==<sp/>rbt_value))</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pdata<sp/>=<sp/>(hash_data_t<sp/>*)<sp/>RBT_OPAQ(pn);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Verify<sp/>the<sp/>key<sp/>value<sp/>:<sp/>this<sp/>function<sp/>returns<sp/>0<sp/>if<sp/>key<sp/>are<sp/>indentical<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ht-&gt;parameter.compare_key(buffkey,<sp/>&amp;(pdata-&gt;buffkey)))</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>exit<sp/>the<sp/>while<sp/>loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RBT_INCREMENT(pn);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>while<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>didn&apos;t<sp/>find<sp/>anything<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!found)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_ERROR_NO_SUCH_KEY;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Key<sp/>was<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>*ppnode<sp/>=<sp/>pn;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_SUCCESS;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Key_Locate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">/*}@<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------<sp/>This<sp/>group<sp/>contains<sp/>all<sp/>the<sp/>functions<sp/>used<sp/>to<sp/>manipulate<sp/>the<sp/>hash<sp/>table<sp/>from<sp/>outside<sp/>this<sp/>module<sp/>-----<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="group__HashTableExportedFunctions_1gab4e795677661542fc1a84e0ffd9ec41d" refkind="member"><highlight class="normal">hash_table_t<sp/>*<ref refid="group__HashTableExportedFunctions_1gab4e795677661542fc1a84e0ffd9ec41d" kindref="member">HashTable_Init</ref>(hash_parameter_t<sp/>hparam)</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>hash_table_t<sp/>*ht;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>pthread_mutexattr_t<sp/>mutexattr;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((ht<sp/>=<sp/>(hash_table_t<sp/>*)<sp/><ref refid="test__configurable__hash_8c_1ad6b7282e7c215186f8514097b04d5bfa" kindref="member">Mem_Alloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hash_table_t)))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>have<sp/>to<sp/>keep<sp/>the<sp/>discriminant<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>ht-&gt;parameter<sp/>=<sp/>hparam;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pthread_mutexattr_init(&amp;mutexattr)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialization<sp/>of<sp/>the<sp/>node<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((ht-&gt;array_rbt<sp/>=</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>rbt_head<sp/>*)<ref refid="test__configurable__hash_8c_1ad6b7282e7c215186f8514097b04d5bfa" kindref="member">Mem_Alloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>rbt_head)<sp/>*<sp/>hparam.index_size))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialization<sp/>of<sp/>the<sp/>stat<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((ht-&gt;stat_dynamic<sp/>=</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(hash_stat_dynamic_t<sp/>*)<sp/><ref refid="test__configurable__hash_8c_1ad6b7282e7c215186f8514097b04d5bfa" kindref="member">Mem_Alloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hash_stat_dynamic_t)<sp/>*</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hparam.index_size))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Init<sp/>the<sp/>stats<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>memset((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ht-&gt;stat_dynamic,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hash_stat_dynamic_t)<sp/>*<sp/>hparam.index_size);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialization<sp/>of<sp/>the<sp/>semaphores<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((ht-&gt;array_lock<sp/>=</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(rw_lock_t<sp/>*)<sp/><ref refid="test__configurable__hash_8c_1ad6b7282e7c215186f8514097b04d5bfa" kindref="member">Mem_Alloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rw_lock_t)<sp/>*<sp/>hparam.index_size))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>array<sp/>of<sp/>pre-allocated<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((ht-&gt;node_prealloc<sp/>=</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>rbt_node<sp/>**)<ref refid="test__configurable__hash_8c_1ad6b7282e7c215186f8514097b04d5bfa" kindref="member">Mem_Alloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>rbt_node<sp/>*)<sp/>*<sp/>hparam.index_size))<sp/>==</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NULL)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((ht-&gt;pdata_prealloc<sp/>=</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(hash_data_t<sp/>**)<sp/><ref refid="test__configurable__hash_8c_1ad6b7282e7c215186f8514097b04d5bfa" kindref="member">Mem_Alloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hash_data_t<sp/>*)<sp/>*<sp/>hparam.index_size))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>hparam.index_size;<sp/>i++)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_NO_BLOCK_PREALLOC</highlight></codeline>
<codeline lineno="504"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((ht-&gt;node_prealloc[i]<sp/>=<sp/>PreAllocNode(hparam.nb_node_prealloc))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((ht-&gt;pdata_prealloc[i]<sp/>=<sp/>PreAllocPdata(hparam.nb_node_prealloc))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="510"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;node_prealloc[i]<sp/>=<sp/>PreAllocNode(hparam.nb_node_prealloc);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;pdata_prealloc[i]<sp/>=<sp/>PreAllocPdata(hparam.nb_node_prealloc);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="513"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>each<sp/>of<sp/>the<sp/>RB-Tree,<sp/>mutexes<sp/>and<sp/>stats<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>hparam.index_size;<sp/>i++)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RBT<sp/>Init<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RBT_HEAD_INIT(&amp;(ht-&gt;array_rbt[i]));</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mutex<sp/>Init<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rw_lock_init(&amp;(ht-&gt;array_lock[i]))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialization<sp/>of<sp/>the<sp/>stats<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[i].nb_entries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[i].ok.nb_set<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[i].ok.nb_get<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[i].ok.nb_del<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[i].ok.nb_test<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[i].err.nb_set<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[i].err.nb_get<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[i].err.nb_del<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[i].err.nb_test<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[i].notfound.nb_set<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[i].notfound.nb_get<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[i].notfound.nb_del<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[i].notfound.nb_test<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>final<sp/>return,<sp/>if<sp/>we<sp/>arrive<sp/>here,<sp/>then<sp/>everything<sp/>is<sp/>alright<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ht;</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HashTable_Init<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="group__HashTableExportedFunctions_1ga9fd137ceaac7ec4918a51b59d5e73031" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__HashTableExportedFunctions_1ga9fd137ceaac7ec4918a51b59d5e73031" kindref="member">HashTable_Test_And_Set</ref>(hash_table_t<sp/>*<sp/>ht,<sp/>hash_buffer_t<sp/>*<sp/>buffkey,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_buffer_t<sp/>*<sp/>buffval,<sp/>hashtable_set_how_t<sp/>how)</highlight></codeline>
<codeline lineno="568"><highlight class="normal">{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashval<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rbt_value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rbt_head<sp/>*tete_rbt<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rbt_node<sp/>*qn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rbt_node<sp/>*pn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>hash_data_t<sp/>*pdata<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ht<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_ERROR_INVALID_ARGUMENT;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(buffkey<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_ERROR_INVALID_ARGUMENT;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(buffval<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_ERROR_INVALID_ARGUMENT;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>RB<sp/>Tree<sp/>to<sp/>be<sp/>used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>hashval<sp/>=<sp/>(*(ht-&gt;parameter.hash_func_key))<sp/>(&amp;ht-&gt;parameter,<sp/>buffkey);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>tete_rbt<sp/>=<sp/>&amp;(ht-&gt;array_rbt[hashval]);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>rbt_value<sp/>=<sp/>(*(ht-&gt;parameter.hash_func_rbt))<sp/>(&amp;ht-&gt;parameter,<sp/>buffkey);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>LogFullDebug(COMPONENT_HASHTABLE,</highlight><highlight class="stringliteral">&quot;Key<sp/>=<sp/>%p<sp/><sp/><sp/>Value<sp/>=<sp/>%p<sp/><sp/>hashval<sp/>=<sp/>%u<sp/><sp/>rbt_value<sp/>=<sp/>%x\n&quot;</highlight><highlight class="normal">,<sp/>buffkey-&gt;pdata,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffval-&gt;pdata,<sp/>hashval,<sp/>rbt_value);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>acquire<sp/>mutex<sp/>for<sp/>protection<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>P_w(&amp;(ht-&gt;array_lock[hashval]));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Key_Locate(ht,<sp/>buffkey,<sp/>hashval,<sp/>rbt_value,<sp/>&amp;pn)<sp/>==<sp/>HASHTABLE_SUCCESS)</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>An<sp/>entry<sp/>of<sp/>that<sp/>key<sp/>already<sp/>exists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(how<sp/>==<sp/>HASHTABLE_SET_HOW_TEST_ONLY)</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[hashval].ok.nb_test<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V_w(&amp;(ht-&gt;array_lock[hashval]));</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_SUCCESS;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(how<sp/>==<sp/>HASHTABLE_SET_HOW_SET_NO_OVERWRITE)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[hashval].err.nb_test<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V_w(&amp;(ht-&gt;array_lock[hashval]));</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_ERROR_KEY_ALREADY_EXISTS;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qn<sp/>=<sp/>pn;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pdata<sp/>=<sp/>RBT_OPAQ(qn);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LogFullDebug(COMPONENT_HASHTABLE,</highlight><highlight class="stringliteral">&quot;Ecrasement<sp/>d&apos;une<sp/>ancienne<sp/>entree<sp/>(k=%p,v=%p)\n&quot;</highlight><highlight class="normal">,<sp/>buffkey-&gt;pdata,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffval-&gt;pdata);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>entry<sp/>of<sp/>that<sp/>key,<sp/>add<sp/>it<sp/>to<sp/>the<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(how<sp/>==<sp/>HASHTABLE_SET_HOW_TEST_ONLY)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[hashval].notfound.nb_test<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V_w(&amp;(ht-&gt;array_lock[hashval]));</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_ERROR_NO_SUCH_KEY;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>a<sp/>new<sp/>node<sp/>in<sp/>the<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RBT_FIND(tete_rbt,<sp/>pn,<sp/>rbt_value);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="632"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BuddySetDebugLabel(</highlight><highlight class="stringliteral">&quot;rbt_node_t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="635"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>entry<sp/>does<sp/>not<sp/>exist,<sp/>create<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>First<sp/>get<sp/>a<sp/>new<sp/>entry<sp/>in<sp/>the<sp/>preallocated<sp/>node<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GET_PREALLOC(qn,<sp/>ht-&gt;node_prealloc[hashval],<sp/>ht-&gt;parameter.nb_node_prealloc,</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rbt_node_t,<sp/>next);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(qn<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[hashval].err.nb_set<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V_w(&amp;(ht-&gt;array_lock[hashval]));</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_INSERT_MALLOC_ERROR;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="646"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BuddySetDebugLabel(</highlight><highlight class="stringliteral">&quot;hash_data_t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="649"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GET_PREALLOC(pdata,<sp/>ht-&gt;pdata_prealloc[hashval],<sp/>ht-&gt;parameter.nb_node_prealloc,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_data_t,<sp/>next_alloc);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pdata<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[hashval].err.nb_set<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V_w(&amp;(ht-&gt;array_lock[hashval]));</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_INSERT_MALLOC_ERROR;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG_MEMLEAKS</highlight></codeline>
<codeline lineno="658"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>debugging<sp/>memory<sp/>leaks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BuddySetDebugLabel(</highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="661"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RBT_OPAQ(qn)<sp/>=<sp/>pdata;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RBT_VALUE(qn)<sp/>=<sp/>rbt_value;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RBT_INSERT(tete_rbt,<sp/>qn,<sp/>pn);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LogFullDebug(COMPONENT_HASHTABLE,</highlight><highlight class="stringliteral">&quot;Creation<sp/>d&apos;une<sp/>nouvelle<sp/>entree<sp/>(k=%p,v=%p),<sp/>qn=%p,<sp/>pdata=%p\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffkey-&gt;pdata,<sp/>buffval-&gt;pdata,<sp/>qn,<sp/>RBT_OPAQ(qn));</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>pdata-&gt;buffval.pdata<sp/>=<sp/>buffval-&gt;pdata;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>pdata-&gt;buffval.len<sp/>=<sp/>buffval-&gt;len;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>pdata-&gt;buffkey.pdata<sp/>=<sp/>buffkey-&gt;pdata;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>pdata-&gt;buffkey.len<sp/>=<sp/>buffkey-&gt;len;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>ht-&gt;stat_dynamic[hashval].nb_entries<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>ht-&gt;stat_dynamic[hashval].ok.nb_set<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>mutex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>V_w(&amp;(ht-&gt;array_lock[hashval]));</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_SUCCESS;</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HashTable_Set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="702" refid="group__HashTableExportedFunctions_1gae002d8403bd95e1ae432333bb16ae509" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__HashTableExportedFunctions_1gae002d8403bd95e1ae432333bb16ae509" kindref="member">HashTable_Get</ref>(hash_table_t<sp/>*<sp/>ht,<sp/>hash_buffer_t<sp/>*<sp/>buffkey,<sp/>hash_buffer_t<sp/>*<sp/>buffval)</highlight></codeline>
<codeline lineno="703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashval;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rbt_node<sp/>*pn;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rbt_head<sp/>*tete_rbt;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>hash_data_t<sp/>*pdata<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rbt_value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ht<sp/>==<sp/>NULL<sp/>||<sp/>buffkey<sp/>==<sp/>NULL<sp/>||<sp/>buffval<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_ERROR_INVALID_ARGUMENT;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>RB<sp/>Tree<sp/>to<sp/>be<sp/>processed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>hashval<sp/>=<sp/>(*(ht-&gt;parameter.hash_func_key))<sp/>(&amp;ht-&gt;parameter,<sp/>buffkey);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>tete_rbt<sp/>=<sp/>&amp;(ht-&gt;array_rbt[hashval]);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Seek<sp/>into<sp/>the<sp/>RB<sp/>Tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>rbt_value<sp/>=<sp/>(*(ht-&gt;parameter.hash_func_rbt))<sp/>(&amp;ht-&gt;parameter,<sp/>buffkey);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Acquire<sp/>mutex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>P_r(&amp;(ht-&gt;array_lock[hashval]));</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>I<sp/>get<sp/>the<sp/>node<sp/>with<sp/>this<sp/>value<sp/>that<sp/>is<sp/>located<sp/>on<sp/>the<sp/>left<sp/>(first<sp/>with<sp/>this<sp/>value<sp/>in<sp/>the<sp/>rbtree)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((rc<sp/>=<sp/>Key_Locate(ht,<sp/>buffkey,<sp/>hashval,<sp/>rbt_value,<sp/>&amp;pn))<sp/>!=<sp/>HASHTABLE_SUCCESS)</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[hashval].notfound.nb_get<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>V_r(&amp;(ht-&gt;array_lock[hashval]));</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Key<sp/>was<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>pdata<sp/>=<sp/>(hash_data_t<sp/>*)<sp/>RBT_OPAQ(pn);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>buffval-&gt;pdata<sp/>=<sp/>pdata-&gt;buffval.pdata;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>buffval-&gt;len<sp/>=<sp/>pdata-&gt;buffval.len;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>ht-&gt;stat_dynamic[hashval].ok.nb_get<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>mutex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>V_r(&amp;(ht-&gt;array_lock[hashval]));</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_SUCCESS;</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HashTable_Get<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="764" refid="group__HashTableExportedFunctions_1gadda0535c9f1748795d9eeb2514f5458c" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__HashTableExportedFunctions_1gadda0535c9f1748795d9eeb2514f5458c" kindref="member">HashTable_Del</ref>(hash_table_t<sp/>*<sp/>ht,<sp/>hash_buffer_t<sp/>*<sp/>buffkey,</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_buffer_t<sp/>*<sp/>p_usedbuffkey,<sp/>hash_buffer_t<sp/>*<sp/>p_usedbuffdata)</highlight></codeline>
<codeline lineno="766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashval;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rbt_node<sp/>*pn;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rbt_value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rbt_head<sp/>*tete_rbt;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>hash_data_t<sp/>*pdata<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ht<sp/>==<sp/>NULL<sp/>||<sp/>buffkey<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_ERROR_INVALID_ARGUMENT;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>RB<sp/>Tree<sp/>to<sp/>be<sp/>processed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>hashval<sp/>=<sp/>(*(ht-&gt;parameter.hash_func_key))<sp/>(&amp;ht-&gt;parameter,<sp/>buffkey);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>entry<sp/>to<sp/>be<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>rbt_value<sp/>=<sp/>(*(ht-&gt;parameter.hash_func_rbt))<sp/>(&amp;ht-&gt;parameter,<sp/>buffkey);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>acquire<sp/>mutex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>P_w(&amp;(ht-&gt;array_lock[hashval]));</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>didn&apos;t<sp/>find<sp/>anything<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((rc<sp/>=<sp/>Key_Locate(ht,<sp/>buffkey,<sp/>hashval,<sp/>rbt_value,<sp/>&amp;pn))<sp/>!=<sp/>HASHTABLE_SUCCESS)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;stat_dynamic[hashval].notfound.nb_del<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>V_w(&amp;(ht-&gt;array_lock[hashval]));</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>pdata<sp/>=<sp/>(hash_data_t<sp/>*)<sp/>RBT_OPAQ(pn);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>key<sp/>buffer<sp/>back<sp/>to<sp/>the<sp/>end<sp/>user<sp/>if<sp/>pusedbuffkey<sp/>isn&apos;t<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p_usedbuffkey<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>*p_usedbuffkey<sp/>=<sp/>pdata-&gt;buffkey;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p_usedbuffdata<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>*p_usedbuffdata<sp/>=<sp/>pdata-&gt;buffval;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Key<sp/>was<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>tete_rbt<sp/>=<sp/>&amp;(ht-&gt;array_rbt[hashval]);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>RBT_UNLINK(tete_rbt,<sp/>pn);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>key<sp/>was<sp/>located,<sp/>the<sp/>deletion<sp/>is<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>ht-&gt;stat_dynamic[hashval].nb_entries<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>put<sp/>back<sp/>the<sp/>pdata<sp/>buffer<sp/>to<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>RELEASE_PREALLOC(pdata,<sp/>ht-&gt;pdata_prealloc[hashval],<sp/>next_alloc);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Put<sp/>the<sp/>node<sp/>back<sp/>in<sp/>the<sp/>table<sp/>of<sp/>preallocated<sp/>nodes<sp/>(it<sp/>could<sp/>be<sp/>reused)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>RELEASE_PREALLOC(pn,<sp/>ht-&gt;node_prealloc[hashval],<sp/>next);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>ht-&gt;stat_dynamic[hashval].ok.nb_del<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>release<sp/>mutex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>V_w(&amp;(ht-&gt;array_lock[hashval]));</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_SUCCESS;</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>HashTable_Del<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="841" refid="group__HashTableExportedFunctions_1ga8cc973332d8c4a92258793acc228e084" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__HashTableExportedFunctions_1ga8cc973332d8c4a92258793acc228e084" kindref="member">HashTable_GetStats</ref>(hash_table_t<sp/>*<sp/>ht,<sp/>hash_stat_t<sp/>*<sp/>hstat)</highlight></codeline>
<codeline lineno="842"><highlight class="normal">{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ht<sp/>==<sp/>NULL<sp/>||<sp/>hstat<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Firt,<sp/>copy<sp/>the<sp/>dynamic<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>memcpy(&amp;(hstat-&gt;dynamic),<sp/>ht-&gt;stat_dynamic,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hash_stat_dynamic_t));</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Then<sp/>computed<sp/>the<sp/>other<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>hstat-&gt;computed.min_rbt_num_node<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>31;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>min<sp/>value<sp/>hash<sp/>to<sp/>be<sp/>initialized<sp/>with<sp/>a<sp/>huge<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>hstat-&gt;computed.max_rbt_num_node<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>A<sp/>max<sp/>value<sp/>is<sp/>initialized<sp/>with<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>hstat-&gt;computed.average_rbt_num_node<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>And<sp/>so<sp/>does<sp/>the<sp/>averagle<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>hstat-&gt;dynamic.nb_entries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>hstat-&gt;dynamic.ok.nb_set<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>hstat-&gt;dynamic.ok.nb_test<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>hstat-&gt;dynamic.ok.nb_get<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>hstat-&gt;dynamic.ok.nb_del<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>hstat-&gt;dynamic.err.nb_set<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>hstat-&gt;dynamic.err.nb_test<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>hstat-&gt;dynamic.err.nb_get<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>hstat-&gt;dynamic.err.nb_del<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>hstat-&gt;dynamic.notfound.nb_set<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>hstat-&gt;dynamic.notfound.nb_test<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>hstat-&gt;dynamic.notfound.nb_get<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>hstat-&gt;dynamic.notfound.nb_del<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ht-&gt;parameter.index_size;<sp/>i++)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ht-&gt;array_rbt[i].rbt_num_node<sp/>&gt;<sp/>hstat-&gt;computed.max_rbt_num_node)</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;computed.max_rbt_num_node<sp/>=<sp/>ht-&gt;array_rbt[i].rbt_num_node;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ht-&gt;array_rbt[i].rbt_num_node<sp/>&lt;<sp/>hstat-&gt;computed.min_rbt_num_node)</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;computed.min_rbt_num_node<sp/>=<sp/>ht-&gt;array_rbt[i].rbt_num_node;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;computed.average_rbt_num_node<sp/>+=<sp/>ht-&gt;array_rbt[i].rbt_num_node;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;dynamic.nb_entries<sp/>+=<sp/>ht-&gt;stat_dynamic[i].nb_entries;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;dynamic.ok.nb_set<sp/>+=<sp/>ht-&gt;stat_dynamic[i].ok.nb_set;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;dynamic.ok.nb_test<sp/>+=<sp/>ht-&gt;stat_dynamic[i].ok.nb_test;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;dynamic.ok.nb_get<sp/>+=<sp/>ht-&gt;stat_dynamic[i].ok.nb_get;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;dynamic.ok.nb_del<sp/>+=<sp/>ht-&gt;stat_dynamic[i].ok.nb_del;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;dynamic.err.nb_set<sp/>+=<sp/>ht-&gt;stat_dynamic[i].err.nb_set;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;dynamic.err.nb_test<sp/>+=<sp/>ht-&gt;stat_dynamic[i].err.nb_test;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;dynamic.err.nb_get<sp/>+=<sp/>ht-&gt;stat_dynamic[i].err.nb_get;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;dynamic.err.nb_del<sp/>+=<sp/>ht-&gt;stat_dynamic[i].err.nb_del;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;dynamic.notfound.nb_set<sp/>+=<sp/>ht-&gt;stat_dynamic[i].notfound.nb_set;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;dynamic.notfound.nb_test<sp/>+=<sp/>ht-&gt;stat_dynamic[i].notfound.nb_test;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;dynamic.notfound.nb_get<sp/>+=<sp/>ht-&gt;stat_dynamic[i].notfound.nb_get;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hstat-&gt;dynamic.notfound.nb_del<sp/>+=<sp/>ht-&gt;stat_dynamic[i].notfound.nb_del;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>hstat-&gt;computed.average_rbt_num_node<sp/>/=<sp/>ht-&gt;parameter.index_size;</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="919" refid="group__HashTableExportedFunctions_1ga882a11e8509b2fb9de233145f923d516" refkind="member"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__HashTableExportedFunctions_1ga882a11e8509b2fb9de233145f923d516" kindref="member">HashTable_GetSize</ref>(hash_table_t<sp/>*<sp/>ht)</highlight></codeline>
<codeline lineno="920"><highlight class="normal">{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_entries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ht<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HASHTABLE_ERROR_INVALID_ARGUMENT;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ht-&gt;parameter.index_size;<sp/>i++)</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>nb_entries<sp/>+=<sp/>ht-&gt;stat_dynamic[i].nb_entries;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nb_entries;</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HashTable_GetSize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="948" refid="group__HashTableExportedFunctions_1gaf5add10f55a1624787f981099d005806" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__HashTableExportedFunctions_1gaf5add10f55a1624787f981099d005806" kindref="member">HashTable_Log</ref>(log_components_t<sp/>component,<sp/>hash_table_t<sp/>*<sp/>ht)</highlight></codeline>
<codeline lineno="949"><highlight class="normal">{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rbt_node<sp/>*it;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rbt_head<sp/>*tete_rbt;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>hash_data_t<sp/>*pdata<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dispkey[HASHTABLE_DISPLAY_STRLEN];</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dispval[HASHTABLE_DISPLAY_STRLEN];</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_entries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rbtval;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hashval;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ht<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>LogFullDebug(COMPONENT_HASHTABLE,</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>hash<sp/>has<sp/>%d<sp/>nodes<sp/>(this<sp/>number<sp/>MUST<sp/>be<sp/>a<sp/>prime<sp/>integer<sp/>for<sp/>performance&apos;s<sp/>issues)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;parameter.index_size);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ht-&gt;parameter.index_size;<sp/>i++)</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>nb_entries<sp/>+=<sp/>ht-&gt;stat_dynamic[i].nb_entries;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>LogFullDebug(COMPONENT_HASHTABLE,</highlight><highlight class="stringliteral">&quot;The<sp/>hash<sp/>contains<sp/>%d<sp/>entries\n&quot;</highlight><highlight class="normal">,<sp/>nb_entries);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ht-&gt;parameter.index_size;<sp/>i++)</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tete_rbt<sp/>=<sp/>&amp;((ht-&gt;array_rbt)[i]);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LogFullDebug(COMPONENT_HASHTABLE,</highlight><highlight class="stringliteral">&quot;The<sp/>node<sp/>in<sp/>position<sp/>%d<sp/>contains:<sp/><sp/>%d<sp/>entries<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>i,</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tete_rbt-&gt;rbt_num_node);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RBT_LOOP(tete_rbt,<sp/>it)</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata<sp/>=<sp/>(hash_data_t<sp/>*)<sp/>it-&gt;rbt_opaq;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;parameter.key_to_str(&amp;(pdata-&gt;buffkey),<sp/>dispkey);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht-&gt;parameter.val_to_str(&amp;(pdata-&gt;buffval),<sp/>dispval);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashval<sp/>=<sp/>(*(ht-&gt;parameter.hash_func_key))<sp/>(&amp;ht-&gt;parameter,<sp/>&amp;(pdata-&gt;buffkey));</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rbtval<sp/>=<sp/>(*(ht-&gt;parameter.hash_func_rbt))<sp/>(&amp;ht-&gt;parameter,<sp/>&amp;(pdata-&gt;buffkey));</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogFullDebug(component,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>=&gt;<sp/>%s;<sp/>hashval=%lu<sp/>rbtval=%lu\n<sp/>&quot;</highlight><highlight class="normal">,<sp/>dispkey,<sp/>dispval,<sp/>hashval,<sp/>rbtval);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RBT_INCREMENT(it);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HashTable_Print<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006" refid="group__HashTableExportedFunctions_1ga8403154cc1223657b499272deef394ae" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__HashTableExportedFunctions_1ga8403154cc1223657b499272deef394ae" kindref="member">HashTable_Print</ref>(hash_table_t<sp/>*<sp/>ht)</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><ref refid="group__HashTableExportedFunctions_1gaf5add10f55a1624787f981099d005806" kindref="member">HashTable_Log</ref>(COMPONENT_STDOUT,<sp/>ht);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HashTable_Print<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/export/GANESHA/src/HashTable/HashTable.c"/>
  </compounddef>
</doxygen>
