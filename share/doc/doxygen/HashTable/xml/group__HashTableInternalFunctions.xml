<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.3.9.1">
  <compounddef id="group__HashTableInternalFunctions" kind="group">
    <compoundname>HashTableInternalFunctions</compoundname>
    <title>HashTableInternalFunctions</title>
    <innergroup refid="group__HashTableExportedFunctions">HashTableExportedFunctions</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__HashTableInternalFunctions_1ga0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long simple_hash_func</definition>
        <argsstring>(hash_parameter_t *p_hparam, hash_buffer_t *buffclef)</argsstring>
        <name>simple_hash_func</name>
        <param>
          <type>hash_parameter_t *</type>
          <declname>p_hparam</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffclef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>simple_hash_func: A template hash function, which considers the hash key as a polynom</para><para>A template hash function, which considers the hash key as a polynom. we are supposed to managed string written with ht-&gt;alphabet_length different characters We turn the string into a binary by computing str[0]+str[1]*ht-&gt;alphabet_length+str[2]*ht-&gt;alphabet_length**2 + ... ... + str[N]*ht-&gt;alphabet_length**N Then we keep the modulo by index_size. This size has to be a prime integer for performance reason The polynome is computed with the Horner&apos;s method.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hparam</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameter structure that was used to define the hashtable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffclef</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to compute the hash value on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the hash value</para></simplesect>
<simplesect kind="see"><para><ref refid="group__HashTableInternalFunctions_1ga1" kindref="member">double_hash_func</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/HashTable/HashTable.c" line="279" bodystart="278" bodyend="297"/>
        <referencedby refid="test__cmchash__bugdelete_8c_1a13" compoundref="test__cmchash__bugdelete_8c" startline="227" endline="456">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__HashTableInternalFunctions_1ga1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long double_hash_func</definition>
        <argsstring>(hash_parameter_t *p_hparam, hash_buffer_t *buffclef)</argsstring>
        <name>double_hash_func</name>
        <param>
          <type>hash_parameter_t *</type>
          <declname>p_hparam</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffclef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>double_hash_func: This function is used for double hashing, based on another hash function.</para><para>This functions uses the hash function contained in hparam to compute a first hash value, then use it to compute a second value like this: h = ( firsthash + ( 8 - ( firsthash  8 ) ) )  hparam.index_size This operation just changes the last 3 bits, but it can be demonstrated that this produced a more efficient and better balanced hash function (See &apos;Algorithm in C&apos;, Robert Sedjewick for more detail on this).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hparam</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameter structure that was used to define the hashtable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffclef</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to compute the hash value on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the hash value</para></simplesect>
<simplesect kind="see"><para><ref refid="group__HashTableInternalFunctions_1ga1" kindref="member">double_hash_func</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/HashTable/HashTable.c" line="316" bodystart="315" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableInternalFunctions_1ga2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int rbt_hash_func</definition>
        <argsstring>(hash_parameter_t *p_hparam, hash_buffer_t *buffclef)</argsstring>
        <name>rbt_hash_func</name>
        <param>
          <type>hash_parameter_t *</type>
          <declname>p_hparam</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffclef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>rbt_hash_func: Another hash junction, but to be used for the red-black trees managed internally.</para><para>This library uses red-black trees to store data. RB trees use key data too. The hash function has to be different than the one used for find the RB Tree, if not all the entry in the tree will have the same hash value which will lead to a very unbalanced tree</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hparam</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameter structure that was used to define the hashtable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffclef</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to compute the hash value on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the hash value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/HashTable/HashTable.c" line="346" bodystart="345" bodyend="351"/>
        <referencedby refid="test__cmchash__bugdelete_8c_1a13" compoundref="test__cmchash__bugdelete_8c" startline="227" endline="456">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__HashTableInternalFunctions_1ga3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hash_data_t *</type>
        <definition>hash_data_t* PreAllocPdata</definition>
        <argsstring>(int nb_alloc)</argsstring>
        <name>PreAllocPdata</name>
        <param>
          <type>int</type>
          <declname>nb_alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PreAllocPdata: Does the allocation of a groups of hash_data_t to be managed as RBT_OPAQ values.</para><para>Does the allocation of a groups of hash_data_t to be managed as RBT_OPAQ values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nb_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>number of pdata to be pre-allocated</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the list of allocated pdata of NULL if allocation failed</para></simplesect>
<simplesect kind="see"><para><ref refid="group__HashTableExportedFunctions_1ga0" kindref="member">HashTable_Init</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/HashTable/HashTable.c" line="368" bodystart="367" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableInternalFunctions_1ga4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>rbt_node *</type>
        <definition>struct rbt_node* PreAllocNode</definition>
        <argsstring>(int nb_alloc)</argsstring>
        <name>PreAllocNode</name>
        <param>
          <type>int</type>
          <declname>nb_alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PreAllocNode: Does the allocation of a groups of nodes to be managed by the RB Tree</para><para>Does the allocation of a groups of nodes to be managed by the RB Tree.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nb_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rbt-node to be pre-allocated</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the list of allocated nodes of NULL if allocation failed</para></simplesect>
<simplesect kind="see"><para><ref refid="group__HashTableExportedFunctions_1ga0" kindref="member">HashTable_Init</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/HashTable/HashTable.c" line="403" bodystart="402" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="group__HashTableInternalFunctions_1ga5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Key_Locate</definition>
        <argsstring>(hash_table_t *ht, hash_buffer_t *buffkey, unsigned int hashval, int rbt_value, struct rbt_node **ppnode)</argsstring>
        <name>Key_Locate</name>
        <param>
          <type>hash_table_t *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>hash_buffer_t *</type>
          <declname>buffkey</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>hashval</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rbt_value</declname>
        </param>
        <param>
          <type>struct rbt_node **</type>
          <declname>ppnode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key_Locate: Locate a buffer key in the hash table, as a rbt node.</para><para>This function is for internal use only</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>the hashtable to be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffkey</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointeur to an object of type hash_buffer_t which describe the key location in memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashval</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value associated with the key (in order to avoid computing it a second time) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rbt_value</parametername>
</parameternamelist>
<parameterdescription>
<para>rbt value associated with the key (in order to avoid computing it a second time) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ppnode</parametername>
</parameternamelist>
<parameterdescription>
<para>if successfull,will point to the pointer to the rbt node to be used</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HASHTABLE_SUCCESS if successfull<linebreak/>
. </para><para>HASHTABLE_NO_SUCH_KEY if key was not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/philippe/GANESHA/src/HashTable/HashTable.c" line="448" bodystart="447" bodyend="489"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
